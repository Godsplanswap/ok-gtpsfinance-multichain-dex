{"version":3,"sources":["components/Collapse.tsx","components/ProgressSteps/index.tsx","components/swapv2/AdvancedSwapDetails.tsx","components/swapv2/AdvancedSwapDetailsDropdown.tsx","pages/AppBody.tsx","hooks/bridge/useGetBridgeTransfers.ts","pages/Bridge/consts.ts","pages/Bridge/BridgeTransferHistory/ActionCell.tsx","pages/Bridge/BridgeTransferHistory/RouteCell.tsx","pages/Bridge/BridgeTransferHistory/StatusBadge.tsx","pages/Bridge/utils.ts","pages/Bridge/BridgeTransferHistory/TimeCell.tsx","pages/Bridge/BridgeTransferHistory/TimeStatusCell.tsx","pages/Bridge/BridgeTransferHistory/TokenReceiveCell.tsx","pages/Bridge/BridgeTransferHistory/useTransferHistory.ts","pages/Bridge/BridgeTransferHistory/index.tsx","pages/Bridge/BridgeTransfers/TabSelector.tsx","pages/Bridge/BridgeTransfers/index.tsx","pages/Bridge/helpers.ts","pages/Bridge/Disclaimer.tsx","assets/svg/arrow_up.svg","components/SearchModal/bridge/CurrencyListBridge.tsx","components/SearchModal/bridge/CurrencySearchBridge.tsx","components/SearchModal/bridge/CurrencySearchModalBridge.tsx","hooks/bridge/index.ts","pages/Bridge/SelectNetwork.tsx","components/CurrencyInputPanel/CurrencyInputPanelBridge.tsx","hooks/bridge/useBridgeCallback.ts","pages/Bridge/ComfirmBridgeModal.tsx","pages/Bridge/ErrorWarning.tsx","pages/Bridge/PoolInfo.tsx","pages/Bridge/SwapForm.tsx","pages/Bridge/index.tsx","state/bridge/hooks.ts","utils/fee.ts"],"names":["ItemWrapper","styled","div","theme","background","Header","ArrowWrapper","text","ContentWrapper","CollapseItem","header","arrowComponent","children","expandedOnMount","style","className","useState","isExpanded","setExpanded","onClick","e","ToggleCollapse","data","itemActiveStyle","itemStyle","expandedIndex","setExpandedIndex","map","item","index","isActive","title","content","Wrapper","AutoColumn","Grouping","RowBetween","Circle","confirmed","disabled","buttonGray","green1","primary","textReverse","CircleRow","Connector","prevConfirmed","bg4","transparentize","ProgressCircles","steps","rest","justify","step","i","length","IconWrapper","show","TradeSummary","trade","feeConfig","allowedSlippage","isEVM","useActiveWeb3React","useTheme","setShow","isExactIn","tradeType","TradeType","EXACT_INPUT","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","nativeInput","useCurrencyConvertedToNative","inputAmount","currency","nativeOutput","outputAmount","formattedFeeAmountUsd","useMemo","getFormattedFeeAmountUsd","Row","cursor","prev","role","fontSize","fontWeight","color","gap","Divider","black","subText","InfoHelper","size","Field","OUTPUT","formattedNum","toSignificant","symbol","INPUT","gasUsd","toString","priceImpact","red","warning","toFixed","AdvancedSwapDetails","useUserSlippageTolerance","TradeSummaryBridge","outputInfo","useBridgeState","tokenInfoOut","fee","BigValueThreshold","time","SwapFeeRatePerMillion","MinimumSwapFee","MaximumSwapFee","marginTop","alignItems","textAlign","flexDirection","MinimumSwap","MaximumSwap","AdvancedDetailsFooter","text2","border","AdvancedSwapDetailsDropdown","lastTrade","useLastTruthy","Boolean","undefined","AdvancedSwapDetailsDropdownBridge","BodyWrapper","AppBody","MultichainTransferStatus","ITEMS_PER_PAGE","ExternalLinkWrapper","a","rgba","css","WrapperActionCell","Flex","ActionCell","url","href","target","rel","width","height","viewBox","fill","xmlns","d","stroke","RouteCell","fromChainID","toChainID","isDark","useIsDarkMode","renderChainIcon","chainId","chainInfo","NETWORKS_INFO_CONFIG","src","iconDark","icon","alt","name","sx","marginLeft","QuestionHelper","placement","marginRight","useGetBridgeTransfers","swrKey","useSWR","fetch","response","ok","json","Error","cssByStatus","Success","Failure","Processing","status","iconOnly","StatusBadge","label","getLabelByStatus","as","overflow","textOverflow","whiteSpace","TimeCell","timestamp","dateString","dayjs","utc","local","format","timeString","lineHeight","justifyContent","display","TimeStatusCell","TokenReceiveCell","transfer","formatNumberWithPrecisionRange","parseFloat","dstAmount","dstTokenSymbol","useTransferHistory","account","dispatch","useDispatch","page","setPage","fetchAccount","useParsedQueryString","KS_SETTING_API","isValidating","error","transfers","canGoPrevious","maxPage","pagination","totalItems","Math","floor","canGoNext","range","min","useEffect","setHistoryURL","onClickNext","onClickPrevious","isCompletelyEmpty","commonCSS","mediaWidth","upToLarge","upToExtraSmall","TableHeader","tableHeader","TableColumnText","TableRow","PaginationButton","button","useMedia","MEDIA_WIDTHS","upToMedium","shouldShowLoading","setShouldShowLoading","isThisPageEmpty","timeOutRef","useRef","existingTimeout","current","setTimeout","clearTimeout","LocalLoader","renderInvisibleRows","Array","_","visibility","getTxsUrl","txHash","flex","createdAt","Number","srcChainId","dstChainId","srcTxHash","padding","borderTop","TabItem","mixpanelHandler","useMixpanel","MIXPANEL_TYPE","BRIDGE_CLICK_HISTORY_TRANSFER_TAB","BridgeTransferHistory","BridgeLocalStorageKeys","getBridgeLocalstorage","key","bridgeInfo","JSON","parse","localStorage","getItem","setBridgeLocalstorage","value","setItem","stringify","MULTICHAIN_API","fetchListChainSupport","axios","get","then","fetchListTokenByChain","getTokenListCache","filterTokenList","tokens","Object","keys","forEach","destChains","hasChainSupport","chain","address","info","isAddress","getTokenlist","isStaleData","console","log","removeItem","getChainlist","chainIds","filter","id","formatPoolValue","amount","Container","TextWrapper","p","Disclaimer","showed","Modal","isOpen","Button","_path","_excluded","_extends","assign","bind","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowUp","_ref","svgRef","titleId","props","ref","ForwardRef","CurrencyListBridge","memo","currencies","isOutput","onCurrencySelect","listTokenRef","tokenInfoIn","poolValueOutMap","currencyBalances","useCurrencyBalances","useCallback","currencyBalance","isSelected","toLowerCase","sortId","multichainInfo","getDisplayTokenInfo","type","anytoken","poolLiquidity","showBalance","showFavoriteIcon","onSelect","otherSelected","customName","includes","itemSize","itemCount","itemData","outerRef","CurrencySearchBridge","onDismiss","searchQuery","setSearchQuery","debouncedQuery","useDebounce","listTokenIn","listTokenOut","fetchedTokens","tokenComparator","useTokenComparator","isAddressSearch","filteredTokens","find","filterTokens","visibleCurrencies","sorted","sort","symbolMatch","split","s","token","handleCurrencySelect","inputRef","focus","handleInput","event","input","checksumInput","scrollTop","handleEnter","trim","useToggle","open","toggle","node","useOnClickOutside","zIndexTooltip","Z_INDEXS","MODAL","placeholder","onChange","onKeyDown","autoComplete","msg","CurrencySearchModalBridge","zindex","margin","maxHeight","minHeight","useTokenBalanceOfAnotherChain","balance","setBalance","isNativeToken","tokenType","Promise","resolve","reject","provider","providers","getBalance","contract","ethers","Contract","ERC20_ABI","balanceOf","utils","formatUnits","decimals","getTokenBalanceOfAnotherChain","catch","getCallParams","list","calls","push","callData","ERC20_INTERFACE","encodeFunctionData","underlying","fragment","formatResult","resultList","len","decodeFunctionResult","useMultichainPool","tokenList","poolData","setPoolData","multicallContract","useMulticallContract","getEvmPoolsData","callStatic","tryBlockAndAggregate","returnData","fetchPoolCallback","newData","useInterval","NetworkSwitchContainer","NetworkLabel","DropdownIcon","DropdownSvg","Web3Network","onSelectNetwork","selectedChainId","setIsOpen","toggleNetworkModal","NETWORKS_INFO","NetworkModal","disabledMsg","activeChainIds","selectedId","customToggleModal","customOnSelectNetwork","CurrencyInputPanelBridge","onUserInput","onMax","modalOpen","setModalOpen","currencyIn","currencyOut","chainIdOut","loadingToken","selectedCurrencyBalance","useCurrencyBalance","balanceRef","destBalance","handleDismissSearch","disabledSelect","formatDestBalance","hideInput","selected","marginBottom","SelectNetwork","Wallet","NumericalInput","paddingRight","CurrencyLogo","active","NOT_APPLICABLE","execute","inputError","useSendTxToKsSettingCallback","historyURL","useAppSelector","state","bridge","onSuccess","mutate","srcTokenSymbol","srcAmount","body","userAddress","dstTxHash","post","extraData","cause","captureException","level","extra","args","useBridgeCallback","inputToken","routerToken","isNative","toAddress","typedValue","useBridgeOutputValue","bridgeContract","useBridgeContract","isNaN","ethBalance","useETHBalance","anyBalance","tryParseAmount","addTransactionWithType","useTransactionAdder","sendTxToKsSetting","sufficientBalance","lessThan","useSwapMethods","params","quotient","promise","anySwapOutNative","anySwapOutUnderlying","anySwapOut","window","onbeforeunload","txReceipt","hash","from_network","to_network","inputAmountStr","outputAmountStr","from_token","to_token","TRANSACTION_TYPE","BRIDGE","summary","arbitrary","bridge_fee","trade_qty","useRouterSwap","onRouterSwap","wrapInputErrorBridge","library","useWeb3React","tokenBalance","contractBTC","useSwapBTCContract","contractETH","useSwapETHContract","from","to","send","Swapout","useBridgeSwap","onBridgeSwap","wrapInputErrorCrossBridge","isBridge","Value","Label","formatValue","styleLogo","onSwap","swapState","listData","shortenAddress","Copy","toCopy","confirmationContent","swapErrorMessage","message","borderRadius","fontStyle","TransactionConfirmationModal","showConfirm","attemptingTxn","pendingText","ErrorWarningPanel","Collapse","PoolInfo","tokenIn","poolValue","AppBodyWrapped","SWAP_FORM","buttonBlack","calcPoolValue","Fraction","JSBI","exponentiate","BigInt","SwapForm","changeNetwork","useChangeNetwork","listChainIn","useBridgeStateHandler","resetBridgeState","setBridgeState","setBridgePoolInfo","toggleWalletModal","useWalletModalToggle","setInputAmount","approvalSubmitted","setApprovalSubmitted","poolValueIn","poolValueOut","setPoolValue","setSwapState","listChainOut","destChainInfo","SUPPORTED_NETWORKS","anyToken","fromanytoken","poolParamIn","isFromLiquidity","isLiquidity","poolParamOut","poolDataIn","poolDataOut","tokenWithMaxPool","maxPoolValue","hasUnlimitedPool","anytokenAddress","poolInfo","calcValue","tokenOut","anyTokenOut","el","prevChain","usePrevious","routerABI","router","DepositAddress","onWrap","wrapInputError","tip","inputNumber","handleTypeInput","showPreview","BRIDGE_CLICK_REVIEW_TRANSFER","hidePreview","handleSwap","BRIDGE_CLICK_TRANSFER","maxAmountInput","toExact","handleMaxInput","approveSpender","isRouter","isApprove","spender","formatInputBridgeValue","useApproveCallback","approval","approveCallback","ApprovalState","PENDING","NOT_APPROVED","onCurrencySelectDest","onSelectDestNetwork","showApproveFlow","APPROVED","disableBtnApproved","disableBtnReviewTransfer","some","position","Tooltip","maxWidth","ErrorWarning","altDisabledStyle","Loader","alignContent","ProgressSteps","MultichainLogoLight","MultichainLogoDark","ComfirmBridgeModal","Content","Title","h1","TIMEOUT","Bridge","isSolana","curChainId","formatAndSaveToken","chainIdRequest","native","result","logoUrl","wrappedToken","WrappedTokenInfo","logoURI","isTokenNative","fetchData","oldVersion","race","version","allSettled","useSelector","resetBridgeStateAction","setBridgePoolInfoAction","inputBridgeValue","BaseFeePercent","minFee","calcReceiveValueAndFee","amountInUsd","parseUnits","RESERVE_USD_DECIMALS","feeAmountDecimal","feeAmount","divide","BIPS_BASE","feeAmountUsd","multiply"],"mappings":"qiBAIMA,EAAcC,UAAOC,IAAV,4EAAGD,CAAH,oEAID,KAAGE,MAAkBC,aAG/BC,EAASJ,UAAOC,IAAV,uEAAGD,CAAH,8FASNK,EAAeL,UAAOC,IAAV,6EAAGD,CAAH,4LAQP,KAAGE,MAAkBI,OAa1BC,EAAiBP,UAAOC,IAAV,+EAAGD,CAAH,wDAmBPQ,EAAgC,IAOtC,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,eACAC,EAII,EAJJA,SAII,IAHJC,uBAGI,aAFJC,aAEI,MAFI,CAAC,EAEL,EADJC,EACI,EADJA,UAEA,EAAkCC,mBAASH,GAA3C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEA,OACE,eAAClB,EAAD,CAAac,MAAOA,EAAOC,UAAWA,EAAtC,UACE,eAACV,EAAD,CACEc,QAAS,KACPD,GAAYE,IAAMA,GAAlB,EAFJ,UAKGV,EACD,cAACJ,EAAD,CAAc,gBAAeW,EAA7B,SAA0CN,GAAkB,cAAC,IAAD,SAE9D,cAACH,EAAD,CAAgB,gBAAeS,EAA/B,SAA4CL,MAVhD,EAmDaS,IAlCQ,IAQhB,IAPLC,EAOI,EAPJA,KAOI,IANJC,uBAMI,MANc,CAAC,EAMf,MALJC,iBAKI,MALQ,CAAC,EAKT,EACJ,EAA0CR,mBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,OACE,8BACGJ,EAAKK,KAAI,CAACC,EAAMC,KACf,IAAMC,EAAWL,IAAkBI,EACnC,OACE,eAAC7B,EAAD,CAAyBc,MAAOgB,EAAQ,2BAAQN,GAAcD,GAAoBC,EAAlF,UACE,eAACnB,EAAD,CACEc,QAAS,KACPO,EAAiBI,GAAY,EAAID,EAAjC,EAFJ,UAKGD,EAAKG,MACN,cAACzB,EAAD,CAAc,gBAAewB,EAA7B,SACE,cAAC,IAAD,SAGJ,cAACtB,EAAD,CAAgB,gBAAesB,EAA/B,SAA0CF,EAAKI,YAX/BH,EADpB,KAJN,C,ihBC3FII,EAAUhC,kBAAOiC,KAAV,4EAAGjC,CAAH,MAEPkC,EAAWlC,kBAAOmC,KAAV,6EAAGnC,CAAH,gBAIRoC,EAASpC,UAAOC,IAAV,2EAAGD,CAAH,4KAGU,QAAGE,EAAH,EAAGA,MAAOmC,EAAV,EAAUA,UAAV,SAAqBC,SAC5BpC,EAAMqC,WAAaF,EAAYnC,EAAMsC,OAAStC,EAAMuC,OAD7C,IAGX,KAAGvC,MAAkBwC,cAQ1BC,EAAY3C,UAAOC,IAAV,8EAAGD,CAAH,8DAMT4C,EAAY5C,UAAOC,IAAV,8EAAGD,CAAH,6GAMT,QAAGE,EAAH,EAAGA,MAAO2C,EAAV,EAAUA,cAAV,SAAyBP,SACZpC,EAAM4C,IAAMC,YAAe,GAAKF,EAAgB3C,EAAMsC,OAAStC,EAAMuC,QADlF,IAGA,QAAGvC,EAAH,EAAGA,MAAO2C,EAAV,EAAUA,cAAV,SAAyBP,SAA2BpC,EAAM4C,IAAMD,EAAgB3C,EAAMuC,QAAUvC,EAAM4C,GAAtG,IAoBS,SAASE,EAAT,GAAsF,IAA3DC,EAA0D,EAA1DA,MAA0D,IAAnDX,gBAAmD,SAA9BY,EAA8B,iBAClG,OACE,cAAClB,EAAD,yBAASmB,QAAS,UAAcD,GAAhC,aACE,eAAChB,EAAD,WACGe,EAAMvB,KAAI,CAAC0B,EAAMC,IAEd,eAACV,EAAD,WACE,cAACP,EAAD,CAAQC,UAAWe,EAAMd,SAAUA,IAAcW,EAAMI,EAAI,IAAY,IAANA,EAAjE,SACGD,EAAO,SAAMC,EAAI,IAEpB,cAACT,EAAD,CAAWC,cAAeO,EAAMd,SAAUA,MAJ5Be,KAQpB,cAACjB,EAAD,CAAQE,SAAUA,IAAaW,EAAMA,EAAMK,OAAS,GAApD,SAAyDL,EAAMK,OAAS,SAI/E,C,4yCCvDKC,EAAcvD,UAAOC,IAAV,sFAAGD,CAAH,iEACN,KAAGE,MAAkBI,OACV,KAAGkD,KAA6B,UAAT,SAGvCjD,EAAiBP,kBAAOiC,KAAV,yFAAGjC,CAAH,uGACJ,KAAGwD,KAAmB,QAAU,IAChC,KAAGA,KAAmB,OAAS,IAW/C,SAASC,EAAT,GAAiF,IAAD,MAAxDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,gBAChCC,EAAUC,cAAVD,MACF3D,EAAQ6D,cACd,EAAwBhD,qBAAS4C,GAAjC,mBAAOH,EAAP,KAAaQ,EAAb,KAEMC,EAAYP,EAAMQ,YAAcC,YAAUC,YAC1CC,EAA0BC,YAA+BZ,EAAOE,GAEhEW,EAAcC,YAA6Bd,EAAMe,YAAYC,UAC7DC,EAAeH,YAA6Bd,EAAMkB,aAAaF,UAE/DG,EAAwBC,mBAAQ,IAAMC,YAAyBrB,EAAOC,IAAY,CAACD,EAAOC,IAEhG,OACE,mCACE,eAAC,IAAD,WACE,eAACqB,EAAA,EAAD,CAAYnE,MAAO,CAAEoE,OAAQ,WAAa/D,QAAS,IAAM8C,GAAQkB,IAASA,IAAOC,KAAK,SAAtF,UACE,cAAC,IAAD,CAAMC,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMI,KAAlD,SACE,6CAEF,cAACiD,EAAD,CAAaC,KAAMA,EAAnB,SACE,cAAC,IAAD,SAGJ,eAACjD,EAAD,CAAgBiD,KAAMA,EAAM+B,IAAI,UAAhC,UACE,cAACC,EAAA,EAAD,IACA,eAACR,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACGzB,EAAY,0BAAsB,wBAErC,cAAC0B,EAAA,EAAD,CAAYC,KAAM,GAAItF,KAAM,8EAE9B,cAAC0E,EAAA,EAAD,UACE,cAAC,IAAKS,MAAN,CAAYH,MAAOpF,EAAMI,KAAM8E,SAAU,GAAzC,SACGnB,EACKI,EAAwBwB,IAAMC,QAAhC,UACKC,aAAa,UAAA1B,EAAwBwB,IAAMC,eAA9B,eAAuCE,cAAc,MAAO,KAD9E,mBAEIrB,QAFJ,IAEIA,OAFJ,EAEIA,EAAcsB,QAEhB,IACA5B,EAAwBwB,IAAMK,OAAhC,UACGH,aAAa,UAAA1B,EAAwBwB,IAAMK,cAA9B,eAAsCF,cAAc,MAAO,KAD3E,mBAEEzB,QAFF,IAEEA,OAFF,EAEEA,EAAa0B,QAEf,WAITpC,GACC,eAACmB,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACE,oCAGF,cAACC,EAAA,EAAD,CAAYC,KAAM,GAAItF,KAAM,yDAE9B,cAAC,IAAKmF,MAAN,CAAYH,MAAOpF,EAAMI,KAAM8E,SAAU,GAAzC,SACG1B,EAAMyC,OAASJ,YAAY,UAACrC,EAAMyC,cAAP,aAAC,EAAcC,YAAY,GAAQ,UAKrE,eAACpB,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACE,yCAEF,cAACC,EAAA,EAAD,CAAYC,KAAM,GAAItF,KAAM,4EAE9B,cAAC,IAAKmF,MAAN,CACEL,SAAU,GACVE,MAAO5B,EAAM2C,YAAc,GAAKnG,EAAMoG,IAAM5C,EAAM2C,YAAc,EAAInG,EAAMqG,QAAUrG,EAAMI,KAF5F,UAI0B,IAAvBoD,EAAM2C,YACH,KACA3C,EAAM2C,YAAc,IACpB3C,EAAM2C,YAAYG,QAAQ,GAAK,IAC/B,eAGP7C,GACC,eAACqB,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACE,yCAEF,cAACC,EAAA,EAAD,CAAYC,KAAM,GAAItF,KAAM,kEAE9B,cAAC,IAAKmF,MAAN,CAAYH,MAAOpF,EAAMI,KAAM8E,SAAU,GAAzC,SACGP,cAQhB,CAOM,SAAS4B,EAAT,GAA8E,IAA/C/C,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,UAC3C,EAA0B+C,cAAnB9C,EAAP,oBAEA,OAAOF,EAAQ,cAACD,EAAD,CAAcC,MAAOA,EAAOC,UAAWA,EAAWC,gBAAiBA,IAAsB,IACzG,CAEM,SAAS+C,EAAT,GAA+E,IAAD,MAAhDC,EAAgD,EAAhDA,WAC7B1G,EAAQ6D,cACd,EAA2B8C,cAAlBC,EAAT,oBAASA,aAET,EAAwB/F,oBAAS,GAAjC,mBAAOyC,EAAP,KAAaQ,EAAb,KACM+C,EAAMhB,YAAY,OAACa,QAAD,IAACA,GAAD,UAACA,EAAYG,WAAb,aAAC,EAAiBX,YAAY,EAAO,GAC7D,OACE,mCACE,eAAC,IAAD,WACE,eAACpB,EAAA,EAAD,CAAYnE,MAAO,CAAEoE,OAAQ,WAAa/D,QAAS,IAAM8C,GAAQkB,IAASA,IAAOC,KAAK,SAAtF,UACE,cAAC,IAAD,CAAMC,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMI,KAAlD,SACE,6CAEF,cAACiD,EAAD,CAAaC,KAAMA,EAAnB,SACE,cAAC,IAAD,SAGJ,eAACjD,EAAD,CAAgBiD,KAAMA,EAAM+B,IAAI,UAAhC,UACE,cAACC,EAAA,EAAD,IACA,eAACR,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACG,qCAEH,cAACC,EAAA,EAAD,CACEC,KAAM,GACNtF,KACEwG,GACA,2EAAkCf,YAAY,iBAACe,QAAD,IAACA,GAAD,UAACA,EAAcE,yBAAf,aAAC,EAAiCZ,kBAAlC,QAAgD,KAA9F,SACEU,QADF,IACEA,OADF,EACEA,EAAcb,cAKtB,cAACjB,EAAA,EAAD,UACE,cAAC,IAAKS,MAAN,CAAYH,MAAOpF,EAAMI,KAAM8E,SAAU,GAAzC,SACG0B,EAAeF,EAAWK,KAAO,YAIxC,eAACjC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACE,4CAGF,cAACC,EAAA,EAAD,CACEC,KAAM,GACNtF,KACGwG,EAGC,qCACE,cAAC,IAAD,CAAMxB,MAAOpF,EAAMI,KAAnB,SACE,8DAAQwG,QAAR,IAAQA,OAAR,EAAQA,EAAcI,4BAEX,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,mBAAd,OAAiCL,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAcM,gBAC9CR,EAAWG,IAAM,GACf,cAAC,IAAD,CAAMM,UAAW,MAAjB,SACE,2GACsBP,EAAab,OADnC,IACec,OAMnB,cAAC,IAAD,CAAMM,UAAW,MAAjB,SACE,oGAC0BtB,YAAae,EAAaK,gBADpD,EACsEL,EAAab,OADnF,EAG0BF,YAAae,EAAaM,gBAHpD,EAGsEN,EAAab,QAHnF,cAEE,+BAnBR,yDA6BR,cAAC,IAAKR,MAAN,CAAYH,MAAOpF,EAAMI,KAAM8E,SAAU,GAAzC,SACG0B,GAAgBF,EAAWG,IAA3B,UAAoCA,EAApC,mBAA2CD,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAcb,QAAW,UAIzE,eAACjB,EAAA,EAAD,CAAYnE,MAAO,CAAEyG,WAAY,cAAjC,UACE,cAACtC,EAAA,EAAD,UACE,cAAC,IAAKS,MAAN,CAAYL,SAAU,GAAIC,WAAY,IAAKC,MAAOpF,EAAMwF,QAAxD,SACE,8CAIJ,cAAC,IAAKD,MAAN,CAAYL,SAAU,GAAIE,MAAOpF,EAAMI,KAAMiH,UAAU,QAAvD,SACGT,EACC,eAAC,IAAD,CAAMU,cAAe,SAAU3G,MAAO,CAAE0E,IAAK,IAA7C,UACE,8BAAM,uBAAQQ,YAAY,OAACe,QAAD,IAACA,OAAD,EAACA,EAAcW,aAAnC,SAAmDX,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAcb,WACvE,oCAAO,uBAAQF,YAAY,OAACe,QAAD,IAACA,OAAD,EAACA,EAAcY,aAAnC,SAAmDZ,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAcb,eAG1E,iBAQf,C,gBC7PK0B,EAAwB3H,UAAOC,IAAV,wGAAGD,CAAH,oOACd,KAAGwD,KAAmB,YAAc,MACjC,KAAGA,KAAmB,OAAS,MAIpC,KAAGtD,MAAkB0H,QACV,KAAG1H,MAAkBC,aACrB,KAAGD,MAAkB2H,SAC5B,KAAGrE,KAAmB,iBAAmB,mCACxC,KAAGA,KAAmB,OAAS,MAKhC,SAASsE,EAAT,GAAoF,IAAD,EAA5CpE,EAA4C,EAA5CA,MAAUR,EAAkC,iBAC1F6E,EAAYC,YAActE,GAEhC,OACE,cAACiE,EAAD,CAAuBnE,KAAMyE,QAAQvE,GAArC,SACE,cAAC+C,EAAD,2BAAyBvD,GAAzB,IAA+BQ,MAAK,iBAAEA,QAAF,IAAEA,IAASqE,SAAX,aAAwBG,MAGjE,CAEM,SAASC,EAAT,GAA8F,IAAjDvB,EAAgD,EAAhDA,WAClD,OACE,cAACe,EAAD,CAAuBnE,MAAM,EAAM3C,MAAO,CAAEwG,UAAW,GAAvD,SACE,cAACV,EAAD,CAAoBC,WAAYA,KAGrC,C,yDCtCD,oOAGawB,EAAcpI,UAAOC,IAAV,2EAAGD,CAAH,8QAeT,SAASqI,EAAT,GAA8F,IAA3E1H,EAA0E,EAA1EA,SAAUG,EAAgE,EAAhEA,UAC1C,OAAO,cAACsH,EAAD,CAAatH,UAAWA,EAAxB,SAAoCH,GAC5C,C,kHClBW2H,E,2rCCFCC,EAAiB,G,2CCMxBC,EAAsBxI,UAAOyI,EAAV,sFAAGzI,CAAH,qMAOH,QAAGE,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMwF,QAAS,GAAnC,IAEX,KAAGxF,MAAkBwF,UAMnB,KAAGxF,MAAkBI,OAG9B,KAAGgC,UAEHqG,cADQ,4BA2BNC,EAAoB5I,kBAAO6I,KAAV,oFAAG7I,CAAH,yBAIR8I,EArBqB,IAAc,IAAXC,EAAU,EAAVA,IAC/B7I,EAAQ6D,cAEd,OACE,cAAC6E,EAAD,UACE,cAACJ,EAAD,CAAqBQ,KAAMD,EAAKE,OAAO,SAASC,IAAI,aAAa5G,UAAWyG,EAA5E,SACE,qBAAKI,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,SACE,sBACEC,EAAE,k4BACFC,OAAQV,EAAM7I,EAAMI,KAAOJ,EAAMwF,eAN3C,E,sKCoBagE,EA5CoB,IAAiC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC3CC,EAASC,cACT5J,EAAQ6D,qBAERgG,EAAmBC,IACvB,IAAMC,EAAYC,IAAqBF,GACvC,GAAIC,EAAW,CACb,IAAME,EAAMN,GAAUI,EAAUG,SAAWH,EAAUG,SAAWH,EAAUI,KAC1E,OAAO,qBAAKF,IAAKA,EAAKG,IAAKL,EAAUM,KAAM1J,MAAO,CAAEsI,MAAO,SAC5D,CAED,OACE,cAAC,IAAD,CACEqB,GAAI,CAEFC,WAAY,YAHhB,SAME,cAACC,EAAA,EAAD,CAAgBC,UAAU,MAAM/E,KAAM,GAAItF,KAAM,kDAAa0J,OAPjE,EAYF,OACE,eAAC,IAAD,CACEQ,GAAI,CACFlD,WAAY,UAFhB,UAKGyC,EAAgBJ,GACjB,cAAC,IAAD,CACE9I,MAAO,CACL4J,WAAY,MACZG,YAAa,OAEfzB,MAAM,OACNC,OAAO,OACP9D,MAAOpF,EAAMwF,UAEdqE,EAAgBH,KAhBrB,E,6FHnCUtB,O,2BAAAA,I,qBAAAA,I,sBAAAA,M,KAgCZ,I,IAgBeuC,EAhBgBC,GACtBC,YAAiBD,EAAX,iDAAmB,WAAO/B,GAAP,mGACPiC,MAAMjC,GADC,YACxBkC,EADwB,QAEjBC,GAFiB,iCAGTD,EAASE,OAHA,YAGtB9J,EAHsB,iDAKnBA,GALmB,aAQtB,IAAI+J,MAAJ,wCAA2CN,IARrB,cAWxB,IAAIM,MAAJ,sDAAyDN,IAXjC,4CAAnB,uDI1BTO,EAAqD,CACzD,CAAC/C,EAAyBgD,SAAU3C,cAApC,+BACgB,QAAGzI,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMuC,QAAS,GAAnC,IACL,KAAGvC,MAAkBuC,UAEhC,CAAC6F,EAAyBiD,SAAU5C,cAApC,+BACgB,QAAGzI,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMoG,IAAK,GAA/B,IACL,KAAGpG,MAAkBoG,MAEhC,CAACgC,EAAyBkD,YAAa7C,cAAvC,+BACgB,QAAGzI,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMqG,QAAS,GAAnC,IACL,KAAGrG,MAAkBqG,WAI5BvE,EAAUhC,UAAOC,IAAV,2EAAGD,CAAH,0LAgBT,QAAGyL,EAAH,EAAGA,OAAH,OAAgBJ,EAAYI,EAA5B,IACA,KAAGC,UAEH/C,cADQ,yCAkDGgD,EAtCsB,IAA2B,IAAxBF,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACxCE,ECnDyBH,KACwC,CACrE,CAACnD,EAAyBgD,SAAU,iBACpC,CAAChD,EAAyBiD,SAAU,gBACpC,CAACjD,EAAyBkD,YAAa,qBAGbC,ID4CdI,CAAiBJ,GAkB/B,OACE,eAACzJ,EAAD,CAAS0J,WAAYA,EAAUD,OAAQA,EAAvC,UAhBIA,IAAWnD,EAAyBgD,QAC/B,cAAC,IAAD,CAAa1F,KAAK,SAGvB6F,IAAWnD,EAAyBiD,QAC/B,cAAC,IAAD,CAAS3F,KAAK,SAGnB6F,IAAWnD,EAAyBkD,WAC/B,cAAC,IAAD,CAAcrC,MAAM,OAAOC,OAAO,SAGpC,MAMHsC,GACA,cAAC,IAAD,CACEI,GAAG,OACHtB,GAAI,CACFuB,SAAU,SACVC,aAAc,WACdC,WAAY,UALhB,SAQGL,MAZT,E,kDEnBaM,EA1CmB,IAAoB,IAAjBC,EAAgB,EAAhBA,UAC7BC,EAAaD,EAAYE,IAAMC,IAAIH,GAAWI,QAAQC,OLX9B,eKWyD,GACjFC,EAAaN,EAAYE,IAAMC,IAAIH,GAAWI,QAAQC,OLX9B,SKWyD,GAEjFtM,EAAQ6D,cACd,OACE,cAAC,IAAD,CACEyG,GAAI,CACFnF,WAAY,IACZD,SAAU,OACVsH,WAAY,OACZpH,MAAOpF,EAAMwF,QACbiH,eAAgB,iBANpB,SASGF,EACC,qCACE,cAAC,IAAD,CAAMX,GAAG,OAAT,SACE,cAAC,IAAD,CACEA,GAAG,OACHtB,GAAI,CACFoC,QAAS,eACTzD,MAAO,OACPyB,YAAa,MACbqB,WAAY,UANhB,SASGG,MAIL,cAAC,IAAD,CAAMN,GAAG,OAAT,SAAiBW,OAGnB,cAAC,IAAD,CAAMX,GAAG,OAAT,SACE,qCA9BR,ECoBae,EA1ByB,IAAoB,IAAjBV,EAAgB,EAAhBA,UACnCC,EAAaD,EAAYE,IAAMC,IAAIH,GAAWI,QAAQC,ONX9B,qBMWyD,GACjFtM,EAAQ6D,cACd,OACE,cAAC,IAAD,CACEyG,GAAI,CACFnF,WAAY,IACZD,SAAU,OACVsH,WAAY,OACZpH,MAAOpF,EAAMwF,QACb4B,WAAY,SACZqF,eAAgB,iBAPpB,SAUE,cAAC,IAAD,CACEb,GAAG,OACHtB,GAAI,CACFyB,WAAY,UAHhB,SAMGG,GAAc,oBAjBrB,ECUaU,EAf2B,IAAmB,IAAD,EAAfC,EAAe,EAAfA,SAC3C,OACE,eAAC,IAAD,CACEjB,GAAG,OACHtB,GAAI,CACFnF,WAAY,IACZD,SAAU,OACVsH,WAAY,QALhB,UAQGM,YAA+BC,WAAU,UAACF,EAASG,UAAU9G,kBAApB,QAAkC,KAAM,EAAG,GARvF,IAQ4F2G,EAASI,iBATvG,E,6JCuDaC,GAvDaC,IAAqB,IAAD,IACxCC,EAAWC,cACjB,EAAwBxM,mBAAS,GAAjC,mBAAOyM,EAAP,KAAaC,EAAb,KAGMC,EAD+BC,cAA7BN,SACgCA,EAClCvC,EAAS4C,EAAY,UACpBE,IADoB,gDACkCF,EADlC,iBACuDF,EADvD,qBACwEjF,GAC/F,GACJ,EAAsCsC,EAAsBC,GAApDzJ,EAAR,EAAQA,KAAMwM,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,MAEtBC,EAAYjJ,mBAAQ,IACpBzD,EAAaA,EAAKA,KAAK0M,UACpB,IACN,CAAC1M,IAEE2M,EAAyB,IAATR,EAChBS,EAAc,OAAJ5M,QAAI,IAAJA,GAAA,UAAAA,EAAMA,YAAN,mBAAY6M,kBAAZ,SAAwBC,WACpCC,KAAKC,OAAOhN,EAAKA,KAAK6M,WAAWC,WAAa,GAAK5F,GAAkB,EACrE,EACE+F,EAAYd,EAAOS,EAgBnBM,EAAQzJ,mBAAQ,IAAM,CAACyD,GAAkBiF,EAAO,GAAK,EAAGY,KAAKI,IAAIjG,EAAiBiF,KAAQ,CAACA,IAMjG,OAJAiB,qBAAU,KACRnB,EAASoB,aAAc5D,GAAvB,GACC,CAACwC,EAAUxC,IAEP,CACLyD,QACAR,YACAF,eACAC,QACAQ,YACAN,gBACAW,YApBkB,KACbL,GAGLb,EAAQD,EAAO,EAAf,EAiBAoB,gBA5BsB,KACjBZ,GAGLP,EAAQD,EAAO,EAAf,EAyBAqB,kBAA4B,IAATrB,GAAmC,IAArBO,EAAUzK,OAT7C,EC9BIwL,GAAYnG,cAAH,uJASX,KAAGzI,MAAkB6O,WAAWC,UAA/B,IAAD,yHAIA,KAAG9O,MAAkB6O,WAAWE,eAA/B,IAAD,oHAMEC,GAAclP,UAAOC,IAAV,yFAAGD,CAAH,gEACb8O,IAEY,KAAG5O,MAAkBiP,cAI/BC,GAAkBpP,UAAOC,IAAV,6FAAGD,CAAH,gEAIV,KAAGE,MAAkBwF,UAG1B2J,GAAWrP,UAAOC,IAAV,sFAAGD,CAAH,kFACV8O,IAEyB,KAAG5O,MAAkB2H,SAO5CyH,GAAmBtP,UAAOuP,OAAV,8FAAGvP,CAAH,mTAaX,KAAGE,MAAkBwF,UAChB,KAAGxF,MAAkBqC,aAIxB,KAAGrC,MAAkBI,OAKnB,KAAGJ,MAAkBI,OAKvB,QAAGJ,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMwF,QAAS,GAAnC,IA+LE1F,sBAvL0B,IAAoB,IAAjBc,EAAgB,EAAhBA,UACpCmO,EAAiBO,YAAS,eAAD,OAAgBC,IAAaR,eAA7B,QACzBS,EAAaF,YAAS,eAAD,OAAgBC,IAAaC,WAA7B,QACrBxP,EAAQ6D,cACNsJ,EAAYvJ,cAAZuJ,QACR,EAAkDtM,oBAAS,GAA3D,mBAAO4O,EAAP,KAA0BC,EAA1B,KACA,EACExC,GAAmBC,GAAW,IADxBwB,EAAR,EAAQA,kBAAmBN,EAA3B,EAA2BA,MAAOR,EAAlC,EAAkCA,UAAWO,EAA7C,EAA6CA,UAAWN,EAAxD,EAAwDA,cAAeW,EAAvE,EAAuEA,YAAaC,EAApF,EAAoFA,gBAG9EiB,EAAuC,IAArB9B,EAAUzK,OAE5BwM,EAAaC,mBAanB,GAZAtB,qBAAU,KAER,IAAMuB,EAAkBF,EAAWG,QAInC,OAHAH,EAAWG,QAAUC,YAAW,KAC9BN,GAAqB,EAArB,GACC,KACI,KACLI,GAAmBG,aAAaH,EAAhC,CADF,GAGC,IAGCL,EACF,OAAO,cAACS,EAAA,EAAD,IAGT,GAAIvB,EACF,OACE,eAAC,IAAD,CACErE,GAAI,CACFrB,MAAO,OACPC,OAAQ,QACRwD,QAAS,OACTpF,cAAe,SACfmF,eAAgB,SAChBrF,WAAY,SACZhC,MAAOpF,EAAMwF,QACbH,IAAK,QATT,UAYE,cAAC,IAAD,CAAMK,KAAM,KACZ,cAAC,IAAD,CACE4E,GAAI,CACFnF,WAAY,IACZD,SAAU,OACVsH,WAAY,QAJhB,SAOE,kEAMR,IAAM2D,EAAsB,IACtBtC,EAAUzK,SAAWiF,GAGpBmH,EAFI,KAGAY,MAAM/H,EAAiBwF,EAAUzK,QACrCgG,KAAK,GACL5H,KAAI,CAAC6O,EAAGlN,IAEL,cAACgM,GAAD,CAEExO,MAAO,CACL2P,WAAY,WAFTnN,KAWXoN,EAAaC,GAAD,iDAA8DA,GAmEhF,OACE,sBAAK5P,UAAWA,EAAhB,UACE,cAAC,IAAD,CAAM0G,cAAc,SAAS3G,MAAO,CAAE8P,KAAM,GAA5C,SAlEE1B,EAEA,qCACE,eAACC,GAAD,WACE,cAACE,GAAD,UACE,0CAEF,cAACA,GAAD,UACE,kCAEF,cAACA,GAAD,UACE,mCAEF,cAACA,GAAD,OAEDrB,EAAUrM,KAAI,CAACqL,EAAU1J,IACxB,eAACgM,GAAD,WACE,eAAC,IAAD,CAAMxO,MAAO,CAAE0E,IAAK,OAApB,UACE,cAAC,EAAD,CAAgB4G,UAAgC,IAArBY,EAAS6D,YACpC,cAAC,EAAD,CAAanF,OAAQsB,EAAStB,OAAQC,UAAQ,OAEhD,cAAC,EAAD,CAAW/B,YAAakH,OAAO9D,EAAS+D,YAAalH,UAAWiH,OAAO9D,EAASgE,cAChF,cAAC,EAAD,CAAkBhE,SAAUA,IAC5B,cAAC,EAAD,CAAYhE,IAAK0H,EAAU1D,EAASiE,eAPvB3N,KAUhBgN,OAML,qCACE,eAACnB,GAAD,WACE,cAACE,GAAD,UACE,oCAEF,cAACA,GAAD,UACE,mCAEF,cAACA,GAAD,UACE,kCAEF,cAACA,GAAD,UACE,4CAEF,cAACA,GAAD,UACE,sCAGHrB,EAAUrM,KAAI,CAACqL,EAAU1J,IACxB,eAACgM,GAAD,WACE,cAAC,EAAD,CAAUlD,UAAgC,IAArBY,EAAS6D,YAC9B,cAAC,EAAD,CAAanF,OAAQsB,EAAStB,SAC9B,cAAC,EAAD,CAAW9B,YAAakH,OAAO9D,EAAS+D,YAAalH,UAAWiH,OAAO9D,EAASgE,cAChF,cAAC,EAAD,CAAkBhE,SAAUA,IAC5B,cAAC,EAAD,CAAYhE,IAAK0H,EAAU1D,EAASiE,eALvB3N,KAQhBgN,SAUH,eAAC,IAAD,CACE7F,GAAI,CACFrB,MAAO,OACP7B,WAAY,SACZqF,eAAgB,SAChBsE,QAAS,SACT1L,IAAK,OACL2L,UAAU,aAAD,OAAehR,EAAM2H,SAPlC,UAUE,cAACyH,GAAD,CAAkBhN,UAAW0L,EAAe9M,QAAS0N,EAArD,SACE,cAAC,IAAD,CAAazF,MAAO,OAGtB,cAAC,IAAD,CACEqB,GAAI,CACFrB,MAAO,QACP/D,SAAU,OACVE,MAAOpF,EAAMwF,QACb4B,WAAY,SACZqF,eAAgB,UANpB,SASGkD,EAAkB,IAAH,UAAYtB,EAAM,GAAlB,cAA0BA,EAAM,MAGlD,cAACe,GAAD,CAAkBhN,UAAWgM,EAAWpN,QAASyN,EAAjD,SACE,cAAC,IAAD,CAAcxF,MAAO,YAhC7B,IAuCF,4EAAenJ,CAAf,6FAKgB,QAAGE,EAAH,EAAGA,MAAH,OAAewI,YAAKxI,EAAMC,WAAY,GAAtC,I,mCC7RVgR,GAAUnR,UAAOC,IAAV,0EAAGD,CAAH,kLAOF,KAAGE,MAAkBwF,UAI5B,QAAG7D,EAAH,EAAGA,SAAU3B,EAAb,EAAaA,MAAb,OACA2B,GACA8G,cADQ,gEAIGzI,EAAMI,KACDJ,EAAMqC,WANtB,IA+BWvC,sBAjBsB,IAAoB,IAAjBc,EAAgB,EAAhBA,UAC9BsQ,EAAoBC,eAApBD,gBACR,OACE,qBAAKtQ,UAAWA,EAAhB,SACE,cAACqQ,GAAD,CACEtP,UAAU,EACVsD,KAAK,SACLjE,QAAS,KACPkQ,EAAgBE,KAAcC,kCAA9B,EAJJ,+BAFJ,IAeF,iEAAevR,CAAf,sEC5BeA,sBATwB,IAAoB,IAAjBc,EAAgB,EAAhBA,UACxC,OACE,sBAAKA,UAAWA,EAAhB,UACE,cAAC,GAAD,IACA,cAAC0Q,GAAD,MAHJ,IAQF,sEAAexR,CAAf,oE,sMCTayR,GACE,aADFA,GAEQ,mBAFRA,GAGO,iBAHPA,GAII,WAJJA,GAKC,kBAGDC,GAAyBC,IACpC,IAAMC,EAAqCC,KAAKC,MAC9CC,aAAaC,QAAQP,KAAuC,MAE9D,cAAOG,QAAP,IAAOA,OAAP,EAAOA,EAAaD,EAApB,EAEWM,GAAwB,CAACN,EAAaO,KACjD,IAAMN,EAAqCC,KAAKC,MAC9CC,aAAaC,QAAQP,KAAuC,MAE9DM,aAAaI,QAAQV,GAAoCI,KAAKO,UAAL,2BAAoBR,GAApB,IAAgC,CAACD,GAAMO,KAAhG,EAGIG,GAAc,mCACdC,GAAwB,IACrBC,KAAMC,IAAN,UAAaH,GAAb,0BAAoDI,MAAKpR,GAAQA,EAAKA,OAEzEqR,GAAyB1I,GACtBuI,KAAMC,IAAN,UAAaH,GAAb,2BAA8CrI,IAAWyI,MAAKpR,GAAQA,EAAKA,OAO9EsR,GAAoB,KACxB,IACE,IAAIpG,EAAawF,aAAaC,QAAQP,KAAsC,KAE5E,OADAlF,EAAQsF,KAAKC,MAAMvF,EAIpB,CAFC,MAAOuB,GACP,MAAO,CAAC,CACT,GAEG8E,GAAmBC,IACvB,IAEEC,OAAOC,KAAKF,GAAQG,SAAQrB,IAC1B,IACA,EADW,eAAQkB,EAAOlB,IAClBsB,kBAAR,MAAqB,CAAC,EAAtB,EACIC,GAAkB,EACtBJ,OAAOC,KAAKE,GAAYD,SAASG,IAC/BL,OAAOC,KAAKE,EAAWE,IAAQH,SAAQI,IACrC,IAAMC,EAAOJ,EAAWE,GAAOC,GAC/BC,EAAKrJ,QAAU6G,OAAOwC,EAAKrJ,SACtBsJ,YAAUD,EAAKrJ,QAASqJ,EAAKD,iBACzBH,EAAWE,GAAOC,EAC1B,IAEClJ,IAAqBiJ,KACvBD,GAAkB,GAEfJ,OAAOC,KAAKE,EAAWE,IAAQ7P,eAC3B2P,EAAWE,EACnB,IAEED,GAAoBJ,OAAOC,KAAKE,GAAY3P,eACxCuP,EAAOlB,EACf,GAEa,CAAhB,MAAO7D,GAAS,CAClB,OAAO+E,CAAP,EAEK,SAAeU,GAAtB,qC,wDAAO,WAA4BvJ,EAAkBwJ,GAA9C,mGAIHjH,EAAQoG,MACE3I,KAAY8I,OAAOC,KAAKxG,EAAMvC,IAAU1G,QAAWkQ,EAL1D,yCAMMjH,EAAMvC,IANZ,uBAQY0I,GAAsB1I,GARlC,OAQH6I,EARG,OASHA,EAASD,GAAgBC,GACzBtG,EAAQoG,KACR,IACEZ,aAAaI,QAAQV,GAAmCI,KAAKO,UAAL,2BAAoB7F,GAApB,IAA2B,CAACvC,GAAU6I,KAK/F,CAJC,MAAO/E,GACP2F,QAAQC,IAAI,4CACZ3B,aAAa4B,WAAWlC,IACxBM,aAAaI,QAAQV,GAAmCI,KAAKO,UAAU,CAAE,CAACpI,GAAU6I,IACrF,CAjBE,yBAkBIA,GAlBJ,yCAoBHY,QAAQC,IAAI,KAAEtN,YApBX,mBAqBS,QAAL,EAAAmG,SAAA,eAAQvC,KAAY,CAAC,GArBzB,2D,sBAyBA,SAAe4J,GAAtB,mC,wDAAO,WAA4BJ,GAA5B,wFACDK,EAAqB,GADpB,WAGHA,EAAWnC,GAAsBD,MAChB+B,EAJd,yCAKMK,GALN,uBAOkBvB,KAPlB,cAOGO,EAPH,OAQGiB,EAAShB,OAAOC,KAAKF,GACxBnR,IAAImP,QACJiD,QAAOC,KAAQ7J,IAAqB6J,KACvC9B,GAAsBR,GAAyCqC,GAX5D,kBAYIA,GAZJ,yCAcHL,QAAQC,IAAR,MAdG,kBAeIG,GAAY,IAfhB,2D,sBAmBA,IAAMG,GAAmBC,IAC9B,IACE,QAAe/L,IAAX+L,EAAsB,OAAO,mBACjC,GAAIpD,OAAOoD,IAAWA,EAAQ,OAAOjH,YAA+BC,WAAWgH,EAAS,IAAK,EAAG,EAChF,CAAhB,MAAOnG,GAAS,CAClB,MAAO,GAAP,ECpHIoG,GAAYlU,UAAOC,IAAV,4EAAGD,CAAH,wBAGTmU,GAAcnU,UAAOoU,EAAV,8EAAGpU,CAAH,sCAIF,SAASqU,KACtB,IAAMC,EAAS5C,GAAsBD,IACrC,EAAwB1Q,oBAAUuT,GAAlC,mBAAO9Q,EAAP,KAAaQ,EAAb,KACM9D,EAAQ6D,cAMd,OACE,cAACwQ,GAAA,EAAD,CAAaC,OAAQhR,EAArB,SACE,eAAC0Q,GAAD,WACE,cAAC,IAAD,CAAMvH,eAAgB,gBAAtB,SACE,eAAC,IAAD,CAAMrH,MAAOpF,EAAMqG,QAASe,WAAW,SAASzG,MAAO,CAAE0E,IAAK,GAA9D,UACE,cAAC,KAAD,CAAeK,KAAM,KADvB,IAC8B,cAAC,IAAD,CAAMR,SAAU,GAAhB,SAAqB,2BAGrD,cAAC+O,GAAD,UACE,kMAKF,cAACA,GAAD,UACE,2RACE,cAAC,IAAD,CAAcnL,KAAK,iCAKvB,cAACyL,GAAA,EAAD,CAAe5T,MAAO,CAAEwG,UAAW,IAAMnG,QAzB7B,KAChB+Q,GAAsBR,GAA0C,KAChEzN,GAAQ,EAAR,EAuBI,SACE,6CAKT,C,ICxDG0Q,G,iQAEAC,GAAY,CAAC,QAAS,WAE1B,SAASC,KAAiS,OAApRA,GAAW9B,OAAO+B,OAAS/B,OAAO+B,OAAOC,OAAS,SAAU7L,GAAU,IAAK,IAAI5F,EAAI,EAAGA,EAAI0R,UAAUzR,OAAQD,IAAK,CAAE,IAAI2R,EAASD,UAAU1R,GAAI,IAAK,IAAIsO,KAAOqD,EAAclC,OAAOmC,UAAUC,eAAeC,KAAKH,EAAQrD,KAAQ1I,EAAO0I,GAAOqD,EAAOrD,GAAU,CAAE,OAAO1I,CAAQ,EAAU2L,GAASQ,MAAMC,KAAMN,UAAY,CAElV,SAASO,GAAyBN,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,CAAC,EAAG,IAAkErD,EAAKtO,EAAnE4F,EAEzF,SAAuC+L,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,CAAC,EAAG,IAA2DrD,EAAKtO,EAA5D4F,EAAS,CAAC,EAAOuM,EAAa1C,OAAOC,KAAKiC,GAAqB,IAAK3R,EAAI,EAAGA,EAAImS,EAAWlS,OAAQD,IAAOsO,EAAM6D,EAAWnS,GAAQkS,EAASE,QAAQ9D,IAAQ,IAAa1I,EAAO0I,GAAOqD,EAAOrD,IAAQ,OAAO1I,CAAQ,CAFhNyM,CAA8BV,EAAQO,GAAuB,GAAIzC,OAAO6C,sBAAuB,CAAE,IAAIC,EAAmB9C,OAAO6C,sBAAsBX,GAAS,IAAK3R,EAAI,EAAGA,EAAIuS,EAAiBtS,OAAQD,IAAOsO,EAAMiE,EAAiBvS,GAAQkS,EAASE,QAAQ9D,IAAQ,GAAkBmB,OAAOmC,UAAUY,qBAAqBV,KAAKH,EAAQrD,KAAgB1I,EAAO0I,GAAOqD,EAAOrD,GAAQ,CAAE,OAAO1I,CAAQ,CAM3e,SAAS6M,GAAWC,EAAMC,GACxB,IAAIlU,EAAQiU,EAAKjU,MACbmU,EAAUF,EAAKE,QACfC,EAAQZ,GAAyBS,EAAMpB,IAE3C,OAAoB,gBAAoB,MAAOC,GAAS,CACtDzL,MAAO,GACPC,OAAQ,GACRC,QAAS,YACTC,KAAM,OACNC,MAAO,6BACP4M,IAAKH,EACL,kBAAmBC,GAClBC,GAAQpU,EAAqB,gBAAoB,QAAS,CAC3DiS,GAAIkC,GACHnU,GAAS,KAAM4S,KAAUA,GAAqB,gBAAoB,OAAQ,CAC3ElL,EAAG,uDACHF,KAAM,aAEV,CAEA,IAAI8M,GAA0B,aAAiBN,I,IAChC,I,+gBCyEAO,GAtFYC,gBAAK,YAU5B,IATFC,EASC,EATDA,WACAC,EAQC,EARDA,SACAC,EAOC,EAPDA,iBACAC,EAMC,EANDA,aAOA,EAAyD7P,cAAzD,sBAAS8P,EAAT,EAASA,YAAa7P,EAAtB,EAAsBA,aAAc8P,EAApC,EAAoCA,gBAC9BC,EAAmBC,aAAqBN,EAAwB,GAAbD,GACnDrW,EAAQ6D,cAERiB,EAAW+R,uBACf,YAA8E,IAAD,MAAzDlW,EAAyD,EAAzDA,MAAO6D,EAAkD,EAAlDA,SAAUsS,EAAwC,EAAxCA,gBACnC,GAAKtS,EAAL,CACA,IAAMuS,GACO,OAAXN,QAAW,IAAXA,GAAA,UAAAA,EAAavD,eAAb,eAAsB8D,kBAAtB,OAAwCxS,QAAxC,IAAwCA,GAAxC,UAAwCA,EAAU0O,eAAlD,aAAwC,EAAmB8D,iBAC/C,OAAZpQ,QAAY,IAAZA,OAAA,EAAAA,EAAcqQ,WAAd,OAAyBzS,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAU0S,sBAAnC,aAAyB,EAA0BD,QAE7ClR,EAAWoR,aAAoB3S,GAA/BuB,OACR,GAA4C,OAARvB,QAAQ,IAARA,OAAA,EAAAA,EAAU0S,iBAAkB,CAAC,EAAzDD,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,SAChBC,EAAgBhB,GAAQ,OAAIe,QAAJ,IAAIA,KAAUnE,QAAUY,GAAe,OAAC4C,QAAD,IAACA,OAAD,EAACA,EAAe,OAAGW,QAAH,IAAGA,OAAH,EAAGA,EAAUnE,UAAY,EAE9G,OACE,cAAC,KAAD,CACEqE,aAAcjB,EACdkB,kBAAkB,EAClB7W,MAAOA,EACP6D,SAAUA,EACVsS,gBAAiBA,EACjBC,WAAYA,EACZU,SAbiB,IAAMjT,GAAY+R,EAAiB/R,GAcpDkT,eAAe,EACfJ,cAAeA,EACfK,gBACa3P,IAAXiP,EACE,eAAC,IAAD,WACGlR,EADH,OAEE,cAAC,IAAD,CAAMX,MAAOpF,EAAMwF,QAASL,WAAW,SAAvC,mBACM,CAAC,SAAU,WAAWyS,SAAtB,OAA+BR,QAA/B,IAA+BA,IAAQ,IAAM,WAA7C,kBAAqEH,EAArE,WAGN,MA5BW,CAgCtB,GACD,CAACV,EAAkBE,EAAaH,EAAU1P,EAAc5G,EAAO0W,IAGjE,OACE,qBAAK/V,MAAO,CAAE8P,KAAM,IAAK5E,SAAU,SAAU3C,OAAQ,QAArD,SACGoN,EACCD,EAAW7U,KAAI,CAACC,EAAMC,IACpB,cAACoD,EAAD,CAAKpD,MAAOA,EAAO8C,SAAU/C,EAAkBqV,gBAAiBH,EAAiBjV,IAAzCA,KAG1C,cAAC,KAAD,UACG,QAAGwH,EAAH,EAAGA,OAAQD,EAAX,EAAWA,MAAX,OACC,cAAC,KAAD,CACEC,OAAQA,EACRD,MAAOA,EACP4O,SAAU,GACVC,UAAWzB,EAAWjT,OACtB2U,SAAU1B,EACV2B,SAAUxB,EANZ,SAQG,UAAGrV,EAAH,EAAGA,KAAMO,EAAT,EAASA,MAAOf,EAAhB,EAAgBA,MAAhB,OACC,cAACmE,EAAD,CACEpD,MAAOA,EACP8C,SAAUrD,EAAKO,GAEfoV,gBAAiBH,EAAiBjV,GAClCf,MAAOA,IAFF,UAAAQ,EAAKO,UAAL,eAAawR,UAAWxR,EAJhC,GATJ,KAwBV,I,gPC7Ec,SAASuW,GAAT,GAKgB,IAJ7B3B,EAI4B,EAJ5BA,SACAC,EAG4B,EAH5BA,iBACA2B,EAE4B,EAF5BA,UACA5D,EAC4B,EAD5BA,OAEMtU,EAAQ6D,cACNiG,EAAYlG,cAAZkG,QACR,EAAsCjJ,mBAAiB,IAAvD,mBAAOsX,EAAP,KAAoBC,EAApB,KACMC,EAAiBC,aAAYH,EAAa,KAEhD,EAAwCxR,cAAxC,sBAAS4R,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,aAEhBC,EAAgBnC,EAAWkC,EAAeD,EAC1CG,EAAkBC,cAAmB,GAAO,GAE5CC,EAAkBxF,YAAUtJ,EAASuO,GAErCQ,EAAqCjU,mBAAQ,KACjD,GAAIgU,EAAiB,CACnB,IAAME,EAAOL,EAAcK,MAAK7X,IAAC,aAAK,OAADA,QAAC,IAADA,GAAA,UAAAA,EAAGiS,eAAH,eAAY8D,iBAAkBqB,EAAerB,aAAjD,IACjC,OAAO8B,EAAO,CAACA,GAAQ,EACxB,CACD,OAAOC,aAAajP,EAAS2O,EAAeJ,EAA5C,GACC,CAACO,EAAiB9O,EAAS2O,EAAeJ,IAEvCW,EAAwCpU,mBAAQ,KACpD,IAAMqU,EAASJ,EAAeK,KAAKR,GAC7BS,EAAcd,EACjBrB,cACAoC,MAAM,OACNxF,QAAOyF,GAAKA,EAAEjW,OAAS,IAC1B,OAAI+V,EAAY/V,OAAS,EAAU6V,EAE5B,IAEFA,EAAOrF,QAAO0F,IAAK,aAAI,UAAAA,EAAMvT,cAAN,eAAciR,iBAAkBmC,EAAY,EAAhD,OACnBF,EAAOrF,QAAO0F,IAAK,aAAI,UAAAA,EAAMvT,cAAN,eAAciR,iBAAkBmC,EAAY,EAAhD,IAHxB,GAKC,CAACN,EAAgBR,EAAgBK,IAE9Ba,EAAuB1C,uBAC1BrS,IACC+R,EAAiB/R,GACjB0T,GAAW,GAEb,CAACA,EAAW3B,IAIRiD,EAAW3J,iBAAyB,MAG1CtB,qBAAU,KACK,IAAD,EAAR+F,IACF8D,EAAe,IACf,UAAAoB,EAASzJ,eAAT,SAAkB0J,QACnB,GACA,CAACnF,IAEJ,IAAMkC,EAAe3G,iBAAuB,MACtC6J,EAAc7C,uBACjB8C,IACC,IAAMC,EAAQD,EAAM5Q,OAAOiJ,MACrB6H,EAAgBzG,YAAUtJ,EAAS8P,GACzCxB,EAAeyB,GAAiBD,GAChC,OAAIpD,QAAJ,IAAIA,KAAczG,UAASyG,EAAazG,QAAQ+J,UAAY,EAAjC,GAE7B,CAAChQ,IAGGiQ,EAAclD,uBACjB5V,IAAwC,IAAD,EAE1B,UAAVA,EAAEwQ,KACFuH,EAAkB5V,OAAS,KAC1B,UAAA4V,EAAkB,GAAGjT,cAArB,eAA6BiR,iBAAkBmB,EAAY6B,OAAOhD,eACpC,IAA7BgC,EAAkB5V,SAEpBmW,EAAqBP,EAAkB,GACxC,GAEH,CAACA,EAAmBO,EAAsBpB,IAI5C,EAAuB8B,cAAU,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAOvK,mBAGb,OAFAwK,aAAkBD,EAAMF,EAAOC,OAASnS,GAGtC,eAAC,KAAD,WACE,eAAC,KAAD,CAAc3C,IAAI,OAAlB,UACE,eAAC,KAAD,WACE,eAAC,IAAD,CAAMF,WAAY,IAAKD,SAAU,GAAIwH,QAAQ,OAA7C,UACE,0CACE4J,GACA,cAAC7Q,GAAA,EAAD,CACE6U,cAAeC,KAASC,MAAQ,EAChC9U,KAAM,GACNtF,KACE,uHAKR,cAAC,IAAD,CAAWY,QAASkX,OAGpB5B,EAeA,qCACE,cAAC,IAAD,CAAMpR,SAAU,GAAIE,MAAOpF,EAAMwF,QAASgH,WAAW,OAArD,SACE,oIAIF,eAAC,IAAD,CAAMC,eAAe,gBAAgBrH,MAAOpF,EAAMwF,QAASL,WAAY,IAAKD,SAAU,GAAtF,UACE,cAAC,IAAD,UACE,iCAEF,cAAC,IAAD,UACE,4CAzBN,eAAC,KAAD,WACE,cAAC,KAAD,CACEkS,KAAK,OACLvD,GAAG,qBACH4G,YAAa,uDACbzI,MAAOmG,EACPlC,IAAKuD,EACLkB,SAAUhB,EACViB,UAAWZ,EACXa,aAAa,QAEf,cAAC,KAAD,CAAYlV,KAAM,GAAIN,MAAOpF,EAAM2H,eAqBzC,cAAC,KAAD,IAEkB,OAAjBqR,QAAiB,IAAjBA,KAAmB5V,OAClB,cAAC,GAAD,CACEoT,aAAcA,EACdF,SAAUA,EACVD,WAAY2C,EACZzC,iBAAkBgD,IAGpB,cAAC,KAAD,CACEsB,IACExC,GACE,cAAC,IAAD,CAAMnT,SAAU,GAAIE,MAAOpF,EAAMwF,QAASL,WAAW,SAASqH,WAAY,OAA1E,SACE,8LAC6C,uBAD7C,EAGE,cAAC,IAAD,CAAc1D,KAAK,qGAWpC,CCxLc,SAASgS,GAAT,GAKqB,IAJlCxG,EAIiC,EAJjCA,OACAgC,EAGiC,EAHjCA,SACA4B,EAEiC,EAFjCA,UACA3B,EACiC,EADjCA,iBAEMgD,EAAuB1C,uBAC1BrS,IACC+R,EAAiB/R,GACjB0T,GAAW,GAEb,CAACA,EAAW3B,IAGd,OACE,cAAClC,GAAA,EAAD,CACE0G,OAAQR,KAASC,MACjBlG,OAAQA,EACR4D,UAAWA,EACX8C,OAAO,OACPC,UAAW,GACX/R,OAAQoN,OAAWtO,EAAY,OAC/BkT,UAAW5E,OAAWtO,EAAY,GAPpC,SASE,cAACiQ,GAAD,CACE3B,SAAUA,EACVhC,OAAQA,EACR4D,UAAWA,EACX3B,iBAAkBgD,KAIzB,C,8OCpCY4B,GAAgC,CAACrR,EAA8BwP,KAC1E,IAAQnM,EAAYvJ,cAAZuJ,QACR,EAA8BtM,mBAAS,KAAvC,mBAAOua,EAAP,KAAgBC,EAAhB,KAYA,OAXA9M,qBAAU,KACJpB,GAAWrD,GAAWwP,EAa9B,SAAuCnM,EAAiBmM,EAAyBxP,GAAoC,IAAD,EAC5GwR,EAAoD,YAApC,UAAAhC,EAAMpC,sBAAN,eAAsBqE,WAC5C,OAAO,IAAIC,QAAJ,iDAAY,WAAOC,EAASC,GAAhB,iGAEVvO,GAAYmM,GAAUxP,GAAYnG,YAAMmG,GAF9B,yCAE+C4R,EAAO,gBAFtD,mBAKPC,EAAWC,IAAU9R,IACvBwR,EANS,iCAOKK,EAASE,WAAW1O,GAPzB,OAOXiO,EAPW,sCASLU,EAAW,IAAIC,KAAOC,SAAX,OAAoB1C,QAApB,IAAoBA,OAApB,EAAoBA,EAAOpG,QAAS+I,KAAWN,GATrD,UAUKG,EAASI,UAAU/O,GAVxB,QAUXiO,EAVW,yEAafK,EAAQL,EAAUW,KAAOI,MAAMC,YAAYhB,EAAS9B,EAAM+C,UAAY,KAbvD,kDAefX,EAAO,EAAD,IAfS,iEAAZ,wDAkBR,CAhCKY,CAA8BnP,EAASmM,EAAOxP,GAC3CyI,MAAKpR,IACJka,EAAWla,EAAX,IAEDob,MAAMhJ,QAAQ3F,OAEjByN,EAAW,IACZ,GACA,CAACvR,EAASwP,EAAOnM,EAASiO,IACtBA,CAAP,EA0CF,SAASoB,GAAcC,GACrB,IADsC,EAChCC,EAAqB,GADW,eAEnBD,GAFmB,IAEtC,2BAAyB,CAAC,IAAfhb,EAAc,QACvBib,EAAMC,KAAK,CACTC,SAAUC,KAAgBC,mBAAmB,YAAa,CAACrb,EAAK4V,WAChEtO,OAAQtH,EAAKsb,WACbrR,MAAO,YACPsR,SAAU,YACVvL,IAAKhQ,EAAK4V,UAEb,CAVqC,+BAWtC,OAAOqF,CACR,CAED,IAAMO,GAAe,CAAClS,EAAoB2R,KACxC,IAAMQ,EAAgC,CAAC,EACvC,IAAKnS,EAAU,OAAOmS,EACtB,IAAK,IAAI/Z,EAAI,EAAGga,EAAMT,EAAMtZ,OAAQD,EAAIga,EAAKha,IAAK,CAChD,IAAM1B,EAAOib,EAAMvZ,GACnB,GAAK4H,EAAS5H,GAAd,CAEA,IAAI6O,EAAQ,GACZ,IAAK,IAAD,EACFA,EAAK,OAAG6K,WAAH,IAAGA,MAAH,UAAGA,KAAiBO,qBAAqB3b,EAAKub,SAAUjS,EAAS5H,WAAjE,aAAG,EAAmE+C,UAG5E,CAFC,MAAO0H,GACP,QACD,CAEIsP,EAAWzb,EAAKgQ,OACnByL,EAAWzb,EAAKgQ,KAAO,CAAE2J,QAAS,IAAKc,UAAW,MAEpDgB,EAAWzb,EAAKgQ,KAAKhQ,EAAKiK,OAAiCsG,CAZjC,CAa3B,CACD,OAAOkL,CAAP,EAIK,SAASG,GAAkBvT,EAA8BwT,GAC9D,MAAgCzc,qBAAhC,mBAAO0c,EAAP,KAAiBC,EAAjB,KACQrQ,EAAYvJ,cAAZuJ,QACFsQ,EAAoBC,aAAqB5T,GACzC6T,EAAkB9G,sBAAW,gCAAC,qGAC7B/M,EAD6B,yCACb0R,QAAQE,OAAO,gBADF,uBAG1BgB,EAAQF,GAAcc,GAHI,gBAIFG,QAJE,IAIFA,OAJE,EAIFA,EAAmBG,WAAWC,sBAC1D,EACAnB,EAAMlb,KAAI,QAAGob,EAAH,EAAGA,SAAH,MAA2B,CAAE7T,OAA7B,EAAaA,OAAwB6T,WAArC,KANoB,gDAO1B,CAAEkB,WAAY,IAPY,qBAIxBA,EAJwB,EAIxBA,WAJwB,kBAQzBb,GACLa,EAAWtc,KAAKC,GAA4BA,EAAK,KACjDib,IAV8B,2DAazBlB,QAAQE,OAAR,OAbyB,0DAejC,CAAC5R,EAASwT,EAAWG,IAElBM,EAAoBlH,sBAAW,gCAAC,uHAEO8G,IAFP,OAE5BK,EAF4B,OAI9BrM,KAAKO,UAAU8L,GAAW,CAAC,KAAOrM,KAAKO,UAAUqL,GAAY,CAAC,IAChEC,EAAYQ,GALoB,gDAQlCzK,QAAQC,IAAR,MARkC,yDAUnC,CAACmK,EAAiBJ,IAQrB,OANAhP,qBAAU,KACRwP,GAAmB,GAClB,CAACjU,EAASqD,EAASmQ,EAAWS,IAEjCE,aAAYF,EAAmB,KAEvBjU,EAAsByT,OAAZvV,CACnB,C,wGCrIKkW,GAAyBpe,UAAOC,IAAV,4FAAGD,CAAH,2KAOjB,KAAGE,MAAkBI,OAO1B+d,GAAere,UAAOC,IAAV,kFAAGD,CAAH,yEAOZse,GAAete,kBAAOue,MAAV,kFAAGve,CAAH,iEACP,KAAGE,MAAkBI,OACV,KAAG8Z,KAAmB,SAAW,MAwCxCoE,OArCf,YAQwB,IAAD,IAPrB3K,gBAOqB,MAPV,GAOU,EANrB4K,EAMqB,EANrBA,gBACAC,EAKqB,EALrBA,gBAMQ1U,EAAYlG,cAAZkG,QAER,EAA4BjJ,oBAAS,GAArC,mBAAOyT,EAAP,KAAemK,EAAf,KACMC,EAAqB,KACzBD,GAAWnK,EAAX,EAGF,IAAKxK,EAAS,OAAO,KACrB,IAAQO,GAASmU,EAAkBG,IAAcH,GAAmB,CAAEnU,KAAM,4BAApEA,KACR,OACE,qCACE,eAAC6T,GAAD,CAAwBld,QAAS,IAAM2S,EAASvQ,QAAUsb,IAA1D,UACE,cAAC,KAAD,CAAa5U,QAAS0U,EAAiB7d,MAAO,CAAEsI,MAAO,GAAIC,OAAQ,GAAIwB,YAAa,SACpF,cAACyT,GAAD,UAAe9T,IACf,cAAC+T,GAAD,CAAclE,KAAM5F,OAEtB,cAACsK,GAAA,EAAD,CACEC,YAAa,mDACbC,eAAgBnL,EAChBW,OAAQA,EACRyK,WAAYP,EACZQ,kBAAmBN,EACnBO,sBAAuBV,MAI9B,E,wJCvCc,SAASW,GAAT,GAaoB,IAAD,EAZhCtR,EAYgC,EAZhCA,MACAoE,EAWgC,EAXhCA,MAWgC,IAVhCmN,mBAUgC,MAVjBnN,MAUiB,EAPhCuM,EAOgC,EAPhCA,gBACA5K,EAMgC,EANhCA,SACAyL,EAKgC,EALhCA,MACAZ,EAIgC,EAJhCA,gBACAjI,EAGgC,EAHhCA,iBAGgC,IAFhCD,gBAEgC,SADhCzC,EACgC,EADhCA,GAEA,EAAkChT,oBAAS,GAA3C,mBAAOwe,EAAP,KAAkBC,EAAlB,KACA,EAA6B1b,cAArBkG,EAAR,EAAQA,QAASqD,EAAjB,EAAiBA,QACjB,EAA8ExG,cAA9E,sBAAS4Y,EAAT,EAASA,WAAYC,EAArB,EAAqBA,YAAahH,EAAlC,EAAkCA,aAAciH,EAAhD,EAAgDA,WAAYC,EAA5D,EAA4DA,aACtDlb,EAAW8R,EAAWkJ,EAAcD,EACpCI,EAA0BC,aAAmBtJ,OAAWtO,EAAH,OAAexD,QAAf,IAAeA,SAAYwD,GAChF6X,EAAahQ,iBAAM,OAAC8P,QAAD,IAACA,OAAD,EAACA,EAAyB7Z,cAAc,KAC3Dga,EAAc3E,GAA8BsE,EAAYnJ,EAAW9R,OAAWwD,GAEpFuG,qBAAU,KACRsR,EAAW9P,aAAU/H,CAArB,GACC,CAAC8B,IAGJyE,qBAAU,KACFoR,IAAyBE,EAAW9P,QAAU4P,EAAwB7Z,cAAc,KACrFtB,GAAa2I,IAAS0S,EAAW9P,QAAU,IAArB,GAC1B,CAAC4P,EAAyBnb,EAAU2I,IAEvC,IAAMnN,EAAQ6D,cAERkc,EAAsBlJ,uBAAY,KACtCyI,GAAa,EAAb,GACC,CAACA,IAEEU,EAAyC,IAAxBxH,EAAapV,QAAgBkT,EAC9C2J,EAAoBlT,WAAW+S,GAAX,UAA0B/S,WAAW+S,UAArC,aAA0B,EAAyBxZ,QAAQ,IAAM,EAC3F,OACE,qBAAK3F,MAAO,CAAEsI,MAAO,QAArB,SACE,eAAC,KAAD,CAAY4K,GAAIA,EAAhB,UACE,eAAC,KAAD,CAAWqM,WAAW,EAAOC,UAAU,EAAOvS,MAAOA,EAArD,UACE,eAAC,IAAD,CAAMnB,eAAe,gBAAgBvH,SAAS,OAAOkb,aAAa,OAAOhZ,WAAW,SAApF,UACE,cAACiZ,GAAD,CAAe1M,SAAUA,EAAU4K,gBAAiBA,EAAiBC,gBAAiBA,IACtF,eAAC,IAAD,CACExd,QAAS,IAAMoe,GAASA,IACxBze,MAAO,CAAEoE,OAAQqa,EAAQ,eAAYpX,GACrCZ,WAAW,SAHb,UAKE,cAACkZ,GAAA,EAAD,CAAQlb,MAAOpF,EAAMwF,UACrB,cAAC,IAAD,CAAML,WAAY,IAAKC,MAAOpF,EAAMwF,QAAS+E,WAAW,MAAxD,SACG+L,EAAW2J,GAA2C,OAAvBN,QAAuB,IAAvBA,OAAA,EAAAA,EAAyB7Z,cAAc,MAAO+Z,EAAW9P,SAAW,UAI1G,eAAC,KAAD,WACE,cAACwQ,GAAA,EAAD,CACE3S,MAAOA,EACPhN,UAAU,qBACVoR,MAAOA,EACP5P,SAAUkU,EACV6I,YAAaA,IAGf,cAAC,KAAD,CACEgB,WAAY3b,EACZ5D,UAAU,8BACVI,QAAS,KAAOgf,IAAmBN,GAAgBJ,GAAa,GAChE3e,MAAO,CAAEoE,OAAQib,EAAiB,UAAY,UAAWQ,aAAcR,EAAiB,MAAQ,GAJlG,SAME,eAAC,KAAD,WACE,eAAC,KAAD,WACGxb,GAAY,cAACic,GAAA,EAAD,CAAcjc,SAAUA,EAAUkB,KAAM,SACrD,cAAC,KAAD,CACE9E,UAAU,yBACV8f,OAAQ3Y,QAAO,OAACvD,QAAD,IAACA,OAAD,EAACA,EAAUuB,QAC1BpF,MAAO,CAAE6f,aAAc,GAHzB,UAKW,OAARhc,QAAQ,IAARA,OAAA,EAAAA,EAAUuB,UAAW2Z,EAAe,yCAAgC,+CAGxEM,EAAiB,wBAAU,cAAC,KAAD,eAKpC,cAAClF,GAAD,CACExE,SAAUA,EACVhC,OAAQ+K,EACRnH,UAAW6H,EACXxJ,iBAAkBA,QAK3B,C,gZChHKoK,GAAiB,CACrBC,QAAQ,WAAD,sCAAE,4HAAF,kDAAC,GAGRC,YAAY,GAGd,SAASC,KACP,IAAQ3T,EAAYvJ,cAAZuJ,QACF4T,EAAaC,cAAeC,GAASA,EAAMC,OAAOH,aAElDI,EAAYtK,uBAAY,KAC5BuK,YAAOL,EAAP,GACC,CAACA,IAEJ,OAAOlK,sBAAW,iDAChB,WACEjG,EACAC,EACAC,EACAuQ,EACApU,EACAqU,EACAtU,GAPF,gGASQnE,EATR,UASiB6E,IATjB,4BAUQ6T,EAAO,CACXC,YAAarU,EACbyD,WAAYA,EAAW1K,WACvB2K,WAAYA,EAAW3K,WACvB4K,YACA2Q,UAAW,GACXJ,iBACApU,iBACAqU,YACAtU,YACAzB,OAAQ,GApBZ,kBAuBU8G,KAAMqP,KAAK7Y,EAAK0Y,GAvB1B,OAwBIJ,IAxBJ,gDA0BUQ,EAAY,CAChBJ,OACAhW,YAAQvD,EACR+C,cAAU/C,GAEZ,sCAAI,KAAK+C,gBAAT,OAAI,EAAe5J,OACjBwgB,EAAUpW,OAAS,KAAIR,SAASQ,OAChCoW,EAAU5W,SAAW,KAAIA,SAAS5J,OAE9ByM,EAAQ,IAAI1C,MAAJ,8CAAiDyW,EAAUJ,KAAKzQ,WAAa,CAAE8Q,MAAM,EAAD,MAC5FvX,KAAO,aACbwX,aAAiBjU,EAAO,CAAEkU,MAAO,QAASC,MAAO,CAAEC,KAAMrQ,KAAKO,UAAUyP,EAAW,KAAM,MArC7F,yDADgB,kEAyChB,CAACxU,EAASgU,GAEb,CAEc,SAASc,GACtB1d,EACA2d,EACAC,EACAC,EACAC,GAEA,MAyBF,SACEF,EACAD,EACAI,EACAF,GAEA,MAA+Dzb,cAA/D,sBAAS8P,EAAT,EAASA,YAAagJ,EAAtB,EAAsBA,WAAYF,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,YACxC9Y,EAAa6b,YAAoB,OAACD,QAAD,IAACA,IAAc,KACtD,EAA6B1e,cAArBuJ,EAAR,EAAQA,QAASrD,EAAjB,EAAiBA,QACX0Y,EAAiBC,aAAkBrP,YAAUtJ,EAASqY,GAAc1C,GAAciD,MAAMjD,GAAc,KAAO,IAE7GkD,EAAaC,eACbC,EAAajD,aAAmBL,GAChCnE,EAAUgH,EAAWO,EAAaE,EAElCte,EAAcK,mBAAQ,IAAMke,aAAeR,EAAD,OAAa/C,QAAb,IAAaA,SAAcvX,IAAY,CAACuX,EAAY+C,IAC9FS,EAAyBC,eACzBC,EAAoBnC,KAE1B,OAAOlc,mBAAQ,KACb,IAAK4d,IAAmB1Y,IAAY2M,IAAgBtJ,IAAYsS,EAAY,OAAOkB,GAEnF,IAAMuC,EAAoB3e,GAAe6W,IAAYA,EAAQ+H,SAAS5e,GACtE,MAAO,CACLqc,QAAQ,WAAD,sCAAE,WAAOwC,GAAP,kHACH5S,EAAS,GADN,SAGA0S,GAAsB3e,EAHtB,yCAG0CiX,QAAQE,OAAO,yBAHzD,UAKC2H,EAAS,CAACnB,EAAY/U,EAAb,YAA2B5I,EAAY+e,SAASpd,SAAS,KAAzD,OAAgEsZ,QAAhE,IAAgEA,OAAhE,EAAgEA,EAAa1V,SACxFsZ,EAAexL,SAAS,oBAC1B2L,EAAUf,EAAegB,iBAAiBtB,EAAY/U,EAA5C,OAAqDqS,QAArD,IAAqDA,OAArD,EAAqDA,EAAa1V,QAAS,CACnFkI,MAAM,KAAD,OAAOzN,EAAY+e,SAASpd,SAAS,OAEnCkd,EAAexL,SAAS,wBACjC2L,EAAUf,EAAeiB,wBAAwBJ,GACxCD,EAAexL,SAAS,gBACjC2L,EAAUf,EAAekB,cAAcL,KAIrCE,EAjBC,wBAkBHI,OAAOC,eAAiB,IAAM,GAlB3B,UAmBeL,EAnBf,QAmBHM,EAnBG,wDAqBIrI,QAAQE,OAAO,wBArBnB,eAwBLlL,EAAM,UAAGqT,SAAH,aAAG,EAAWC,QAEZC,EAAepF,IAAc7U,GAASO,KACtC2Z,EAAarF,IAAcc,GAAYpV,KACvC4Z,EAAiB1f,EAAYuB,cAAc,GAC3Coe,EAAkBpX,YAA+BC,WAAWrG,EAAWhC,aAAawB,YAAa,EAAG,GACpGie,EALI,iBAKS5E,QALT,IAKSA,OALT,EAKSA,EAAYxZ,cALrB,QAK+B,GACnCqe,EANI,iBAMO5E,QANP,IAMOA,OANP,EAMOA,EAAazZ,cANpB,QAM8B,GACxCgd,EAAuB,CACrBe,KAAMD,EACNzM,KAAMiN,KAAiBC,OACvBC,QAAQ,GAAD,OAAKN,EAAL,YAAuBE,EAAvB,aAAsCJ,EAAtC,gBAA0DG,EAA1D,YAA6EE,EAA7E,aAA0FJ,EAA1F,KACPQ,UAAW,CACTL,aACAC,WACAK,WAAY/d,EAAWG,IACvBkd,eACAC,aACAU,UAAWpC,KAGfW,EACEnZ,EACA2V,EACAjP,EACA2T,EACAC,EACAH,EANe,iBAOfvd,QAPe,IAOfA,GAPe,UAOfA,EAAYhC,oBAPG,aAOf,EAA0BwB,kBAPX,QAOyB,KApDvC,4BAuDEsK,SAvDF,QAuDY,IAvDZ,yCAyDL+C,QAAQ3F,MAAM,iBAAd,MAzDK,kBA0DE4N,QAAQE,OAAO,MAAS,yBA1D1B,yBA4DLiI,OAAOC,eAAiB,KA5DnB,6EAAF,sDAAC,GA+DR/C,YAAaqC,EAhEf,GAkEC,CACDV,EACA1Y,EACA2M,EACAtJ,EACAsS,EALC,OAMDF,QANC,IAMDA,OANC,EAMDA,EAAYxZ,OACZxB,EACA6W,EACA8G,EACAxb,EAAWhC,aACXgC,EAAWG,IACX2Y,EACAyD,EACAF,EACAT,GAEH,CAnIqEqC,CAClExC,EACAD,EACA3d,EACA6d,GAJewC,EAAjB,EAAQhE,QAAmCiE,EAA3C,EAA+BhE,WAM/B,EA+HF,SACEwB,EACAH,EACAI,GAEA,MAA6E3b,cAA7E,sBAASC,EAAT,EAASA,aAAc6Y,EAAvB,EAAuBA,WAAYhJ,EAAnC,EAAmCA,YAAa8I,EAAhD,EAAgDA,WAAYC,EAA5D,EAA4DA,YACtDuD,EAAyBC,eACzBtc,EAAa6b,YAAoB,OAACD,QAAD,IAACA,IAAc,KACtD,EAA6B1e,cAArBkG,EAAR,EAAQA,QAASqD,EAAjB,EAAiBA,QACT2X,EAAYC,cAAZD,QAEFE,EAAepF,aAAmBL,GAClCoD,EAAaC,eACbxH,EAAU3E,GAA0C,YAAhB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAa8E,WAAyByJ,EAAerC,EAE9Epe,EAAcK,mBAAQ,IAAMke,aAAeR,EAAY/C,IAAa,CAACA,EAAY+C,IACjF2C,EAAcC,aAAmB9R,YAAUtJ,EAASoY,GAAcA,OAAala,GAC/Emd,EAAcC,aAAmBhS,YAAUtJ,EAASoY,GAAcA,OAAala,GAC/Eib,EAAoBnC,KAE1B,OAAOlc,mBAAQ,KACb,IAAKkF,IAAYuY,IAAc5C,IAAeqF,IAAY3X,EAAS,OAAOwT,GAE1E,IAAMuC,EAAoB3e,GAAe6W,IAAYA,EAAQ+H,SAAS5e,GAEtE,MAAO,CACLqc,QAAQ,WAAD,sCAAE,sIAEAsC,GAAsB3e,EAFtB,yCAE0CiX,QAAQE,OAAO,yBAFzD,UAIsB,YAAX,OAAZ9U,QAAY,IAAZA,OAAA,EAAAA,EAAcwQ,MAJb,qBAKChE,YAAUtJ,EAASoY,IAA0C,YAAhB,OAAXzL,QAAW,IAAXA,OAAA,EAAAA,EAAa8E,WALhD,qBAMG4J,EANH,iCAOmBA,EAAYtY,SAASwV,EAArB,YAAqC9d,EAAY+e,SAASpd,SAAS,MAPtF,OAOC2d,EAPD,wDASQrI,QAAQE,OAAO,0BATvB,uCAYKva,EAAO,CACXkkB,KAAMlY,EACNmY,GAAIjD,EACJrQ,MAAM,KAAD,OAAOzN,EAAY+e,SAASpd,SAAS,MAf3C,UAiBkB4e,EAAQS,KAAK,sBAAuB,CAACpkB,IAjBvD,QAiBK2iB,EAjBL,OAkBDD,EAAYC,GAA0C,IAAlCA,EAAK5d,WAAWqP,QAAQ,MAAc,CAAEuO,QAAS,GAlBpE,oCAqBCrE,IAAciD,MAAMjD,GArBrB,qBAsBGwF,EAtBH,kCAuBmBA,EAAYO,QAAZ,YAAyBjhB,EAAY+e,SAASpd,SAAS,KAAOmc,GAvBjF,QAuBCwB,EAvBD,wDAyBQrI,QAAQE,OAAO,0BAzBvB,oCA4BGyJ,EA5BH,kCA6BmBA,EAAYK,QAAZ,YAAyBjhB,EAAY+e,SAASpd,SAAS,KAAOmc,GA7BjF,QA6BCwB,EA7BD,+BA+BCrI,QAAQE,OAAO,yBA/BhB,eAmCClL,EAnCD,UAmCUqT,SAnCV,aAmCU,EAAWC,QAElBC,EAAepF,IAAc7U,GAASO,KACtC2Z,EAAarF,IAAcc,GAAYpV,KACvC4Z,EAAiB1f,EAAYuB,cAAc,GAC3Coe,EAAkBpX,YAA+BC,WAAWrG,EAAWhC,aAAawB,YAAa,EAAG,GACpGie,EALI,iBAKS5E,QALT,IAKSA,OALT,EAKSA,EAAYxZ,cALrB,QAK+B,GACnCqe,EANI,iBAMO5E,QANP,IAMOA,OANP,EAMOA,EAAazZ,cANpB,QAM8B,GACxCgd,EAAuB,CACrBe,KAAMD,EACNzM,KAAMiN,KAAiBC,OACvBC,QAAQ,GAAD,OAAKN,EAAL,YAAuBE,EAAvB,aAAsCJ,EAAtC,gBAA0DG,EAA1D,YAA6EE,EAA7E,aAA0FJ,EAA1F,KACPQ,UAAW,CACTL,aACAC,WACAK,WAAY/d,EAAWG,IACvBkd,eACAC,aACAU,UAAWpC,KAGfW,EACEnZ,EACA2V,EACAjP,EACA2T,EACAC,EACAH,EANe,iBAOfvd,QAPe,IAOfA,GAPe,UAOfA,EAAYhC,oBAPG,aAOf,EAA0BwB,kBAPX,QAOyB,KA/DvC,yBAkEEsK,QAlEF,IAkEEA,IAAU,IAlEZ,yCAoEL+C,QAAQC,IAAI,oBAAZ,MApEK,kBAqEEgI,QAAQE,OAAO,MAAS,yBArE1B,0DAAF,qDAAC,GAwERmF,YAAaqC,EAzEf,GA2EC,CACDpZ,EACAuY,EACA5C,EACAqF,EACA3X,EACA5I,EACA6W,EAPC,OAQDxU,QARC,IAQDA,OARC,EAQDA,EAAcwQ,KACd8K,EATC,OAUDzL,QAVC,IAUDA,OAVC,EAUDA,EAAa8E,UAVZ,OAWDgE,QAXC,IAWDA,OAXC,EAWDA,EAAYxZ,OACZof,EACAF,EACAve,EAAWhC,aACXgC,EAAWG,IACX2Y,EACAyD,EACAF,EACAT,GAEH,CAxP0EmD,CACvEpD,EACAH,EACA3d,GAHemhB,EAAjB,EAAQ9E,QAAmC+E,EAA3C,EAA+B9E,WAK/B,OAAOjc,mBAAQ,KACN,CACLgc,QAAQ,WAAD,sCAAE,WAAOwC,GAAP,wFACDwC,EACJxC,EAAexL,SAAS,aACxBwL,EAAexL,SAAS,oBACxBwL,EAAexL,SAAS,WAJnB,kBAKAgO,EAAWF,IAAiBd,EAAaxB,IALzC,2CAAF,mDAAC,GAORvC,WAAYgE,GAAwBc,KAErC,CAACD,EAAcd,EAAcC,EAAsBc,GACvD,C,kWCzFK3R,GAAYlU,UAAOC,IAAV,mFAAGD,CAAH,mCAITgF,GAAMhF,UAAOC,IAAV,6EAAGD,CAAH,6EAOH+lB,GAAQ/lB,UAAOC,IAAV,+EAAGD,CAAH,wEACA,KAAGE,MAAkBI,OAM1B0lB,GAAQhmB,UAAOC,IAAV,+EAAGD,CAAH,gCACA,KAAGE,MAAkBwF,UAG1BugB,GAAehS,GAClBA,EAAcjH,YAA+BC,WAAWgH,EAAO7N,YAAa,EAAG,IAAtE,GAEN8f,GAAY,CAAE/c,MAAO,GAAIC,OAAQ,IACxBkN,mBAAK,YAUhB,IATF6P,EASC,EATDA,OACA/N,EAQC,EARDA,UACAxR,EAOC,EAPDA,WACAwf,EAMC,EANDA,UAOMlmB,EAAQ6D,cACd,EAA6BD,cAArBuJ,EAAR,EAAQA,QAASrD,EAAjB,EAAiBA,QACjB,EAAkDnD,cAAlD,sBAAS8Y,EAAT,EAASA,WAAYF,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,YAE3B2G,EAAWvhB,mBAAQ,KAAO,IAAD,IAC7B,MAAO,CACL,CACE8G,MAAO,4BACP7J,QACE,eAACgkB,GAAD,WACE,cAACpF,GAAA,EAAD,CAAcjc,SAAU+a,EAAY5e,MAAOqlB,KAC3C,eAAC,IAAD,WACGD,GAAYrf,EAAWnC,aAD1B,WACyCgb,QADzC,IACyCA,OADzC,EACyCA,EAAYxZ,cAK3D,CACE2F,MAAO,cACP7J,QACE,eAACgkB,GAAD,WACE,cAAC,KAAD,CAAa/b,QAASA,EAASnJ,MAAOqlB,KACtC,cAAC,IAAD,UAAOlc,IAAO,OAAI6U,UAAJ,IAAIA,KAAJ,UAAIA,IAAgB7U,UAApB,aAAI,EAA0BO,YAIlD,CACEqB,MAAO,YACP7J,QACE,eAACgkB,GAAD,WACE,cAAC,KAAD,CAAa/b,QAAS2V,EAAY9e,MAAOqlB,KACxCvG,GAAc,cAAC,IAAD,UAAOd,IAAcc,GAAYpV,WAItD,CACEqB,MAAO,8BACP7J,QACE,eAACgkB,GAAD,WACE,cAACpF,GAAA,EAAD,CAAcjc,SAAUgb,EAAa7e,MAAOqlB,KAC5C,eAAC,IAAD,WACGD,GAAW,OAACrf,QAAD,IAACA,GAAD,UAACA,EAAYhC,oBAAb,aAAC,EAA0BwB,YADzC,WACuDsZ,QADvD,IACuDA,OADvD,EACuDA,EAAazZ,cAK1E,CACE2F,MAAO,yBACP7J,QAASsL,GACP,eAAC0Y,GAAD,WACE,cAAC,IAAD,UAAOO,YAAetc,EAASqD,EAAS,KACxC,cAACkZ,GAAA,EAAD,CAAYC,OAAQnZ,EAASxM,MAAO,CAAEyE,MAAOpF,EAAMwF,eA9C3D,GAmDC,CAAC2H,EAASsS,EAAY3V,EAASyV,EAAYC,EAAa9Y,EAAY1G,IAEjEumB,EAAsB1P,uBAC1B,IACEqP,EAAUM,iBACR,cAAC,KAAD,CAAyBtO,UAAWA,EAAWuO,QAASP,EAAUM,mBAElE,cAAC,GAAD,UACE,eAAC,IAAD,CAAMlf,cAAe,SAAU3G,MAAO,CAAE0E,IAAK,IAA7C,UACE,eAAC,IAAD,CAAMoH,eAAgB,gBAAtB,UACE,cAAC,IAAD,CAAMrH,MAAOpF,EAAMI,KAAMgH,WAAW,SAASzG,MAAO,CAAE0E,IAAK,GAA3D,SACE,cAAC,IAAD,CAAMH,SAAU,GAAhB,SAAqB,kCAEvB,cAAC,KAAD,CAAGlE,QAASkX,EAAWvX,MAAO,CAAEoE,OAAQ,WAAaK,MAAOpF,EAAMI,UAGpE,cAAC,IAAD,CAAMO,MAAO,CAAE0E,IAAK,IAAMiC,cAAc,SAAxC,SACG6e,EAAS3kB,KAAIC,GACZ,eAAC,GAAD,WACE,cAACqkB,GAAD,UAAQrkB,EAAKiK,QACZjK,EAAKI,UAFEJ,EAAKiK,WAOnB,eAAC,IAAD,CACEpE,cAAe,SACf3G,MAAO,CACL+lB,aAAc,GACd3V,QAAS,YACTpJ,OAAO,aAAD,OAAe3H,EAAM2H,QAC3BtC,IAAK,EACLH,SAAU,IAPd,UAUE,eAAC,GAAD,WACE,cAAC4gB,GAAD,UACE,sDAEF,cAACD,GAAD,UAAQnf,EAAWK,UAErB,eAAC,GAAD,WACE,cAAC+e,GAAD,UACE,4CAEF,cAACD,GAAD,UAAQnf,EAAWG,IAAX,WAAqBH,EAAWG,IAAhC,mBAAuC0Y,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAYxZ,QAAW,aAI1E,cAAC,IAAD,CAAMb,SAAU,GAAIyhB,UAAU,SAASvhB,MAAOpF,EAAMwF,QAApD,SACE,sHAEF,cAAC+O,GAAA,EAAD,CAAevT,QAASilB,EAAxB,SACE,2CAKV,CAAC/N,EAAWgO,EAAUM,iBAAkBL,EAAUF,EAAQvf,EAAY1G,EAAtE,OAA6Euf,QAA7E,IAA6EA,OAA7E,EAA6EA,EAAYxZ,SAG3F,OACE,cAAC6gB,GAAA,EAAD,CACE9C,KAAMoC,EAAU1V,OAChB8D,OAAQ4R,EAAUW,YAClB3O,UAAWA,EACX4O,cAAeZ,EAAUY,cACzBjlB,QAAS0kB,EACTQ,YACEjd,GAAW2V,EACP,sDAAiBF,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAYxZ,OAA7B,EAAwC4Y,IAAc7U,GAASO,KAA/D,SAA2EmV,QAA3E,IAA2EA,OAA3E,EAA2EA,EAAazZ,OAAxF,EAAmG4Y,IAAcc,GAAYpV,OAC7H,IAIX,I,sCCjLK1J,GAAQ,CACZ0E,IAAK,EACLqhB,aAAc,GACd3V,QAAS,aAgDIiW,GA9CW,IAAiE,IAA9DplB,EAA6D,EAA7DA,MAAOwV,EAAsD,EAAtDA,KAC5BpX,EAAQ6D,cACd,MAAa,UAATuT,EAEA,eAAC,IAAD,CAAMhS,MAAOpF,EAAMoG,IAAKgB,WAAW,SAASzG,MAAK,aAAIV,WAAYuI,YAAKxI,EAAMoG,IAAK,MAAUzF,IAA3F,UACE,8BACE,cAAC,KAAD,CAAe+E,KAAM,OAEvB,cAAC,IAAD,CAAMP,WAAY,IAAKD,SAAU,GAAjC,SACGtD,OAKP,cAACqlB,GAAA,EAAD,CACEzmB,eAAgB,cAAC,KAAD,IAChBG,MAAK,aAAIV,WAAYuI,YAAKxI,EAAMqG,QAAS,MAAU1F,IACnDJ,OACE,eAAC,IAAD,CAAM6E,MAAOpF,EAAMqG,QAASe,WAAW,SAASzG,MAAO,CAAE0E,IAAK,GAA9D,UACE,8BACE,cAAC,KAAD,CAAeK,KAAM,OAEvB,cAAC,IAAD,CAAMP,WAAY,IAAKD,SAAU,GAAjC,SACGtD,OATT,SAcE,sBAAKjB,MAAO,CAAE4J,WAAY,IAA1B,UACE,cAAC,IAAD,CAAMqB,GAAG,IAAI1G,SAAU,GAAIsH,WAAY,OAAQrF,UAAW,MAA1D,SACE,0UAMF,cAAC,IAAD,CACExG,MAAO,CAAEuE,SAAU,IACnB4D,KAAK,4KAFP,6BAKgB,QA5BtB,ECYaoe,GA9BE,IAQV,IAAD,EAPJpd,EAOI,EAPJA,QACAqd,EAMI,EANJA,QACAC,EAKI,EALJA,UAMMpnB,EAAQ6D,cACd,OACE,cAAC,IAAD,CACEuD,WAAW,SACXqF,eAAgB,WAChBvH,SAAU,GACVC,WAAY,IACZC,MAAOpF,EAAMwF,QACbyD,MAAM,OANR,SAQE,cAAC,IAAD,UACE,sCACGa,EAAO,UACD6U,IAAc7U,GAASO,KADtB,oBACuCyJ,GAAgBsT,GADvD,6BACqED,QADrE,IACqEA,OADrE,EACqEA,EAASphB,cAD9E,QACwF,KAC5F,SAbZ,EC2BIshB,GAAiBvnB,kBAAOoI,MAAV,8EAAGpI,CAAH,yFAEPya,KAAS+M,WAIhBnnB,GAAeL,UAAOC,IAAV,4EAAGD,CAAH,qHAEF,KAAGE,MAAkBunB,cAO/BzB,GAAQhmB,UAAOC,IAAV,qEAAGD,CAAH,qDACA,KAAGE,MAAkBwF,UAI1BgiB,GAAgB,CAACzT,EAAgBsI,KACrC,IACE,GAAI1L,OAAOoD,GACT,OAAO,IAAI0T,YAAS1T,EAAQ2T,KAAKC,aAAaD,KAAKE,OAAO,IAAKF,KAAKE,OAAL,OAAYvL,QAAZ,IAAYA,IAAY,MAAM/V,QAAQ,EACvF,CAAhB,MAAOsH,GAAS,CAClB,MAAO,GAAP,EAQa,SAASia,KAAY,IAAD,EACjC,EAA6BjkB,cAArBuJ,EAAR,EAAQA,QAASrD,EAAjB,EAAiBA,QACXge,EAAgBC,eACtB,EAYIphB,cAZJ,sBAEI8P,EAFJ,EAEIA,YACA7P,EAHJ,EAGIA,aACA6Y,EAJJ,EAIIA,WACAF,EALJ,EAKIA,WACA/G,EANJ,EAMIA,aACAD,EAPJ,EAOIA,YACAyP,EARJ,EAQIA,YACAtI,EATJ,EASIA,aACAhJ,EAVJ,EAUIA,gBAGJ,EAAgEuR,cAAxDC,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,eAAgBC,EAA1C,EAA0CA,kBACpCC,EAAoBC,eACpB3e,EAASC,cACT5J,EAAQ6D,cACNqN,EAAoBC,eAApBD,gBAER,EAAsCrQ,mBAAS,IAA/C,mBAAO0D,EAAP,KAAoBgkB,EAApB,KACA,EAAkD1nB,oBAAkB,GAApE,mBAAO2nB,EAAP,KAA0BC,EAA1B,KACA,EAAkC5nB,mBAAwB,CACxD6nB,iBAAa1gB,EACb2gB,kBAAc3gB,IAFhB,mBAAOof,EAAP,KAAkBwB,EAAlB,KAMA,GAAkC/nB,mBAA0B,CAC1DgmB,aAAa,EACbC,eAAe,EACfN,iBAAkB,GAClBhW,YAAQxI,IAJV,qBAAOke,GAAP,MAAkB2C,GAAlB,MAOMC,GAAelkB,mBAAQ,KAC3B,IAAMmkB,GAA2B,OAAXtS,QAAW,IAAXA,OAAA,EAAAA,EAAa1D,aAAc,CAAC,EAClD,OAAQH,OAAOC,KAAKkW,GAAevnB,IAAImP,QAAsBiD,QAAOC,GAAMmV,IAAmBpR,SAAS/D,IAAtG,GACC,CAAC4C,IAEE/P,GAAa6b,YAAqBhe,GAElC0kB,GAAQ,OAAGriB,QAAH,IAAGA,OAAH,EAAGA,EAAcsiB,aAEzBC,GAAcvkB,mBAAQ,KAC1B,IAAMyS,EAAuB,OAAZzQ,QAAY,IAAZA,KAAcwiB,iBAAd,OAAiCxiB,QAAjC,IAAiCA,KAAcyiB,YAA/C,OAA6DJ,SAA7D,IAA6DA,QAA7D,EAA6DA,GAAU/V,aAAUlL,EAC5F+U,EAAU,OAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAavD,QAChC,OAAOmE,GAAY0F,EAAa,CAAC,CAAE1F,WAAU0F,eAAgB,EAA7D,GACC,QAACkM,SAAD,IAACA,QAAD,EAACA,GAAU/V,QAAX,OAAoBuD,QAApB,IAAoBA,OAApB,EAAoBA,EAAavD,QAAjC,OAA0CtM,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAcwiB,gBAAxD,OAAyExiB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAAcyiB,cAEpFC,GAAe1kB,mBAAQ,IACpB4T,EACJhX,KAAI,YAAmB8X,EAAnB,EAAGpC,eAAH,MAAgC,CACnCG,SAAe,OAALiC,QAAK,IAALA,KAAO+P,YAAP,OAAqB/P,QAArB,IAAqBA,GAArB,UAAqBA,EAAOjC,gBAA5B,aAAqB,EAAiBnE,aAAUlL,EAC1D+U,WAAU,OAAEzD,QAAF,IAAEA,GAAF,UAAEA,EAAOyD,kBAAT,aAAE,EAAmB7J,QAF5B,IAIJU,QAAO3S,GAAKA,EAAEoW,UAAYpW,EAAE8b,cAC9B,CAACvE,IAEE+Q,GAAalM,GAAkBvT,EAASqf,IACxCK,GAAcnM,GAAkBoC,EAAY6J,IAElD/a,qBAAU,KAAO,IAAD,EAEVma,EAC6C,EAF3CxV,EAAO,OAAG+V,SAAH,IAAGA,QAAH,EAAGA,GAAU/V,QAEtBA,GAAO,OAAIqW,SAAJ,IAAIA,IAAJ,UAAIA,GAAarW,UAAjB,OAAI,EAAuBgJ,YACpCwM,EAAclB,GAAa,UAAC+B,GAAWrW,UAAZ,aAAC,EAAqBgJ,UAAtB,OAAiC+M,SAAjC,IAAiCA,QAAjC,EAAiCA,GAAU5M,WAExEuM,GAAaxB,GAAS,2BAAUA,GAAV,IAAqBsB,iBAA3C,GACC,CAACa,GAAYN,KAEhB1a,qBAAU,KAAO,IAAD,IAEVoa,EACAc,EAFE/S,EAAmC,CAAC,EAGtCgT,GAAgB,EAChBC,GAAmB,EAEnBH,IAAehR,EAAapV,QAC9BoV,EAAa1F,SAAQwG,IAAU,IAAD,cACtBsQ,EAAe,oBAAGtQ,EAAMpC,sBAAT,iBAAG,EAAsBG,gBAAzB,aAAG,EAAgCnE,eAAnC,QAA8C,GAC7D2W,EAAQ,OAAGL,SAAH,IAAGA,QAAH,EAAGA,GAAcI,GAC/B,IAAKC,EAGH,OAFAJ,EAAmBnQ,OACnBqQ,GAAmB,GAIrB,GAAI,OAACE,QAAD,IAACA,KAAU3N,WAAa,OAAC5C,QAAD,IAACA,GAAD,UAACA,EAAOpC,sBAAR,iBAAC,EAAuBG,gBAAxB,OAAC,EAAiCgF,SAA9D,CACA,IAAMyN,EAAYtC,GAAa,OAACqC,QAAD,IAACA,OAAD,EAACA,EAAU3N,UAAX,OAAsB5C,QAAtB,IAAsBA,GAAtB,UAAsBA,EAAOpC,sBAA7B,iBAAsB,EAAuBG,gBAA7C,aAAsB,EAAiCgF,UACtF3F,EAAgBkT,GAAmBE,EAC/BnZ,OAAOmZ,GAAaJ,IAAiBC,IACvCF,EAAmBnQ,EACnBoQ,EAAe/Y,OAAOmZ,GALsD,CAM7E,IAGL,IAAMC,EAAWN,GAAoBjR,EAAa,IAAM,KAClDwR,EAAW,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAU7S,sBAAb,iBAAG,EAA0BG,gBAA7B,aAAG,EAAoCnE,QAC7B,kBAAhB8W,GAA4BtT,EAAgBsT,KACrDrB,EAAejS,EAAgBsT,IAEjC7B,EAAe,CAAE4B,aACjBnB,GAAaxB,GAAS,2BAAUA,GAAV,IAAqBuB,mBAC3CP,EAAkB,CAAE1R,mBAApB,GACC,CAAC8S,GAAahR,EAAc4P,EAAmBD,IAElD5Z,qBAAU,KACHua,GAAahQ,MAAKmR,GAAMA,IAAOxK,KAAa0I,EAAe,CAAE1I,WAAYqJ,GAAa,IAA1C,GAChD,CAACX,EAAgBW,GAAcrJ,IAElClR,qBAAU,KACRga,EAAe,GAAf,GACC,CAAC9R,EAAa3M,IAEjB,IAAMogB,GAAYC,aAAYrgB,GAC9ByE,qBAAU,KACJzE,IAAYogB,IAAaA,IAC3BhC,GACD,GACA,CAACpe,EAASogB,GAAWhC,IAExB,IAAM9E,GAAc,OAAGxc,QAAH,IAAGA,OAAH,EAAGA,EAAcwjB,UAC/BjI,GAA0B,OAAZvb,QAAY,IAAZA,KAAcyjB,QAAUjX,qBAAS,OAACxM,QAAD,IAACA,OAAD,EAACA,EAAcyjB,QAAhD,OAA0DzjB,QAA1D,IAA0DA,OAA1D,EAA0DA,EAAcyjB,YAASriB,EAErG,GAAwDia,GACtD1d,EADuE,OAEvE0kB,SAFuE,IAEvEA,QAFuE,EAEvEA,GAAU/V,QACViP,GAC2B,YAAhB,OAAX1L,QAAW,IAAXA,OAAA,EAAAA,EAAa8E,cAA2B,OAAC6H,SAAD,IAACA,QAAgBxL,SAAS,qBAC3C,YAAX,OAAZhR,QAAY,IAAZA,OAAA,EAAAA,EAAcwQ,MAAd,OAAkCxQ,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAc0jB,eAAiBnd,GALlDod,GAAjB,GAAQ3J,QAA6B4J,GAArC,GAAyB3J,WAQnBA,GAA4Ejc,mBAAQ,KACxF,IAAK4T,EAAapV,SAAWmV,EAAYnV,SAAWsc,EAClD,MAAO,CAAEuB,MAAO,QAASwJ,IAAK,yDAGhC,IAAMC,EAAc/Z,OAAOpM,GAE3B,GAAKkS,GAAgBgJ,GAAe7Y,GAAgC,IAAhB8jB,EAApD,CAEA,GAAIhI,MAAMgI,GAAc,OAAO,mCAE/B,GAAIA,EAAc/Z,OAAO/J,EAAaW,aACpC,OAAO,0DAA2C1B,YAAae,EAAaW,aAAa,EAAO,GAAzF,EACLkP,EAAY1Q,SAGhB,GAAI2kB,EAAc/Z,OAAO/J,EAAaY,aACpC,OAAO,0DAA2C3B,YAAae,EAAaY,aAArE,EAAqFiP,EAAY1Q,SAG1G,GAAIa,EAAayiB,aAAeziB,EAAamW,WAAY,CACvD,IAAMzF,EAAgBxD,GAAgBsT,EAAUuB,cAChD,GAAI+B,EAAc/Z,OAAOyW,EAAUuB,cACjC,OAAO,sHAA2G/hB,EAAab,OAAxH,cAA0FuR,IAGnG,GAAIoT,EADU,GACY/Z,OAAOyW,EAAUuB,cACzC,MAAO,CACL1H,MAAO,OACPwJ,IAAK,oHAAgC5kB,YAAatB,GAAa,EAAO,GAAjE,EACHkS,EAAY1Q,OADT,EAEa,GAFb,EAE0Ea,EAAab,OAFvF,cAEyDuR,IAGnE,CACD,OAAKwL,aAAeve,EAAagb,GAIRiL,IAAkBE,EAAc,EAC5B,2CAAiBjU,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAa1Q,cAA3D,EAJS,gCA7BoE,CAkCvE,GACL,CACD0Q,EACAgJ,EACA+K,GACAjmB,EACAqC,EACAwgB,EAAUuB,aACVjJ,EACAlH,EACAD,EACAgH,IAGIoL,GAAkB9T,uBACrB7E,IACKyE,GAAa8R,EAAevW,EAAf,GAEnB,CAACyE,IAGGmU,GAAc,KAClB/B,IAAa5H,GAAK,2BAAUA,GAAV,IAAiB4F,aAAa,EAAML,iBAAkB,GAAIhW,OAAQ,OAChF1G,GAAW2V,GACbvO,EAAgBE,KAAcyZ,6BAA8B,CAC1D9G,aAAcpF,IAAc7U,GAASO,KACrC2Z,WAAYrF,IAAcc,GAAYpV,MAEzC,EAGGygB,GAAcjU,uBAAY,KAC9BgS,IAAa5H,GAAK,2BAAUA,GAAV,IAAiB4F,aAAa,KAAhD,GACC,IAEGkE,GAAalU,sBAAW,gCAAC,0GAEtBuM,GAFsB,wDAG3ByF,IAAa5H,GAAK,2BAAUA,GAAV,IAAiB6F,eAAe,MAC9Chd,GAAW2V,GACbvO,EAAgBE,KAAc4Z,sBAAuB,CACnD7G,WAAU,OAAE1N,QAAF,IAAEA,OAAF,EAAEA,EAAa1Q,OACzBqe,SAAQ,OAAExd,QAAF,IAAEA,OAAF,EAAEA,EAAcb,OACxB0e,WAAY/d,GAAWG,IACvBkd,aAAcpF,IAAc7U,GAASO,KACrC2Z,WAAYrF,IAAcc,GAAYpV,KACtCqa,UAAWngB,IAXY,SAcNgmB,GAAOnH,IAdD,OAcrB5S,EAdqB,OAe3B+X,EAAe,IACfM,IAAa5H,GAAK,2BAAUA,GAAV,IAAiB6F,eAAe,EAAOtW,aAhB9B,kDAkB3B+C,QAAQ3F,MAAR,MACAib,IAAa5H,GAAK,2BAAUA,GAAV,IAAiB6F,eAAe,EAAON,kBAAkB,uCAAOC,UAAP,SAnBhD,0DAqB5B,CACDrD,GACAmH,GACAzgB,EACA2V,EACAlb,EACAmC,GAAWG,IACXqK,EAPC,OAQDuF,QARC,IAQDA,OARC,EAQDA,EAAa1Q,OARZ,OASDa,QATC,IASDA,OATC,EASDA,EAAcb,SAGVklB,GAAc,UAAGrL,aAAmBL,UAAtB,aAAG,EAAgC2L,UACjDC,GAAiBtU,uBAAY,KACjCoU,IAAkB1C,EAAe0C,GAAjC,GACC,CAACA,KAEEG,GAAiB,MAAQ,IAAD,EACtBC,GAAY,CAAC,SAAU,WAAWzT,SAAtB,iBAA+BhR,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAcwQ,YAA7C,QAAqD,IACvE,UAAIxQ,QAAJ,IAAIA,KAAc0kB,UAChB,OAAOD,EAAWzkB,EAAa2kB,QAAhB,OAA0BtC,SAA1B,IAA0BA,QAA1B,EAA0BA,GAAU/V,OAHhC,KAQjBsY,GAAyB1I,aAC7Bve,EACAgb,GAAU,OAAI3Y,QAAJ,IAAIA,KAAc0kB,UAAY/L,OAAavX,GAEvD,GAAoCyjB,aAClCD,IAAsB,OAAI5kB,QAAJ,IAAIA,KAAc0kB,UAAYE,QAAyBxjB,EAC7EojB,IAFF,qBAAOM,GAAP,MAAiBC,GAAjB,MAKApd,qBAAU,KACJmd,KAAaE,KAAcC,SAC7BpD,GAAqB,GAEnBiD,KAAaE,KAAcE,cAC7BrD,GAAqB,EACtB,GACA,CAACiD,GAAUlD,IAEd,IAAMjS,GAAmBM,uBACtBsQ,IACCgB,EAAe,CAAEhB,WAAjB,GAEF,CAACgB,IAEG4D,GAAuBlV,uBAC1BkT,IAAgC,IAAD,MAC9B5B,EAAe,CAAE4B,aACjB,IAAMd,EAAQ,iBAAGc,QAAH,IAAGA,GAAH,UAAGA,EAAU7S,sBAAb,iBAAG,EAA0BG,gBAA7B,aAAG,EAAoCnE,eAAvC,QAAkD,GAChE0V,GAAa3H,GAAK,2BAAUA,GAAV,IAAiB0H,aAAcjS,EAAgBuS,MAAjE,GAEF,CAACd,EAAgBzR,IAEbsV,GAAsBnV,uBACzB/M,IACCqe,EAAe,CAAE1I,WAAY3V,GAA7B,GAEF,CAACqe,IAGG8D,IACHpL,KACA6K,KAAaE,KAAcE,cAC1BJ,KAAaE,KAAcC,SAC1BrD,GAAqBkD,KAAaE,KAAcM,UAE/CC,GAAqBT,KAAaE,KAAcE,cAAgBtD,KAAuB3H,GACvFuL,KACFvL,IACF,CAACtc,EAAakS,EAAa7P,EAAc6Y,GAAY4M,MAAKprB,IAAMA,KAC/DyqB,KAAaE,KAAcM,WAA3B,OAAuCtlB,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAc0kB,WACxD,OACE,qCACE,eAAC,IAAD,CAAM3qB,MAAO,CAAE2rB,SAAU,WAAYhlB,cAAe,SAAUjC,IAAK,GAAI+B,WAAY,UAAnF,UACE,cAAC,IAAD,CAAiBzG,MAAO,CAAE2rB,SAAU,SAApC,SACE,eAACjF,GAAD,CAAgB1mB,MAAO,CAAE+L,QAAS,OAAQpF,cAAe,SAAUjC,IAAK,QAAxE,UACE,eAAC,IAAD,CAAMiC,cAAe,SAArB,UACE,cAAC,GAAD,UACE,yCAEF,cAACilB,GAAA,EAAD,CACEnsB,KAA4B,kBAAfygB,GAA0BA,GAAa,GACpDvd,KAA4B,kBAAfud,GACbpW,UAAU,MACVxB,MAAM,cACNtI,MAAO,CAAE6rB,SAAU,SALrB,SAOE,cAACtN,GAAD,CACEvL,SAAUqU,EACVxJ,gBAAiB1U,EACjByU,gBAAiBuJ,EACjBla,MAA6B,kBAAfiT,GACd7O,MAAOzN,EACP4a,YAAawL,GACbvL,MAAO+L,GACP5U,iBAAkBA,GAClB1C,GAAG,6BAKT,cAAC,GAAD,CAAU/J,QAASA,EAASqd,QAAS1Q,EAAa2Q,UAAWA,EAAUsB,cAEvE,gCACE,eAAC,IAAD,CAAMthB,WAAY,WAAYqF,eAAe,gBAA7C,UACE,cAAC,GAAD,UACE,wCAEF,cAACtM,GAAD,UACE,cAAC,GAAD,CAAS8I,MAAO,GAAIG,KAAMpJ,EAAMwF,QAAS7E,MAAO,CAAEoE,OAAQ,kBAG9D,cAACma,GAAD,CACEvL,SAAUmV,GACVvK,gBAAiByN,GACjBxN,gBAAiBiB,EACjBnJ,UAAQ,EACRtE,MAAOtL,GAAWhC,aAAawB,WAC/BqQ,iBAAkBwV,GAClBlY,GAAG,4BAIP,cAAC,GAAD,CAAU/J,QAAS2V,EAAY0H,QAAS1Q,EAAa2Q,UAAWA,EAAUuB,eAEnD,kBAAf9H,KAAP,OAAkCA,SAAlC,IAAkCA,QAAlC,EAAkCA,GAAYI,QAC7C,cAACwL,GAAD,CAAmB7qB,MAAK,OAAEif,SAAF,IAAEA,QAAF,EAAEA,GAAY4J,IAAKrT,KAAI,OAAEyJ,SAAF,IAAEA,QAAF,EAAEA,GAAYI,QAE7D9T,EAKA8e,IACE,qCACE,eAAC,KAAD,WACE,cAAC1X,GAAA,EAAD,CACEvT,QAAS2qB,GACTvpB,SAAU+pB,GACVljB,MAAM,MACNyjB,iBAAkBhB,KAAaE,KAAcC,QAC7C1pB,UAAWupB,KAAaE,KAAcM,SALxC,SAOGR,KAAaE,KAAcC,QAC1B,eAAC,KAAD,CAASxmB,IAAI,MAAMpC,QAAQ,SAA3B,UACE,oCADF,IAC2B,cAAC0pB,GAAA,EAAD,CAAQpjB,OAAO,aAG1C,eAAC,IAAD,CAAMqjB,aAAc,SAApB,UACE,cAAC,KAAD,CACEniB,UAAU,SACVxB,MAAM,QACN7I,KAAM,yIAAwEqW,QAAxE,IAAwEA,OAAxE,EAAwEA,EAAa1Q,SAH7F,SAKE,cAAC,IAAD,CAAML,KAAM,OAEd,cAAC,IAAD,CAAM6E,WAAY,MAAlB,SACE,qDAAgBkM,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAa1Q,iBAKrC,cAACwO,GAAA,EAAD,CAAatL,MAAM,MAAM4K,GAAG,cAAczR,SAAUgqB,GAA0BprB,QAAS4pB,GAAvF,SACE,cAAC,IAAD,CAAM1lB,SAAU,GAAIC,WAAY,IAAhC,SACG,gCAIP,cAAC0nB,GAAA,EAAD,CAAe9pB,MAAO,CAAC2oB,KAAaE,KAAcM,eAvCtD,cAAC3X,GAAA,EAAD,CAAavT,QAASqnB,EAAtB,SACE,4CA0CF4D,IAAmB9e,GACnB,cAACoH,GAAA,EAAD,CAAavT,QAAS4pB,GAAaxoB,SAAUgqB,GAA7C,SACE,cAAC,IAAD,CAAMjnB,WAAY,IAAlB,SAAwB,6BAG5B,cAAC,IAAD,CAAMsH,eAAgB,WAAtB,SACE,eAAC,IAAD,CAAMrF,WAAY,SAAUzG,MAAO,CAAE0E,IAAK,GAA1C,UACE,cAAC,IAAD,CAAMD,MAAOpF,EAAMwF,QAASN,SAAU,GAAtC,wBAGA,cAAC,IAAD,CAAc4D,KAAK,0BAAnB,SACE,qBACEmB,IAAKN,EAASmjB,KAAsBC,KACpC3iB,IAAI,4BACJlB,OAAQ,iBAQpB,cAACtB,GAAA,EAAD,CAAmClB,WAAYA,QAGjD,cAACsmB,GAAD,CAAoB9G,UAAWA,GAAWhO,UAAW4S,GAAa7E,OAAQ8E,GAAYrkB,WAAYA,OAGvG,CCxeD,IAAMsN,GAAYlU,UAAOC,IAAV,wEAAGD,CAAH,kDAKTmtB,GAAUntB,UAAOC,IAAV,sEAAGD,CAAH,iEAKT,KAAGE,MAAkB6O,WAAWW,WAA/B,QAAD,uEAKE0d,GAAQptB,UAAOqtB,GAAV,oEAAGrtB,CAAH,wDAEA,KAAGE,MAAkBuC,UAI1B6qB,GAAU,UAQD,SAASC,KACtB,IAAMrtB,EAAQ6D,cACd,EAA8BD,cAAtBkG,EAAR,EAAQA,QAASwjB,EAAjB,EAAiBA,SACjB,EAAsD3mB,cAAtD,0BAAS8P,EAAT,EAASA,YAAagJ,EAAtB,EAAsBA,WAAc0I,EAApC,KACMoF,EAAa1d,iBAAO/F,GAC1ByjB,EAAWxd,QAAUjG,EAErB,IAAM0jB,EAAqB3W,uBACzB,CAAClE,EAAa8a,KACZ,IAAIC,EACJ,GAAIH,EAAWxd,UAAY0d,GAAmBA,EAA9C,CACA,IAAME,EAA6B,GACnC/a,OAAOC,KAAKF,GAAQG,SAAQrB,IAC1B,IAAM6H,EAAK,eAAQ3G,EAAOlB,IAClByB,EAA6CoG,EAA7CpG,QAAS0a,EAAoCtU,EAApCsU,QAASvjB,EAA2BiP,EAA3BjP,KAAMgS,EAAqB/C,EAArB+C,SAAUtW,EAAWuT,EAAXvT,OAC1C,GAAKqN,YAAUtJ,EAASoJ,GAAxB,CAGAoG,EAAM7H,IAAMA,EACZ6H,EAAMxP,QAAU2jB,EAChB,IAAMI,EAAe,IAAIC,IAAiB,CACxChkB,QAAS2jB,EACTpR,WACAtW,SACAsE,OACA6I,UACA6a,QAASH,EACT1W,eAAgBoC,IAElBqU,EAAOhR,KAAKkR,GACRG,YAAcH,EAAcJ,KAC9BC,EAASG,EAdV,CAeA,IAEH1F,EAAe,CAAE5P,YAAaoV,EAAQxG,QAASuG,GAAUC,EAAO,GAAIjO,cAAc,GAxBd,CAwBpE,GAEF,CAAC5V,EAASqe,IAoEZ,OAjEA5Z,qBAAU,KACR,IAAM0f,EAAS,iDAAG,wHAEd9F,EAAe,CAAEzI,cAAc,IACzBwO,EAAa1c,GAAsBD,IAH3B,kBAMIiK,QAAQ2S,KAAK,CApD9B,IAAI3S,SAAQC,IACjBzL,YAAW,KACTyL,EAAQ2R,GAAR,GACC,IAFH,IdbK/a,KAAMC,IAAN,UAAaH,GAAb,mBAA6CI,MAAKpR,GAAQA,EAAKA,Sc0DlD,OAMZitB,EANY,sEASR9a,EAAc4a,IAAeE,IAAYA,GAAWA,IAAYhB,KACnDgB,IAAYhB,IAC7Brb,GAAsBR,GAAsC6c,GAXhD,UAcK5S,QAAQ6S,WAAW,CACpC3a,GAAaJ,GACbxJ,EAAUuJ,GAAavJ,EAASwJ,GAAekI,QAAQE,WAhB3C,QAkBS,eAJjBva,EAdQ,QAkBL,GAAGoK,SACJyc,EAAc7mB,EAAK,GAAG6Q,MAC5BmW,EAAe,CAAEH,iBAEI,cAAnB7mB,EAAK,GAAGoK,QAA0BzB,IAC9B6I,EAASxR,EAAK,GAAG6Q,MACvBwb,EAAmB7a,EAAQ7I,IAxBf,kDA2BdyJ,QAAQ3F,MAAR,MA3Bc,gEAAH,qDA+BX9D,GACFmkB,GACD,GACA,CAACnkB,EAASqe,EAAgBqF,IAE7Bjf,qBAAU,KAAO,IAAD,EACRwa,GAA2B,OAAXtS,QAAW,IAAXA,OAAA,EAAAA,EAAa1D,aAAc,CAAC,EAClD,GAAK0M,GAAehJ,GAAgB3M,EAApC,CAIA,IAAMtI,EAAMie,GAAU,UAAGsJ,EAActJ,UAAjB,QAAqC,CAAC,EACtDjH,EAAmC,GACzC5F,OAAOC,KAAKrR,GAAKsR,SAAQgR,IACvB,IAAMxK,EAAK,eAAQ9X,EAAIsiB,IACvBxK,EAAM7H,IAAMqS,EACZ,MAA4CxK,EAApC+C,EAAR,EAAQA,SAAUhS,EAAlB,EAAkBA,KAAM6I,EAAxB,EAAwBA,QAASnN,EAAjC,EAAiCA,OAC5BqN,YAAUtJ,EAASoJ,IACxBsF,EAAamE,KACX,IAAImR,IAAiB,CACnBhkB,QAAS2V,EACTpD,WACAtW,SACAsE,OACA6I,UACA6a,QAAStX,EAAYmX,QACrB1W,eAAgBoC,IARpB,IAYF6O,EAAe,CAAE3P,gBApBhB,MAFC2P,EAAe,CAAE3P,aAAc,IAsBjC,GACC,CAACiH,EAAYhJ,EAAa3M,EAASqe,IAElCmF,EAAiB,cAAC,IAAD,CAAUhI,GAAG,MAEhC,eAAC,IAAD,WACE,cAAC,GAAD,IACA,eAAC2H,GAAD,WACE,eAAC,GAAD,WACE,gCACE,cAACC,GAAD,UACE,mCAEF,cAAC,IAAD,CAAMhoB,SAAU,GAAIE,MAAOpF,EAAMwF,QAAS2B,UAAW,MAArD,SACE,gFAGJ,cAAC0gB,GAAD,OAEF,cAAC,GAAD,SAIP,C,iWCtKM,SAASlhB,IACd,IAAMyG,EAAWC,cAGjB,MAAO,CAFQihB,aAAarN,GAAoBA,EAAMC,SACrCrK,uBAAa1V,GAA4BiM,EAAS+a,YAAehnB,KAAQ,CAACiM,IAE5F,CAEM,SAAS6a,IACd,IAAM7a,EAAWC,cAEX6a,EAAmBrR,uBAAY,IAAMzJ,EAASmhB,gBAA2B,CAACnhB,IAC1Egb,EAAoBvR,uBACvB1V,GAAgCiM,EAASohB,YAAwBrtB,KAClE,CAACiM,IAIH,MAAO,CAAE8a,mBAAkBC,eADJxhB,IAAiB,GACGyhB,oBAC5C,CA0CM,SAAS7F,EAAqBkM,GACnC,MAA2B9nB,IAAlBC,EAAT,oBAASA,aACT,OAAOhC,mBAAQ,IApCjB,SAAgC6pB,EAA0B1E,GACxD,IAAMxlB,EAAcoM,OAAO8d,GAC3B,GAAIlqB,GAAewlB,EAAU,CAC3B,IAAM/iB,EAAwB2J,OAAOoZ,EAAS/iB,uBACxCE,EAAiByJ,OAAOoZ,EAAS7iB,gBACjCD,EAAiB0J,OAAOoZ,EAAS9iB,gBACjCynB,EAAiB/d,OAAOoZ,EAAS2E,gBACjCC,EAASD,EAAkBznB,GAAkB,IAAMynB,GAAmB,IAAMznB,EAG9EJ,EAAOtC,EAAcyC,EAAyB,IAC9CH,EAAM8nB,EACR9nB,EAAM8nB,EACG9nB,EAAMK,IACfL,EAAMK,GAER,IAAM8K,EAAQzN,EAAcsC,GARZ6nB,EAAkBC,EAASD,EAAkB,IAAM,GASnE,GAAI1c,EAAQ,EACV,MAAO,CACLnL,MACAnC,aAAcsN,EACdjL,KAAM,aACNxC,YAAakqB,EAGlB,CACD,MAAO,CACL5nB,IAAK,GACLnC,aAAc,GACdqC,KAAM,KACNxC,YAAakqB,EAEhB,CAKUG,CAAuBH,EAAkB7nB,IAC/C,CAAC6nB,EAAkB7nB,GACvB,C,oDChFD,0RAgBO,SAAS/B,EAAyBrB,EAAmBC,GAC1D,GAAIA,EAAW,CACb,IAAMorB,EAAc,IAAIpH,WACtBqH,qBAAWxoB,YAAQ9C,EAAMqrB,aAAcE,KAAsB7oB,WAC7DwhB,IAAKC,aAAaD,IAAKE,OAAO,IAAKF,IAAKE,OAAOmH,OAEjD,GAAIF,EAAa,CAEf,IAIMG,EAJoB,IAAIvH,WAC5BqH,qBAAWrrB,EAAUwrB,UAAWF,KAAsB7oB,WACtDwhB,IAAKC,aAAaD,IAAKE,OAAO,IAAKF,IAAKE,OAAOmH,OAENG,OAAOC,KAC5CC,EAAeP,EAAYQ,SAASL,GAAkBlpB,cAAcipB,KAC1E,OAAOlpB,YAAaupB,GAAc,EACnC,CACF,CAED,MAAO,IACR,C","file":"static/js/bridge-page.a7af5e36.chunk.js","sourcesContent":["import React, { CSSProperties, ReactNode, useState } from 'react'\r\nimport { ChevronUp } from 'react-feather'\r\nimport styled from 'styled-components'\r\n\r\nconst ItemWrapper = styled.div`\r\n  position: relative;\r\n  padding: 16px 24px;\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.background};\r\n`\r\n\r\nconst Header = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  cursor: pointer;\r\n`\r\n\r\nconst ArrowWrapper = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  color: ${({ theme }) => theme.text};\r\n\r\n  svg {\r\n    transition: all 150ms ease-in-out;\r\n  }\r\n\r\n  &[data-expanded='false'] {\r\n    svg {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n`\r\n\r\nconst ContentWrapper = styled.div`\r\n  width: 100%;\r\n\r\n  &[data-expanded='false'] {\r\n    display: none;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  header: string | JSX.Element\r\n  expandedOnMount?: boolean\r\n  style?: CSSProperties\r\n  activeStyle?: CSSProperties\r\n  children: ReactNode\r\n  onExpand?: () => void\r\n  className?: string\r\n  arrowComponent?: ReactNode\r\n}\r\n\r\nexport const CollapseItem: React.FC<Props> = ({\r\n  header,\r\n  arrowComponent,\r\n  children,\r\n  expandedOnMount = false,\r\n  style = {},\r\n  className,\r\n}) => {\r\n  const [isExpanded, setExpanded] = useState(expandedOnMount)\r\n\r\n  return (\r\n    <ItemWrapper style={style} className={className}>\r\n      <Header\r\n        onClick={() => {\r\n          setExpanded(e => !e)\r\n        }}\r\n      >\r\n        {header}\r\n        <ArrowWrapper data-expanded={isExpanded}>{arrowComponent || <ChevronUp />}</ArrowWrapper>\r\n      </Header>\r\n      <ContentWrapper data-expanded={isExpanded}>{children}</ContentWrapper>\r\n    </ItemWrapper>\r\n  )\r\n}\r\n\r\nexport type ToggleItemType = { title: React.ReactNode; content: ReactNode | string }\r\n// open one, close the others\r\nconst ToggleCollapse = ({\r\n  data,\r\n  itemActiveStyle = {},\r\n  itemStyle = {},\r\n}: {\r\n  data: ToggleItemType[]\r\n  itemActiveStyle?: CSSProperties\r\n  itemStyle?: CSSProperties\r\n}) => {\r\n  const [expandedIndex, setExpandedIndex] = useState(0)\r\n  return (\r\n    <div>\r\n      {data.map((item, index) => {\r\n        const isActive = expandedIndex === index\r\n        return (\r\n          <ItemWrapper key={index} style={isActive ? { ...itemStyle, ...itemActiveStyle } : itemStyle}>\r\n            <Header\r\n              onClick={() => {\r\n                setExpandedIndex(isActive ? -1 : index)\r\n              }}\r\n            >\r\n              {item.title}\r\n              <ArrowWrapper data-expanded={isActive}>\r\n                <ChevronUp />\r\n              </ArrowWrapper>\r\n            </Header>\r\n            <ContentWrapper data-expanded={isActive}>{item.content}</ContentWrapper>\r\n          </ItemWrapper>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToggleCollapse\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\n\r\nimport { AutoColumn } from 'components/Column'\r\nimport { RowBetween } from 'components/Row'\r\n\r\nconst Wrapper = styled(AutoColumn)``\r\n\r\nconst Grouping = styled(RowBetween)`\r\n  width: 50%;\r\n`\r\n\r\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  background-color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.buttonGray : confirmed ? theme.green1 : theme.primary};\r\n  border-radius: 50%;\r\n  color: ${({ theme }) => theme.textReverse};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 8px;\r\n  font-size: 12px;\r\n`\r\n\r\nconst CircleRow = styled.div`\r\n  width: calc(100% - 20px);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ;\r\n  background: linear-gradient(\r\n    90deg,\r\n    ${({ theme, prevConfirmed, disabled }) =>\r\n        disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary)}\r\n      0%,\r\n    ${({ theme, prevConfirmed, disabled }) => (disabled ? theme.bg4 : prevConfirmed ? theme.primary : theme.bg4)} 80%\r\n  );\r\n  opacity: 0.6;\r\n`\r\n\r\ninterface ProgressCirclesProps {\r\n  steps: boolean[]\r\n  disabled?: boolean\r\n}\r\n\r\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\r\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\r\n  return (\r\n    <Wrapper justify={'center'} {...rest}>\r\n      <Grouping>\r\n        {steps.map((step, i) => {\r\n          return (\r\n            <CircleRow key={i}>\r\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\r\n                {step ? '✓' : i + 1}\r\n              </Circle>\r\n              <Connector prevConfirmed={step} disabled={disabled} />\r\n            </CircleRow>\r\n          )\r\n        })}\r\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\r\n      </Grouping>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { Currency, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { ReactComponent as DropdownSVG } from 'assets/svg/down.svg'\r\nimport { AutoColumn } from 'components/Column'\r\nimport Divider from 'components/Divider'\r\nimport InfoHelper from 'components/InfoHelper'\r\nimport { RowBetween, RowFixed } from 'components/Row'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { FeeConfig } from 'hooks/useSwapV2Callback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { OutputBridgeInfo, useBridgeState } from 'state/bridge/hooks'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { TYPE } from 'theme'\r\nimport { formattedNum } from 'utils'\r\nimport { Aggregator } from 'utils/aggregator'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport { getFormattedFeeAmountUsd } from 'utils/fee'\r\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\r\n\r\nconst IconWrapper = styled.div<{ show: boolean }>`\r\n  color: ${({ theme }) => theme.text};\r\n  transform: rotate(${({ show }) => (!show ? '0deg' : '-180deg')});\r\n  transition: transform 300ms;\r\n`\r\nconst ContentWrapper = styled(AutoColumn)<{ show: boolean }>`\r\n  max-height: ${({ show }) => (show ? '500px' : 0)};\r\n  margin-top: ${({ show }) => (show ? '12px' : 0)};\r\n  transition: margin-top 300ms ease, height 300ms ease;\r\n  overflow: hidden;\r\n`\r\n\r\ninterface TradeSummaryProps {\r\n  trade: Aggregator\r\n  allowedSlippage: number\r\n  feeConfig?: FeeConfig | undefined\r\n}\r\n\r\nfunction TradeSummary({ trade, feeConfig, allowedSlippage }: TradeSummaryProps) {\r\n  const { isEVM } = useActiveWeb3React()\r\n  const theme = useTheme()\r\n  const [show, setShow] = useState(feeConfig ? true : false)\r\n\r\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\r\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\r\n\r\n  const nativeInput = useCurrencyConvertedToNative(trade.inputAmount.currency as Currency)\r\n  const nativeOutput = useCurrencyConvertedToNative(trade.outputAmount.currency as Currency)\r\n\r\n  const formattedFeeAmountUsd = useMemo(() => getFormattedFeeAmountUsd(trade, feeConfig), [trade, feeConfig])\r\n\r\n  return (\r\n    <>\r\n      <AutoColumn>\r\n        <RowBetween style={{ cursor: 'pointer' }} onClick={() => setShow(prev => !prev)} role=\"button\">\r\n          <Text fontSize={12} fontWeight={500} color={theme.text}>\r\n            <Trans>MORE INFORMATION</Trans>\r\n          </Text>\r\n          <IconWrapper show={show}>\r\n            <DropdownSVG></DropdownSVG>\r\n          </IconWrapper>\r\n        </RowBetween>\r\n        <ContentWrapper show={show} gap=\"0.75rem\">\r\n          <Divider />\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                {isExactIn ? t`Minimum Received` : t`Maximum Sold`}\r\n              </TYPE.black>\r\n              <InfoHelper size={14} text={t`Minimum amount you will receive or your transaction will revert`} />\r\n            </RowFixed>\r\n            <RowFixed>\r\n              <TYPE.black color={theme.text} fontSize={12}>\r\n                {isExactIn\r\n                  ? !!slippageAdjustedAmounts[Field.OUTPUT]\r\n                    ? `${formattedNum(slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(10) || '0')} ${\r\n                        nativeOutput?.symbol\r\n                      }`\r\n                    : '-'\r\n                  : !!slippageAdjustedAmounts[Field.INPUT]\r\n                  ? `${formattedNum(slippageAdjustedAmounts[Field.INPUT]?.toSignificant(10) || '0')} ${\r\n                      nativeInput?.symbol\r\n                    }`\r\n                  : '-'}\r\n              </TYPE.black>\r\n            </RowFixed>\r\n          </RowBetween>\r\n          {isEVM && (\r\n            <RowBetween>\r\n              <RowFixed>\r\n                <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                  <Trans>Gas Fee</Trans>\r\n                </TYPE.black>\r\n\r\n                <InfoHelper size={14} text={t`Estimated network fee for your transaction`} />\r\n              </RowFixed>\r\n              <TYPE.black color={theme.text} fontSize={12}>\r\n                {trade.gasUsd ? formattedNum(trade.gasUsd?.toString(), true) : '--'}\r\n              </TYPE.black>\r\n            </RowBetween>\r\n          )}\r\n\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                <Trans>Price Impact</Trans>\r\n              </TYPE.black>\r\n              <InfoHelper size={14} text={t`Estimated change in price due to the size of your transaction`} />\r\n            </RowFixed>\r\n            <TYPE.black\r\n              fontSize={12}\r\n              color={trade.priceImpact > 15 ? theme.red : trade.priceImpact > 5 ? theme.warning : theme.text}\r\n            >\r\n              {trade.priceImpact === -1\r\n                ? '--'\r\n                : trade.priceImpact > 0.01\r\n                ? trade.priceImpact.toFixed(3) + '%'\r\n                : '< 0.01%'}\r\n            </TYPE.black>\r\n          </RowBetween>\r\n          {feeConfig && (\r\n            <RowBetween>\r\n              <RowFixed>\r\n                <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                  <Trans>Referral Fee</Trans>\r\n                </TYPE.black>\r\n                <InfoHelper size={14} text={t`Commission fee to be paid directly to your referrer`} />\r\n              </RowFixed>\r\n              <TYPE.black color={theme.text} fontSize={12}>\r\n                {formattedFeeAmountUsd}\r\n              </TYPE.black>\r\n            </RowBetween>\r\n          )}\r\n        </ContentWrapper>\r\n      </AutoColumn>\r\n    </>\r\n  )\r\n}\r\n\r\nexport interface AdvancedSwapDetailsProps {\r\n  trade?: Aggregator\r\n  feeConfig?: FeeConfig | undefined\r\n}\r\n\r\nexport function AdvancedSwapDetails({ trade, feeConfig }: AdvancedSwapDetailsProps) {\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  return trade ? <TradeSummary trade={trade} feeConfig={feeConfig} allowedSlippage={allowedSlippage} /> : null\r\n}\r\n\r\nexport function TradeSummaryBridge({ outputInfo }: { outputInfo: OutputBridgeInfo }) {\r\n  const theme = useTheme()\r\n  const [{ tokenInfoOut }] = useBridgeState()\r\n\r\n  const [show, setShow] = useState(true)\r\n  const fee = formattedNum(outputInfo?.fee?.toString(), false, 5)\r\n  return (\r\n    <>\r\n      <AutoColumn>\r\n        <RowBetween style={{ cursor: 'pointer' }} onClick={() => setShow(prev => !prev)} role=\"button\">\r\n          <Text fontSize={12} fontWeight={500} color={theme.text}>\r\n            <Trans>MORE INFORMATION</Trans>\r\n          </Text>\r\n          <IconWrapper show={show}>\r\n            <DropdownSVG></DropdownSVG>\r\n          </IconWrapper>\r\n        </RowBetween>\r\n        <ContentWrapper show={show} gap=\"0.75rem\">\r\n          <Divider />\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                {t`Estimated Processing Time`}\r\n              </TYPE.black>\r\n              <InfoHelper\r\n                size={14}\r\n                text={\r\n                  tokenInfoOut &&\r\n                  t`Crosschain amount larger than ${formattedNum(tokenInfoOut?.BigValueThreshold?.toString() ?? '0')} ${\r\n                    tokenInfoOut?.symbol\r\n                  } could take up to 12 hours`\r\n                }\r\n              />\r\n            </RowFixed>\r\n            <RowFixed>\r\n              <TYPE.black color={theme.text} fontSize={12}>\r\n                {tokenInfoOut ? outputInfo.time : '--'}\r\n              </TYPE.black>\r\n            </RowFixed>\r\n          </RowBetween>\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                <Trans>Transaction Fee</Trans>\r\n              </TYPE.black>\r\n\r\n              <InfoHelper\r\n                size={14}\r\n                text={\r\n                  !tokenInfoOut ? (\r\n                    t`Estimated network fee for your transaction`\r\n                  ) : (\r\n                    <>\r\n                      <Text color={theme.text}>\r\n                        <Trans>{tokenInfoOut?.SwapFeeRatePerMillion}% Transaction Fee</Trans>\r\n                      </Text>\r\n                      {tokenInfoOut?.MinimumSwapFee === tokenInfoOut?.MaximumSwapFee ? (\r\n                        outputInfo.fee > 0 && (\r\n                          <Text marginTop={'5px'}>\r\n                            <Trans>\r\n                              Gas Fee: {`${fee} ${tokenInfoOut.symbol} `}\r\n                              for your cross-chain transaction on destination chain\r\n                            </Trans>\r\n                          </Text>\r\n                        )\r\n                      ) : (\r\n                        <Text marginTop={'5px'}>\r\n                          <Trans>\r\n                            Min Transaction Fee is {formattedNum(tokenInfoOut.MinimumSwapFee)} {tokenInfoOut.symbol}{' '}\r\n                            <br />\r\n                            Max Transaction Fee is {formattedNum(tokenInfoOut.MaximumSwapFee)} {tokenInfoOut.symbol}\r\n                          </Trans>\r\n                        </Text>\r\n                      )}\r\n                    </>\r\n                  )\r\n                }\r\n              />\r\n            </RowFixed>\r\n            <TYPE.black color={theme.text} fontSize={12}>\r\n              {tokenInfoOut && outputInfo.fee ? `${fee} ${tokenInfoOut?.symbol}` : '--'}\r\n            </TYPE.black>\r\n          </RowBetween>\r\n\r\n          <RowBetween style={{ alignItems: 'flex-start' }}>\r\n            <RowFixed>\r\n              <TYPE.black fontSize={12} fontWeight={400} color={theme.subText}>\r\n                <Trans>Required Amount</Trans>\r\n              </TYPE.black>\r\n            </RowFixed>\r\n\r\n            <TYPE.black fontSize={12} color={theme.text} textAlign=\"right\">\r\n              {tokenInfoOut ? (\r\n                <Flex flexDirection={'column'} style={{ gap: 10 }}>\r\n                  <div>{t`Min ${formattedNum(tokenInfoOut?.MinimumSwap)} ${tokenInfoOut?.symbol}`}</div>\r\n                  <div> {t`Max ${formattedNum(tokenInfoOut?.MaximumSwap)} ${tokenInfoOut?.symbol}`}</div>\r\n                </Flex>\r\n              ) : (\r\n                '--'\r\n              )}\r\n            </TYPE.black>\r\n          </RowBetween>\r\n        </ContentWrapper>\r\n      </AutoColumn>\r\n    </>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { useLastTruthy } from 'hooks/useLast'\r\nimport { OutputBridgeInfo } from 'state/bridge/hooks'\r\n\r\nimport { AdvancedSwapDetails, AdvancedSwapDetailsProps, TradeSummaryBridge } from './AdvancedSwapDetails'\r\n\r\nconst AdvancedDetailsFooter = styled.div<{ show: boolean }>`\r\n  padding: ${({ show }) => (show ? '12px 16px' : '0')};\r\n  margin-top: ${({ show }) => (show ? '16px' : '0')};\r\n  width: 100%;\r\n  max-width: 425px;\r\n  border-radius: 16px;\r\n  color: ${({ theme }) => theme.text2};\r\n  background-color: ${({ theme }) => theme.background};\r\n  border: solid 1px ${({ theme }) => theme.border};\r\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(calc(-100% - 50px))')};\r\n  max-height: ${({ show }) => (show ? 'auto' : '0')};\r\n  transition: height 300ms ease-in-out, transform 300ms;\r\n  overflow: hidden;\r\n`\r\n\r\nexport default function AdvancedSwapDetailsDropdown({ trade, ...rest }: AdvancedSwapDetailsProps) {\r\n  const lastTrade = useLastTruthy(trade)\r\n\r\n  return (\r\n    <AdvancedDetailsFooter show={Boolean(trade)}>\r\n      <AdvancedSwapDetails {...rest} trade={trade ?? lastTrade ?? undefined} />\r\n    </AdvancedDetailsFooter>\r\n  )\r\n}\r\n\r\nexport function AdvancedSwapDetailsDropdownBridge({ outputInfo }: { outputInfo: OutputBridgeInfo }) {\r\n  return (\r\n    <AdvancedDetailsFooter show={true} style={{ marginTop: 0 }}>\r\n      <TradeSummaryBridge outputInfo={outputInfo} />\r\n    </AdvancedDetailsFooter>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport const BodyWrapper = styled.div`\r\n  position: relative;\r\n  max-width: 425px;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n  border-radius: 20px;\r\n  padding: 2rem 1.5rem 1.5rem 1.5rem;\r\n  margin-top: 20px;\r\n`\r\n\r\n/**\r\n * The styled container element that wraps the content of most pages and the tabs.\r\n */\r\nexport default function AppBody({ children, className }: { children: React.ReactNode; className?: string }) {\r\n  return <BodyWrapper className={className}>{children}</BodyWrapper>\r\n}\r\n","import useSWR from 'swr'\r\n\r\nexport enum MultichainTransferStatus {\r\n  Processing = 0,\r\n  Success = 1,\r\n  Failure = 2,\r\n}\r\n\r\nexport type MultichainTransfer = {\r\n  id: number\r\n  userAddress: string\r\n  srcChainId: string\r\n  dstChainId: string\r\n  srcTxHash: string\r\n  dstTxHash: string\r\n  srcTokenSymbol: string\r\n  dstTokenSymbol: string\r\n  srcAmount: string\r\n  dstAmount: string\r\n  status: number\r\n  createdAt: number\r\n}\r\n\r\ntype Response = {\r\n  code: number\r\n  message: string\r\n  data: {\r\n    transfers: MultichainTransfer[]\r\n    pagination: {\r\n      totalItems: number\r\n    }\r\n  }\r\n}\r\n\r\nconst useGetBridgeTransfers = (swrKey: string | null) => {\r\n  return useSWR<Response>(swrKey, async (url: string) => {\r\n    const response = await fetch(url)\r\n    if (response.ok) {\r\n      const data = await response.json()\r\n      if (data) {\r\n        return data\r\n      }\r\n\r\n      throw new Error(`No transfers found with url = ${swrKey}`)\r\n    }\r\n\r\n    throw new Error(`Fetching bridge transfers failed with url = ${swrKey}`)\r\n  })\r\n}\r\n\r\nexport default useGetBridgeTransfers\r\n","export const ITEMS_PER_PAGE = 10\r\nexport const FULL_DATE_FORMAT = 'DD MMM YYYY HH:mm'\r\nexport const ONLY_DATE_FORMAT = 'DD MMM YYYY'\r\nexport const ONLY_TIME_FORMAT = 'HH:mm'\r\n","import { rgba } from 'polished'\r\nimport { Flex } from 'rebass'\r\nimport styled, { css } from 'styled-components'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst ExternalLinkWrapper = styled.a<{ disabled: boolean }>`\r\n  width: 28px;\r\n  height: 28px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  background-color: ${({ theme }) => rgba(theme.subText, 0.2)};\r\n  border-radius: 999px;\r\n  color: ${({ theme }) => theme.subText};\r\n  transition: color 150ms;\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  ${({ disabled }) =>\r\n    disabled &&\r\n    css`\r\n      pointer-events: none;\r\n    `}\r\n`\r\n\r\ntype Props = {\r\n  url: string | undefined\r\n}\r\n\r\nconst ActionCell: React.FC<Props> = ({ url }) => {\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <WrapperActionCell>\r\n      <ExternalLinkWrapper href={url} target=\"_blank\" rel=\"noreferrer\" disabled={!url}>\r\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path\r\n            d=\"M10.0802 1.68689L10.9338 0.833333H9.72667H8C7.90948 0.833333 7.83333 0.757191 7.83333 0.666667C7.83333 0.576142 7.90948 0.5 8 0.5H11.3333C11.4239 0.5 11.5 0.576142 11.5 0.666667V4C11.5 4.09053 11.4239 4.16667 11.3333 4.16667C11.2428 4.16667 11.1667 4.09052 11.1667 4V2.27333V1.06623L10.3131 1.91978L4.22645 8.00645C4.16171 8.07118 4.05829 8.07118 3.99355 8.00645C3.92882 7.94171 3.92882 7.83829 3.99355 7.77355L10.0802 1.68689ZM2 11.1667H10C10.6428 11.1667 11.1667 10.6428 11.1667 10V6.66667C11.1667 6.57614 11.2428 6.5 11.3333 6.5C11.4239 6.5 11.5 6.57614 11.5 6.66667V10.6667C11.5 11.1239 11.1239 11.5 10.6667 11.5H1.33333C0.876142 11.5 0.5 11.1239 0.5 10.6667V1.33333C0.5 0.874513 0.871103 0.5 1.33333 0.5H5.33333C5.42386 0.5 5.5 0.576142 5.5 0.666667C5.5 0.757191 5.42386 0.833333 5.33333 0.833333H2C1.35719 0.833333 0.833333 1.35719 0.833333 2V10C0.833333 10.6428 1.35719 11.1667 2 11.1667Z\"\r\n            stroke={url ? theme.text : theme.subText}\r\n          />\r\n        </svg>\r\n      </ExternalLinkWrapper>\r\n    </WrapperActionCell>\r\n  )\r\n}\r\n\r\nconst WrapperActionCell = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nexport default ActionCell\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { t } from '@lingui/macro'\r\nimport { ChevronRight } from 'react-feather'\r\nimport { Box, Flex } from 'rebass'\r\nimport { useTheme } from 'styled-components'\r\n\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport { NETWORKS_INFO_CONFIG } from 'constants/networks'\r\nimport { useIsDarkMode } from 'state/user/hooks'\r\n\r\ntype Props = {\r\n  fromChainID: number\r\n  toChainID: number\r\n}\r\nconst RouteCell: React.FC<Props> = ({ fromChainID, toChainID }) => {\r\n  const isDark = useIsDarkMode()\r\n  const theme = useTheme()\r\n\r\n  const renderChainIcon = (chainId: ChainId) => {\r\n    const chainInfo = NETWORKS_INFO_CONFIG[chainId]\r\n    if (chainInfo) {\r\n      const src = isDark && chainInfo.iconDark ? chainInfo.iconDark : chainInfo.icon\r\n      return <img src={src} alt={chainInfo.name} style={{ width: '18px' }} />\r\n    }\r\n\r\n    return (\r\n      <Box\r\n        sx={{\r\n          // QuestionHelper has an intrinsic marginLeft of 0.25rem\r\n          marginLeft: '-0.25rem',\r\n        }}\r\n      >\r\n        <QuestionHelper placement=\"top\" size={18} text={t`ChainId: ${chainId} not supported`} />\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      sx={{\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {renderChainIcon(fromChainID as ChainId)}\r\n      <ChevronRight\r\n        style={{\r\n          marginLeft: '4px',\r\n          marginRight: '2px',\r\n        }}\r\n        width=\"16px\"\r\n        height=\"16px\"\r\n        color={theme.subText}\r\n      />\r\n      {renderChainIcon(toChainID as ChainId)}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RouteCell\r\n","import { rgba } from 'polished'\r\nimport { Text } from 'rebass'\r\nimport styled, { css } from 'styled-components'\r\n\r\nimport { CheckCircle, TransferIcon, XCircle } from 'components/Icons'\r\nimport { MultichainTransferStatus } from 'hooks/bridge/useGetBridgeTransfers'\r\n\r\nimport { getLabelByStatus } from '../utils'\r\n\r\nconst cssByStatus: Record<MultichainTransferStatus, any> = {\r\n  [MultichainTransferStatus.Success]: css`\r\n    background: ${({ theme }) => rgba(theme.primary, 0.2)};\r\n    color: ${({ theme }) => theme.primary};\r\n  `,\r\n  [MultichainTransferStatus.Failure]: css`\r\n    background: ${({ theme }) => rgba(theme.red, 0.2)};\r\n    color: ${({ theme }) => theme.red};\r\n  `,\r\n  [MultichainTransferStatus.Processing]: css`\r\n    background: ${({ theme }) => rgba(theme.warning, 0.2)};\r\n    color: ${({ theme }) => theme.warning};\r\n  `,\r\n}\r\n\r\nconst Wrapper = styled.div<{ status: MultichainTransferStatus; iconOnly: boolean }>`\r\n  width: 100%;\r\n  padding: 4px 8px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n\r\n  border-radius: 24px;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n\r\n  overflow: hidden;\r\n\r\n  ${({ status }) => cssByStatus[status]}\r\n  ${({ iconOnly }) =>\r\n    iconOnly &&\r\n    css`\r\n      padding: 0;\r\n      width: 20px;\r\n      height: 20px;\r\n    `}\r\n`\r\n\r\ntype Props = {\r\n  status: MultichainTransferStatus\r\n  iconOnly?: boolean\r\n}\r\nconst StatusBadge: React.FC<Props> = ({ status, iconOnly }) => {\r\n  const label = getLabelByStatus(status)\r\n\r\n  const renderIcon = () => {\r\n    if (status === MultichainTransferStatus.Success) {\r\n      return <CheckCircle size=\"12px\" />\r\n    }\r\n\r\n    if (status === MultichainTransferStatus.Failure) {\r\n      return <XCircle size=\"12px\" />\r\n    }\r\n\r\n    if (status === MultichainTransferStatus.Processing) {\r\n      return <TransferIcon width=\"12px\" height=\"12px\" />\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper iconOnly={!!iconOnly} status={status}>\r\n      {renderIcon()}\r\n      {!iconOnly && (\r\n        <Text\r\n          as=\"span\"\r\n          sx={{\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap',\r\n          }}\r\n        >\r\n          {label}\r\n        </Text>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StatusBadge\r\n","import { t } from '@lingui/macro'\r\n\r\nimport { MultichainTransferStatus } from 'hooks/bridge/useGetBridgeTransfers'\r\n\r\nexport const getLabelByStatus = (status: MultichainTransferStatus): string => {\r\n  const labelByGeneralStatus: Record<MultichainTransferStatus, string> = {\r\n    [MultichainTransferStatus.Success]: t`Success`,\r\n    [MultichainTransferStatus.Failure]: t`Failed`,\r\n    [MultichainTransferStatus.Processing]: t`Processing`,\r\n  }\r\n\r\n  return labelByGeneralStatus[status]\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport dayjs from 'dayjs'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nimport { ONLY_DATE_FORMAT, ONLY_TIME_FORMAT } from '../consts'\r\n\r\ntype Props = {\r\n  timestamp?: number | ''\r\n}\r\n\r\nconst TimeCell: React.FC<Props> = ({ timestamp }) => {\r\n  const dateString = timestamp ? dayjs.utc(timestamp).local().format(ONLY_DATE_FORMAT) : ''\r\n  const timeString = timestamp ? dayjs.utc(timestamp).local().format(ONLY_TIME_FORMAT) : ''\r\n\r\n  const theme = useTheme()\r\n  return (\r\n    <Flex\r\n      sx={{\r\n        fontWeight: 500,\r\n        fontSize: '12px',\r\n        lineHeight: '16px',\r\n        color: theme.subText,\r\n        justifyContent: 'space-between',\r\n      }}\r\n    >\r\n      {timeString ? (\r\n        <>\r\n          <Text as=\"span\">\r\n            <Text\r\n              as=\"span\"\r\n              sx={{\r\n                display: 'inline-block',\r\n                width: '70px',\r\n                marginRight: '6px',\r\n                whiteSpace: 'nowrap',\r\n              }}\r\n            >\r\n              {dateString}\r\n            </Text>\r\n          </Text>\r\n\r\n          <Text as=\"span\">{timeString}</Text>\r\n        </>\r\n      ) : (\r\n        <Text as=\"span\">\r\n          <Trans>Unknown</Trans>\r\n        </Text>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TimeCell\r\n","import { t } from '@lingui/macro'\r\nimport dayjs from 'dayjs'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nimport { FULL_DATE_FORMAT } from '../consts'\r\n\r\ntype Props = {\r\n  timestamp?: number | ''\r\n}\r\nconst TimeStatusCell: React.FC<Props> = ({ timestamp }) => {\r\n  const dateString = timestamp ? dayjs.utc(timestamp).local().format(FULL_DATE_FORMAT) : ''\r\n  const theme = useTheme()\r\n  return (\r\n    <Flex\r\n      sx={{\r\n        fontWeight: 500,\r\n        fontSize: '12px',\r\n        lineHeight: '16px',\r\n        color: theme.subText,\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n      }}\r\n    >\r\n      <Text\r\n        as=\"span\"\r\n        sx={{\r\n          whiteSpace: 'nowrap',\r\n        }}\r\n      >\r\n        {dateString || t`Unknown`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TimeStatusCell\r\n","import { Text } from 'rebass'\r\n\r\nimport { MultichainTransfer } from 'hooks/bridge/useGetBridgeTransfers'\r\nimport { formatNumberWithPrecisionRange } from 'utils'\r\n\r\ntype Props = {\r\n  transfer: MultichainTransfer\r\n}\r\n\r\nconst TokenReceiveCell: React.FC<Props> = ({ transfer }) => {\r\n  return (\r\n    <Text\r\n      as=\"span\"\r\n      sx={{\r\n        fontWeight: 500,\r\n        fontSize: '12px',\r\n        lineHeight: '16px',\r\n      }}\r\n    >\r\n      {formatNumberWithPrecisionRange(parseFloat(transfer.dstAmount.toString() ?? '0'), 0, 6)} {transfer.dstTokenSymbol}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default TokenReceiveCell\r\n","import { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { KS_SETTING_API } from 'constants/env'\r\nimport useGetBridgeTransfers from 'hooks/bridge/useGetBridgeTransfers'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport { setHistoryURL } from 'state/bridge/actions'\r\n\r\nimport { ITEMS_PER_PAGE } from '../consts'\r\n\r\nconst useTransferHistory = (account: string) => {\r\n  const dispatch = useDispatch()\r\n  const [page, setPage] = useState(1)\r\n\r\n  const { account: accountInParams } = useParsedQueryString()\r\n  const fetchAccount = accountInParams || account\r\n  const swrKey = fetchAccount\r\n    ? `${KS_SETTING_API}/v1/multichain-transfers?userAddress=${fetchAccount}&page=${page}&pageSize=${ITEMS_PER_PAGE}`\r\n    : ''\r\n  const { data, isValidating, error } = useGetBridgeTransfers(swrKey)\r\n\r\n  const transfers = useMemo(() => {\r\n    if (data) return data.data.transfers\r\n    return []\r\n  }, [data])\r\n\r\n  const canGoPrevious = page !== 1\r\n  const maxPage = data?.data?.pagination?.totalItems\r\n    ? Math.floor((data.data.pagination.totalItems - 1) / ITEMS_PER_PAGE) + 1\r\n    : 1\r\n  const canGoNext = page < maxPage\r\n\r\n  const onClickPrevious = () => {\r\n    if (!canGoPrevious) {\r\n      return\r\n    }\r\n    setPage(page - 1)\r\n  }\r\n\r\n  const onClickNext = () => {\r\n    if (!canGoNext) {\r\n      return\r\n    }\r\n    setPage(page + 1)\r\n  }\r\n\r\n  const range = useMemo(() => [ITEMS_PER_PAGE * (page - 1) + 1, Math.min(ITEMS_PER_PAGE * page)], [page])\r\n\r\n  useEffect(() => {\r\n    dispatch(setHistoryURL(swrKey))\r\n  }, [dispatch, swrKey])\r\n\r\n  return {\r\n    range,\r\n    transfers,\r\n    isValidating,\r\n    error,\r\n    canGoNext,\r\n    canGoPrevious,\r\n    onClickNext,\r\n    onClickPrevious,\r\n    isCompletelyEmpty: page === 1 && transfers.length === 0,\r\n  }\r\n}\r\n\r\nexport default useTransferHistory\r\n","import { Trans } from '@lingui/macro'\r\nimport { rgba } from 'polished'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { ChevronLeft, ChevronRight, Info } from 'react-feather'\r\nimport { useMedia } from 'react-use'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled, { css } from 'styled-components'\r\n\r\nimport LocalLoader from 'components/LocalLoader'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { MEDIA_WIDTHS } from 'theme'\r\n\r\nimport { ITEMS_PER_PAGE } from '../consts'\r\nimport ActionCell from './ActionCell'\r\nimport RouteCell from './RouteCell'\r\nimport StatusBadge from './StatusBadge'\r\nimport TimeCell from './TimeCell'\r\nimport TimeStatusCell from './TimeStatusCell'\r\nimport TokenReceiveCell from './TokenReceiveCell'\r\nimport useTransferHistory from './useTransferHistory'\r\n\r\nconst commonCSS = css`\r\n  width: 100%;\r\n  padding: 0 16px;\r\n\r\n  display: grid;\r\n  grid-template-columns: 112px 100px 80px 150px 48px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToLarge`\r\n    column-gap: 4px;\r\n    grid-template-columns: 112px 100px 64px minmax(auto, 130px) 48px;\r\n  `}\r\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\r\n    column-gap: 16px;\r\n    grid-template-columns: 156px 64px minmax(auto, 130px) 28px;\r\n  `}\r\n`\r\n\r\nconst TableHeader = styled.div`\r\n  ${commonCSS}\r\n  height: 48px;\r\n  background: ${({ theme }) => theme.tableHeader};\r\n  border-radius: 20px 20px 0 0;\r\n`\r\n\r\nconst TableColumnText = styled.div`\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.subText};\r\n`\r\n\r\nconst TableRow = styled.div`\r\n  ${commonCSS}\r\n  height: 60px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.border};\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`\r\n\r\nconst PaginationButton = styled.button`\r\n  flex: 0 0 36px;\r\n  height: 36px;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  border: none;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n  border-radius: 999px;\r\n  color: ${({ theme }) => theme.subText};\r\n  background: ${({ theme }) => theme.buttonGray};\r\n  transition: color 150ms;\r\n\r\n  &:active {\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      color: ${({ theme }) => theme.text};\r\n    }\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => rgba(theme.subText, 0.4)};\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  className?: string\r\n}\r\nconst TransferHistory: React.FC<Props> = ({ className }) => {\r\n  const upToExtraSmall = useMedia(`(max-width: ${MEDIA_WIDTHS.upToExtraSmall}px)`)\r\n  const upToMedium = useMedia(`(max-width: ${MEDIA_WIDTHS.upToMedium}px)`)\r\n  const theme = useTheme()\r\n  const { account } = useActiveWeb3React()\r\n  const [shouldShowLoading, setShouldShowLoading] = useState(true)\r\n  const { isCompletelyEmpty, range, transfers, canGoNext, canGoPrevious, onClickNext, onClickPrevious } =\r\n    useTransferHistory(account || '')\r\n\r\n  const isThisPageEmpty = transfers.length === 0\r\n\r\n  const timeOutRef = useRef<ReturnType<typeof setTimeout>>()\r\n  useEffect(() => {\r\n    // This is to ensure loading is displayed at least 0.5s\r\n    const existingTimeout = timeOutRef.current\r\n    timeOutRef.current = setTimeout(() => {\r\n      setShouldShowLoading(false)\r\n    }, 500)\r\n    return () => {\r\n      existingTimeout && clearTimeout(existingTimeout)\r\n    }\r\n  }, [])\r\n\r\n  // toast error\r\n  if (shouldShowLoading) {\r\n    return <LocalLoader />\r\n  }\r\n\r\n  if (isCompletelyEmpty) {\r\n    return (\r\n      <Flex\r\n        sx={{\r\n          width: '100%',\r\n          height: '180px', // to match the Loader's height\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          color: theme.subText,\r\n          gap: '16px',\r\n        }}\r\n      >\r\n        <Info size={48} />\r\n        <Text\r\n          sx={{\r\n            fontWeight: 400,\r\n            fontSize: '16px',\r\n            lineHeight: '24px',\r\n          }}\r\n        >\r\n          <Trans>You haven&apos;t made any transfers yet</Trans>\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const renderInvisibleRows = () => {\r\n    if (transfers.length === ITEMS_PER_PAGE) {\r\n      return null\r\n    }\r\n    if (!upToMedium) {\r\n      return Array(ITEMS_PER_PAGE - transfers.length)\r\n        .fill(0)\r\n        .map((_, i) => {\r\n          return (\r\n            <TableRow\r\n              key={i}\r\n              style={{\r\n                visibility: 'hidden',\r\n              }}\r\n            />\r\n          )\r\n        })\r\n    }\r\n    return null\r\n  }\r\n\r\n  const getTxsUrl = (txHash: string) => `https://anyswap.net/explorer/tx?params=${txHash}`\r\n\r\n  const renderTable = () => {\r\n    if (upToExtraSmall) {\r\n      return (\r\n        <>\r\n          <TableHeader>\r\n            <TableColumnText>\r\n              <Trans>DATE | STATUS</Trans>\r\n            </TableColumnText>\r\n            <TableColumnText>\r\n              <Trans>ROUTE</Trans>\r\n            </TableColumnText>\r\n            <TableColumnText>\r\n              <Trans>AMOUNT</Trans>\r\n            </TableColumnText>\r\n            <TableColumnText />\r\n          </TableHeader>\r\n          {transfers.map((transfer, i) => (\r\n            <TableRow key={i}>\r\n              <Flex style={{ gap: '8px' }}>\r\n                <TimeStatusCell timestamp={transfer.createdAt * 1000} />\r\n                <StatusBadge status={transfer.status} iconOnly />\r\n              </Flex>\r\n              <RouteCell fromChainID={Number(transfer.srcChainId)} toChainID={Number(transfer.dstChainId)} />\r\n              <TokenReceiveCell transfer={transfer} />\r\n              <ActionCell url={getTxsUrl(transfer.srcTxHash)} />\r\n            </TableRow>\r\n          ))}\r\n          {renderInvisibleRows()}\r\n        </>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <TableHeader>\r\n          <TableColumnText>\r\n            <Trans>CREATED</Trans>\r\n          </TableColumnText>\r\n          <TableColumnText>\r\n            <Trans>STATUS</Trans>\r\n          </TableColumnText>\r\n          <TableColumnText>\r\n            <Trans>ROUTE</Trans>\r\n          </TableColumnText>\r\n          <TableColumnText>\r\n            <Trans>RECEIVED AMOUNT</Trans>\r\n          </TableColumnText>\r\n          <TableColumnText>\r\n            <Trans>ACTION</Trans>\r\n          </TableColumnText>\r\n        </TableHeader>\r\n        {transfers.map((transfer, i) => (\r\n          <TableRow key={i}>\r\n            <TimeCell timestamp={transfer.createdAt * 1000} />\r\n            <StatusBadge status={transfer.status} />\r\n            <RouteCell fromChainID={Number(transfer.srcChainId)} toChainID={Number(transfer.dstChainId)} />\r\n            <TokenReceiveCell transfer={transfer} />\r\n            <ActionCell url={getTxsUrl(transfer.srcTxHash)} />\r\n          </TableRow>\r\n        ))}\r\n        {renderInvisibleRows()}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Flex flexDirection=\"column\" style={{ flex: 1 }}>\r\n        {renderTable()}\r\n      </Flex>\r\n      <Flex\r\n        sx={{\r\n          width: '100%',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          padding: '16px 0',\r\n          gap: '12px',\r\n          borderTop: `1px solid ${theme.border}`,\r\n        }}\r\n      >\r\n        <PaginationButton disabled={!canGoPrevious} onClick={onClickPrevious}>\r\n          <ChevronLeft width={18} />\r\n        </PaginationButton>\r\n\r\n        <Flex\r\n          sx={{\r\n            width: '120px',\r\n            fontSize: '12px',\r\n            color: theme.subText,\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          {isThisPageEmpty ? '-' : `${range[0]} - ${range[1]}`}\r\n        </Flex>\r\n\r\n        <PaginationButton disabled={!canGoNext} onClick={onClickNext}>\r\n          <ChevronRight width={18} />\r\n        </PaginationButton>\r\n      </Flex>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(TransferHistory)`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background: ${({ theme }) => rgba(theme.background, 0.3)};\r\n  border-radius: 20px;\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nimport useMixpanel, { MIXPANEL_TYPE } from 'hooks/useMixpanel'\r\n\r\nconst TabItem = styled.div<{ isActive?: boolean }>`\r\n  text-align: center;\r\n  height: fit-content;\r\n  padding: 4px 12px;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  color: ${({ theme }) => theme.subText};\r\n  user-select: none;\r\n  border-radius: 20px;\r\n  transition: all 150ms;\r\n  ${({ isActive, theme }) =>\r\n    isActive &&\r\n    css`\r\n      font-weight: 500;\r\n      text-align: center;\r\n      color: ${theme.text};\r\n      background: ${theme.buttonGray};\r\n    `}\r\n`\r\n\r\ntype Props = {\r\n  className?: string\r\n}\r\n\r\nconst TabSelector: React.FC<Props> = ({ className }) => {\r\n  const { mixpanelHandler } = useMixpanel()\r\n  return (\r\n    <div className={className}>\r\n      <TabItem\r\n        isActive={true}\r\n        role=\"button\"\r\n        onClick={() => {\r\n          mixpanelHandler(MIXPANEL_TYPE.BRIDGE_CLICK_HISTORY_TRANSFER_TAB)\r\n        }}\r\n      >\r\n        Transfer History\r\n      </TabItem>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(TabSelector)`\r\n  width: 100%;\r\n  height: 46px; // to make it align with the swap container\r\n  display: flex;\r\n  gap: 16px;\r\n  align-items: center;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nimport BridgeTransferHistory from '../BridgeTransferHistory'\r\nimport TabSelector from './TabSelector'\r\n\r\ntype Props = {\r\n  className?: string\r\n}\r\n\r\nconst BridgeHistory: React.FC<Props> = ({ className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <TabSelector />\r\n      <BridgeTransferHistory />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(BridgeHistory)`\r\n  width: 100%;\r\n  flex: 1;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 22px;\r\n`\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { t } from '@lingui/macro'\r\nimport axios from 'axios'\r\n\r\nimport { NETWORKS_INFO_CONFIG } from 'constants/networks'\r\nimport { formatNumberWithPrecisionRange, isAddress } from 'utils'\r\n\r\nimport { MultiChainTokenInfo } from './type'\r\n\r\nexport const BridgeLocalStorageKeys = {\r\n  BRIDGE_INFO: 'bridgeInfo',\r\n  SHOWED_DISCLAIMED: 'showedDisclaimed',\r\n  CHAINS_SUPPORTED: 'chainSupported',\r\n  TOKEN_VERSION: 'tokenVer',\r\n  TOKEN_LIST: 'bridgeTokenList',\r\n}\r\n\r\nexport const getBridgeLocalstorage = (key: string) => {\r\n  const bridgeInfo: { [key: string]: any } = JSON.parse(\r\n    localStorage.getItem(BridgeLocalStorageKeys.BRIDGE_INFO) || '{}',\r\n  )\r\n  return bridgeInfo?.[key]\r\n}\r\nexport const setBridgeLocalstorage = (key: string, value: any) => {\r\n  const bridgeInfo: { [key: string]: any } = JSON.parse(\r\n    localStorage.getItem(BridgeLocalStorageKeys.BRIDGE_INFO) || '{}',\r\n  )\r\n  localStorage.setItem(BridgeLocalStorageKeys.BRIDGE_INFO, JSON.stringify({ ...bridgeInfo, [key]: value }))\r\n}\r\n\r\nconst MULTICHAIN_API = `https://bridgeapi.multichain.org`\r\nconst fetchListChainSupport = () => {\r\n  return axios.get(`${MULTICHAIN_API}/data/bridgeChainInfo`).then(data => data.data)\r\n}\r\nconst fetchListTokenByChain = (chainId: ChainId) => {\r\n  return axios.get(`${MULTICHAIN_API}/v4/tokenlistv4/${chainId}`).then(data => data.data)\r\n}\r\n\r\nexport const fetchTokenVersion = () => {\r\n  return axios.get(`${MULTICHAIN_API}/token/version`).then(data => data.data)\r\n}\r\n\r\nconst getTokenListCache = () => {\r\n  try {\r\n    let local: any = localStorage.getItem(BridgeLocalStorageKeys.TOKEN_LIST) || '{}'\r\n    local = JSON.parse(local)\r\n    return local\r\n  } catch (error) {\r\n    return {}\r\n  }\r\n}\r\nconst filterTokenList = (tokens: { [key: string]: MultiChainTokenInfo }) => {\r\n  try {\r\n    // filter wrong address, to reduce trash token and local storage size\r\n    Object.keys(tokens).forEach(key => {\r\n      const token = { ...tokens[key] }\r\n      const { destChains = {} } = token\r\n      let hasChainSupport = false\r\n      Object.keys(destChains).forEach((chain: string) => {\r\n        Object.keys(destChains[chain]).forEach(address => {\r\n          const info = destChains[chain][address]\r\n          info.chainId = Number(info.chainId)\r\n          if (!isAddress(info.chainId, info.address)) {\r\n            delete destChains[chain][address]\r\n          }\r\n        })\r\n        if (NETWORKS_INFO_CONFIG[chain as unknown as keyof typeof NETWORKS_INFO_CONFIG]) {\r\n          hasChainSupport = true\r\n        }\r\n        if (!Object.keys(destChains[chain]).length) {\r\n          delete destChains[chain]\r\n        }\r\n      })\r\n      if (!hasChainSupport || !Object.keys(destChains).length) {\r\n        delete tokens[key]\r\n      }\r\n    })\r\n  } catch (error) {}\r\n  return tokens\r\n}\r\nexport async function getTokenlist(chainId: ChainId, isStaleData: boolean) {\r\n  let tokens\r\n  let local: any\r\n  try {\r\n    local = getTokenListCache()\r\n    if (local[chainId] && Object.keys(local[chainId]).length && !isStaleData) {\r\n      return local[chainId]\r\n    }\r\n    tokens = await fetchListTokenByChain(chainId)\r\n    tokens = filterTokenList(tokens)\r\n    local = getTokenListCache() // make sure get latest data\r\n    try {\r\n      localStorage.setItem(BridgeLocalStorageKeys.TOKEN_LIST, JSON.stringify({ ...local, [chainId]: tokens }))\r\n    } catch (error) {\r\n      console.log('overflow localstorage QuotaExceededError')\r\n      localStorage.removeItem(BridgeLocalStorageKeys.TOKEN_LIST)\r\n      localStorage.setItem(BridgeLocalStorageKeys.TOKEN_LIST, JSON.stringify({ [chainId]: tokens }))\r\n    }\r\n    return tokens\r\n  } catch (e) {\r\n    console.log(e.toString())\r\n    return local?.[chainId] || {}\r\n  }\r\n}\r\n\r\nexport async function getChainlist(isStaleData: boolean) {\r\n  let chainIds: number[] = []\r\n  try {\r\n    chainIds = getBridgeLocalstorage(BridgeLocalStorageKeys.CHAINS_SUPPORTED)\r\n    if (chainIds && !isStaleData) {\r\n      return chainIds\r\n    }\r\n    const tokens = await fetchListChainSupport()\r\n    const filter = Object.keys(tokens)\r\n      .map(Number)\r\n      .filter(id => !!NETWORKS_INFO_CONFIG[id as ChainId])\r\n    setBridgeLocalstorage(BridgeLocalStorageKeys.CHAINS_SUPPORTED, filter)\r\n    return filter\r\n  } catch (e) {\r\n    console.log(e)\r\n    return chainIds || []\r\n  }\r\n}\r\n\r\nexport const formatPoolValue = (amount: string | number | undefined) => {\r\n  try {\r\n    if (amount === undefined) return t`Unlimited`\r\n    if (Number(amount) && amount) return formatNumberWithPrecisionRange(parseFloat(amount + ''), 0, 2)\r\n  } catch (error) {}\r\n  return '0'\r\n}\r\n","import { Trans, t } from '@lingui/macro'\r\nimport { useState } from 'react'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { ButtonWarning } from 'components/Button'\r\nimport { ModalCenter } from 'components/Modal'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ExternalLink } from 'theme'\r\n\r\nimport { BridgeLocalStorageKeys, getBridgeLocalstorage, setBridgeLocalstorage } from './helpers'\r\n\r\nconst Container = styled.div`\r\n  padding: 25px 30px;\r\n`\r\nconst TextWrapper = styled.p`\r\n  line-height: 20px;\r\n  font-size: 14px;\r\n`\r\nexport default function Disclaimer() {\r\n  const showed = getBridgeLocalstorage(BridgeLocalStorageKeys.SHOWED_DISCLAIMED)\r\n  const [show, setShow] = useState(!showed)\r\n  const theme = useTheme()\r\n\r\n  const onDismiss = () => {\r\n    setBridgeLocalstorage(BridgeLocalStorageKeys.SHOWED_DISCLAIMED, '1')\r\n    setShow(false)\r\n  }\r\n  return (\r\n    <ModalCenter isOpen={show}>\r\n      <Container>\r\n        <Flex justifyContent={'space-between'}>\r\n          <Flex color={theme.warning} alignItems=\"center\" style={{ gap: 8 }}>\r\n            <AlertTriangle size={20} /> <Text fontSize={20}>{t`Disclaimer`}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper>\r\n          <Trans>\r\n            KyberSwap strives to offer its users the best DeFi experience on a single platform. In order to do that,\r\n            KyberSwap partners with 3rd party platforms like Multichain.\r\n          </Trans>\r\n        </TextWrapper>\r\n        <TextWrapper>\r\n          <Trans>\r\n            <ExternalLink href=\"https://multichain.org/\">Multichain</ExternalLink> is a well-known cross-chain router\r\n            protocol that facilitates transfer of tokens between chains. However, in the event of a security breach on\r\n            our partners platform, KyberSwap won&apos;t assume any liability for any losses incurred.\r\n          </Trans>\r\n        </TextWrapper>\r\n        <ButtonWarning style={{ marginTop: 20 }} onClick={onDismiss}>\r\n          <Trans>I Understand</Trans>\r\n        </ButtonWarning>\r\n      </Container>\r\n    </ModalCenter>\r\n  )\r\n}\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowUp(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 22L16 18L13 18L13 3L11 3L11 18L8.00003 18L12 22Z\",\n    fill: \"#A9A9A9\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowUp);\nexport default __webpack_public_path__ + \"static/media/arrow_up.2b2ea593.svg\";\nexport { ForwardRef as ReactComponent };","import { Currency, CurrencyAmount } from '@kyberswap/ks-sdk-core'\r\nimport { CSSProperties, memo, useCallback } from 'react'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport { FixedSizeList } from 'react-window'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\nimport { formatPoolValue } from 'pages/Bridge/helpers'\r\nimport { MultiChainTokenInfo } from 'pages/Bridge/type'\r\nimport { useBridgeState } from 'state/bridge/hooks'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\nimport { useCurrencyBalances } from 'state/wallet/hooks'\r\n\r\nimport { CurrencyRow, getDisplayTokenInfo } from '../CurrencyList'\r\n\r\ninterface TokenRowPropsBridge {\r\n  currency: WrappedTokenInfo | undefined\r\n  currencyBalance: CurrencyAmount<Currency>\r\n  style: CSSProperties\r\n}\r\n\r\nconst CurrencyListBridge = memo(function CurrencyListV2({\r\n  currencies,\r\n  isOutput,\r\n  onCurrencySelect,\r\n  listTokenRef,\r\n}: {\r\n  currencies: WrappedTokenInfo[]\r\n  onCurrencySelect: (currency: WrappedTokenInfo) => void\r\n  isOutput: boolean | undefined\r\n  listTokenRef: React.Ref<HTMLDivElement>\r\n}) {\r\n  const [{ tokenInfoIn, tokenInfoOut, poolValueOutMap }] = useBridgeState()\r\n  const currencyBalances = useCurrencyBalances(!isOutput ? currencies : [])\r\n  const theme = useTheme()\r\n\r\n  const Row: any = useCallback(\r\n    function TokenRow({ style, currency, currencyBalance }: TokenRowPropsBridge) {\r\n      if (!currency) return\r\n      const isSelected =\r\n        tokenInfoIn?.address?.toLowerCase() === currency?.address?.toLowerCase() ||\r\n        tokenInfoOut?.sortId === currency?.multichainInfo?.sortId\r\n      const handleSelect = () => currency && onCurrencySelect(currency)\r\n      const { symbol } = getDisplayTokenInfo(currency)\r\n      const { sortId, type, anytoken } = (currency?.multichainInfo || {}) as Partial<MultiChainTokenInfo>\r\n      const poolLiquidity = isOutput && anytoken?.address ? formatPoolValue(poolValueOutMap?.[anytoken?.address]) : 0\r\n\r\n      return (\r\n        <CurrencyRow\r\n          showBalance={!isOutput}\r\n          showFavoriteIcon={false}\r\n          style={style}\r\n          currency={currency}\r\n          currencyBalance={currencyBalance}\r\n          isSelected={isSelected}\r\n          onSelect={handleSelect}\r\n          otherSelected={false}\r\n          poolLiquidity={poolLiquidity}\r\n          customName={\r\n            sortId !== undefined ? (\r\n              <Flex>\r\n                {symbol}&nbsp;\r\n                <Text color={theme.subText} fontWeight=\"normal\">\r\n                  {`${['swapin', 'swapout'].includes(type ?? '') ? '(Bridge)' : `(Router ${sortId})`}`}\r\n                </Text>\r\n              </Flex>\r\n            ) : null\r\n          }\r\n        />\r\n      )\r\n    },\r\n    [onCurrencySelect, tokenInfoIn, isOutput, tokenInfoOut, theme, poolValueOutMap],\r\n  )\r\n\r\n  return (\r\n    <div style={{ flex: '1', overflow: 'hidden', height: '100%' }}>\r\n      {isOutput ? (\r\n        currencies.map((item, index) => (\r\n          <Row index={index} currency={item} key={index} currencyBalance={currencyBalances[index]} />\r\n        ))\r\n      ) : (\r\n        <AutoSizer>\r\n          {({ height, width }) => (\r\n            <FixedSizeList\r\n              height={height}\r\n              width={width}\r\n              itemSize={56}\r\n              itemCount={currencies.length}\r\n              itemData={currencies}\r\n              outerRef={listTokenRef}\r\n            >\r\n              {({ data, index, style }) => (\r\n                <Row\r\n                  index={index}\r\n                  currency={data[index]}\r\n                  key={data[index]?.address || index}\r\n                  currencyBalance={currencyBalances[index]}\r\n                  style={style}\r\n                />\r\n              )}\r\n            </FixedSizeList>\r\n          )}\r\n        </AutoSizer>\r\n      )}\r\n    </div>\r\n  )\r\n})\r\nexport default CurrencyListBridge\r\n","import { Trans, t } from '@lingui/macro'\r\nimport { ChangeEvent, KeyboardEvent, useCallback, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport InfoHelper from 'components/InfoHelper'\r\nimport { RowBetween } from 'components/Row'\r\nimport { ContentWrapper, NoResult } from 'components/SearchModal/CurrencySearch'\r\nimport CurrencyListBridge from 'components/SearchModal/bridge/CurrencyListBridge'\r\nimport { useTokenComparator } from 'components/SearchModal/sorting'\r\nimport { PaddedColumn, SearchIcon, SearchInput, SearchWrapper, Separator } from 'components/SearchModal/styleds'\r\nimport { Z_INDEXS } from 'constants/styles'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useDebounce from 'hooks/useDebounce'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToggle from 'hooks/useToggle'\r\nimport { useBridgeState } from 'state/bridge/hooks'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\nimport { CloseIcon, ExternalLink } from 'theme'\r\nimport { isAddress } from 'utils'\r\nimport { filterTokens } from 'utils/filtering'\r\n\r\ninterface CurrencySearchBridgeProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  isOutput?: boolean\r\n  onCurrencySelect: (currency: WrappedTokenInfo) => void\r\n}\r\n\r\nexport default function CurrencySearchBridge({\r\n  isOutput,\r\n  onCurrencySelect,\r\n  onDismiss,\r\n  isOpen,\r\n}: CurrencySearchBridgeProps) {\r\n  const theme = useTheme()\r\n  const { chainId } = useActiveWeb3React()\r\n  const [searchQuery, setSearchQuery] = useState<string>('')\r\n  const debouncedQuery = useDebounce(searchQuery, 200)\r\n\r\n  const [{ listTokenIn, listTokenOut }] = useBridgeState()\r\n\r\n  const fetchedTokens = isOutput ? listTokenOut : listTokenIn\r\n  const tokenComparator = useTokenComparator(false, true)\r\n\r\n  const isAddressSearch = isAddress(chainId, debouncedQuery)\r\n\r\n  const filteredTokens: WrappedTokenInfo[] = useMemo(() => {\r\n    if (isAddressSearch) {\r\n      const find = fetchedTokens.find(e => e?.address?.toLowerCase() === debouncedQuery.toLowerCase())\r\n      return find ? [find] : []\r\n    }\r\n    return filterTokens(chainId, fetchedTokens, debouncedQuery)\r\n  }, [isAddressSearch, chainId, fetchedTokens, debouncedQuery])\r\n\r\n  const visibleCurrencies: WrappedTokenInfo[] = useMemo(() => {\r\n    const sorted = filteredTokens.sort(tokenComparator)\r\n    const symbolMatch = debouncedQuery\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(s => s.length > 0)\r\n    if (symbolMatch.length > 1) return sorted\r\n\r\n    return [\r\n      // sort any exact symbol matches first\r\n      ...sorted.filter(token => token.symbol?.toLowerCase() === symbolMatch[0]),\r\n      ...sorted.filter(token => token.symbol?.toLowerCase() !== symbolMatch[0]),\r\n    ]\r\n  }, [filteredTokens, debouncedQuery, tokenComparator])\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: WrappedTokenInfo) => {\r\n      onCurrencySelect(currency)\r\n      onDismiss()\r\n    },\r\n    [onDismiss, onCurrencySelect],\r\n  )\r\n\r\n  // manage focus on modal show\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  // clear the input on open\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setSearchQuery('')\r\n      inputRef.current?.focus()\r\n    }\r\n  }, [isOpen])\r\n\r\n  const listTokenRef = useRef<HTMLDivElement>(null)\r\n  const handleInput = useCallback(\r\n    (event: ChangeEvent<HTMLInputElement>) => {\r\n      const input = event.target.value\r\n      const checksumInput = isAddress(chainId, input)\r\n      setSearchQuery(checksumInput || input)\r\n      if (listTokenRef?.current) listTokenRef.current.scrollTop = 0\r\n    },\r\n    [chainId],\r\n  )\r\n\r\n  const handleEnter = useCallback(\r\n    (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (\r\n        e.key === 'Enter' &&\r\n        visibleCurrencies.length > 0 &&\r\n        (visibleCurrencies[0].symbol?.toLowerCase() === searchQuery.trim().toLowerCase() ||\r\n          visibleCurrencies.length === 1)\r\n      ) {\r\n        handleCurrencySelect(visibleCurrencies[0])\r\n      }\r\n    },\r\n    [visibleCurrencies, handleCurrencySelect, searchQuery],\r\n  )\r\n\r\n  // menu ui\r\n  const [open, toggle] = useToggle(false)\r\n  const node = useRef<HTMLDivElement>()\r\n  useOnClickOutside(node, open ? toggle : undefined)\r\n\r\n  return (\r\n    <ContentWrapper>\r\n      <PaddedColumn gap=\"14px\">\r\n        <RowBetween>\r\n          <Text fontWeight={500} fontSize={20} display=\"flex\">\r\n            <Trans>Select a token</Trans>\r\n            {!isOutput && (\r\n              <InfoHelper\r\n                zIndexTooltip={Z_INDEXS.MODAL + 1}\r\n                size={16}\r\n                text={\r\n                  <Trans>You can select and transfer any token supported by Multichain from one chain to another</Trans>\r\n                }\r\n              />\r\n            )}\r\n          </Text>\r\n          <CloseIcon onClick={onDismiss} />\r\n        </RowBetween>\r\n\r\n        {!isOutput ? (\r\n          <SearchWrapper>\r\n            <SearchInput\r\n              type=\"text\"\r\n              id=\"token-search-input\"\r\n              placeholder={t`Search by token name, token symbol or address`}\r\n              value={searchQuery}\r\n              ref={inputRef}\r\n              onChange={handleInput}\r\n              onKeyDown={handleEnter}\r\n              autoComplete=\"off\"\r\n            />\r\n            <SearchIcon size={18} color={theme.border} />\r\n          </SearchWrapper>\r\n        ) : (\r\n          <>\r\n            <Text fontSize={12} color={theme.subText} lineHeight=\"20px\">\r\n              <Trans>\r\n                You can select from one of the token pools below. Different pools may have different liquidity and fees\r\n              </Trans>\r\n            </Text>\r\n            <Flex justifyContent=\"space-between\" color={theme.subText} fontWeight={500} fontSize={15}>\r\n              <Text>\r\n                <Trans>Pool</Trans>\r\n              </Text>\r\n              <Text>\r\n                <Trans>Liquidity</Trans>\r\n              </Text>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </PaddedColumn>\r\n\r\n      <Separator />\r\n\r\n      {visibleCurrencies?.length ? (\r\n        <CurrencyListBridge\r\n          listTokenRef={listTokenRef}\r\n          isOutput={isOutput}\r\n          currencies={visibleCurrencies}\r\n          onCurrencySelect={handleCurrencySelect}\r\n        />\r\n      ) : (\r\n        <NoResult\r\n          msg={\r\n            debouncedQuery && (\r\n              <Text fontSize={12} color={theme.subText} fontWeight=\"normal\" lineHeight={'18px'}>\r\n                <Trans>\r\n                  Multichain doesn’t support this token yet. <br />\r\n                  If you want to apply this token for cross-chain bridges on Multichain, please read more{' '}\r\n                  <ExternalLink href=\"https://anyswap.medium.com/how-to-apply-for-cross-chain-bridges-on-anyswap-82fcb6c9f0d2\">\r\n                    here\r\n                  </ExternalLink>\r\n                </Trans>\r\n              </Text>\r\n            )\r\n          }\r\n        />\r\n      )}\r\n    </ContentWrapper>\r\n  )\r\n}\r\n","import { useCallback } from 'react'\r\n\r\nimport Modal from 'components/Modal'\r\nimport { Z_INDEXS } from 'constants/styles'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\n\r\nimport CurrencySearchBridge from './CurrencySearchBridge'\r\n\r\ninterface CurrencySearchModalBridgeProps {\r\n  isOpen: boolean\r\n  isOutput: boolean\r\n  onDismiss: () => void\r\n  onCurrencySelect: (currency: WrappedTokenInfo) => void\r\n}\r\n\r\nexport default function CurrencySearchModalBridge({\r\n  isOpen,\r\n  isOutput,\r\n  onDismiss,\r\n  onCurrencySelect,\r\n}: CurrencySearchModalBridgeProps) {\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: WrappedTokenInfo) => {\r\n      onCurrencySelect(currency)\r\n      onDismiss()\r\n    },\r\n    [onDismiss, onCurrencySelect],\r\n  )\r\n\r\n  return (\r\n    <Modal\r\n      zindex={Z_INDEXS.MODAL}\r\n      isOpen={isOpen}\r\n      onDismiss={onDismiss}\r\n      margin=\"auto\"\r\n      maxHeight={80}\r\n      height={isOutput ? undefined : '95vh'}\r\n      minHeight={isOutput ? undefined : 80}\r\n    >\r\n      <CurrencySearchBridge\r\n        isOutput={isOutput}\r\n        isOpen={isOpen}\r\n        onDismiss={onDismiss}\r\n        onCurrencySelect={handleCurrencySelect}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { BigNumber, ethers } from 'ethers'\r\nimport { useCallback, useEffect, useState } from 'react'\r\n\r\nimport ERC20_INTERFACE, { ERC20_ABI } from 'constants/abis/erc20'\r\nimport { isEVM } from 'constants/networks'\r\nimport { providers, useActiveWeb3React } from 'hooks'\r\nimport { useMulticallContract } from 'hooks/useContract'\r\nimport useInterval from 'hooks/useInterval'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\n\r\nexport const useTokenBalanceOfAnotherChain = (chainId: ChainId | undefined, token: WrappedTokenInfo | undefined) => {\r\n  const { account } = useActiveWeb3React()\r\n  const [balance, setBalance] = useState('0')\r\n  useEffect(() => {\r\n    if (account && chainId && token)\r\n      getTokenBalanceOfAnotherChain(account, token, chainId)\r\n        .then(data => {\r\n          setBalance(data)\r\n        })\r\n        .catch(console.error)\r\n    else {\r\n      setBalance('0')\r\n    }\r\n  }, [chainId, token, account, balance])\r\n  return balance\r\n}\r\n\r\nfunction getTokenBalanceOfAnotherChain(account: string, token: WrappedTokenInfo, chainId: ChainId): Promise<string> {\r\n  const isNativeToken = token.multichainInfo?.tokenType === 'NATIVE'\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      if (!account || !token || !chainId || !isEVM(chainId)) return reject('wrong input')\r\n      let balance: BigNumber | undefined\r\n      try {\r\n        const provider = providers[chainId]\r\n        if (isNativeToken) {\r\n          balance = await provider.getBalance(account)\r\n        } else {\r\n          const contract = new ethers.Contract(token?.address, ERC20_ABI, provider)\r\n          balance = await contract.balanceOf(account)\r\n        }\r\n      } catch (error) {}\r\n      resolve(balance ? ethers.utils.formatUnits(balance, token.decimals) : '0')\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\ntype TokenList = { anytoken: string; underlying: string }[]\r\n\r\ntype PoolBridgeInfoMap = {\r\n  [address: string]: PoolBridgeInfo\r\n}\r\ntype PoolBridgeInfo = {\r\n  balance: string\r\n  balanceOf: string\r\n}\r\ntype CallParam = {\r\n  callData: string\r\n  target: string\r\n  label: string\r\n  fragment: string\r\n  key: string\r\n}\r\n\r\nfunction getCallParams(list: TokenList) {\r\n  const calls: CallParam[] = []\r\n  for (const item of list) {\r\n    calls.push({\r\n      callData: ERC20_INTERFACE.encodeFunctionData('balanceOf', [item.anytoken]),\r\n      target: item.underlying,\r\n      label: 'balanceOf',\r\n      fragment: 'balanceOf',\r\n      key: item.anytoken,\r\n    })\r\n  }\r\n  return calls\r\n}\r\n\r\nconst formatResult = (response: string[], calls: CallParam[]): PoolBridgeInfoMap => {\r\n  const resultList: PoolBridgeInfoMap = {}\r\n  if (!response) return resultList\r\n  for (let i = 0, len = calls.length; i < len; i++) {\r\n    const item = calls[i]\r\n    if (!response[i]) continue\r\n\r\n    let value = ''\r\n    try {\r\n      value = ERC20_INTERFACE?.decodeFunctionResult(item.fragment, response[i])?.toString()\r\n    } catch (error) {\r\n      continue\r\n    }\r\n\r\n    if (!resultList[item.key]) {\r\n      resultList[item.key] = { balance: '0', balanceOf: '0' }\r\n    }\r\n    resultList[item.key][item.label as keyof PoolBridgeInfo] = value\r\n  }\r\n  return resultList\r\n}\r\n\r\n// get pool of list token of a chain\r\nexport function useMultichainPool(chainId: ChainId | undefined, tokenList: TokenList) {\r\n  const [poolData, setPoolData] = useState<PoolBridgeInfoMap>()\r\n  const { account } = useActiveWeb3React()\r\n  const multicallContract = useMulticallContract(chainId)\r\n  const getEvmPoolsData = useCallback(async (): Promise<PoolBridgeInfoMap> => {\r\n    if (!chainId) return Promise.reject('Wrong input')\r\n    try {\r\n      const calls = getCallParams(tokenList)\r\n      const { returnData } = (await multicallContract?.callStatic.tryBlockAndAggregate(\r\n        false,\r\n        calls.map(({ callData, target }) => ({ target, callData })),\r\n      )) || { returnData: [] }\r\n      return formatResult(\r\n        returnData.map((item: [boolean, string]) => item[1]),\r\n        calls,\r\n      )\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }, [chainId, tokenList, multicallContract])\r\n\r\n  const fetchPoolCallback = useCallback(async () => {\r\n    try {\r\n      const newData: PoolBridgeInfoMap = await getEvmPoolsData()\r\n      // small object, no performance problem here\r\n      if (JSON.stringify(newData || {}) !== JSON.stringify(poolData || {})) {\r\n        setPoolData(newData)\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }, [getEvmPoolsData, poolData])\r\n\r\n  useEffect(() => {\r\n    fetchPoolCallback()\r\n  }, [chainId, account, tokenList, fetchPoolCallback])\r\n\r\n  useInterval(fetchPoolCallback, 1000 * 10)\r\n\r\n  return !chainId ? undefined : poolData\r\n}\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { t } from '@lingui/macro'\r\nimport { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { ReactComponent as DropdownSvg } from 'assets/svg/down.svg'\r\nimport NetworkModal from 'components/Header/web3/NetworkModal'\r\nimport { NetworkLogo } from 'components/Logo'\r\nimport { NETWORKS_INFO } from 'constants/networks'\r\nimport { useActiveWeb3React } from 'hooks'\r\n\r\nconst NetworkSwitchContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: 24px;\r\n  height: fit-content;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.text};\r\n  padding: 0px;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst NetworkLabel = styled.div`\r\n  white-space: nowrap;\r\n  font-weight: 500;\r\n  margin-right: 8px;\r\n  font-size: 14px;\r\n`\r\n\r\nconst DropdownIcon = styled(DropdownSvg)<{ open: boolean }>`\r\n  color: ${({ theme }) => theme.text};\r\n  transform: rotate(${({ open }) => (open ? '180deg' : '0')});\r\n  transition: transform 300ms;\r\n`\r\nfunction Web3Network({\r\n  chainIds = [],\r\n  onSelectNetwork,\r\n  selectedChainId,\r\n}: {\r\n  chainIds: ChainId[]\r\n  onSelectNetwork: (chain: ChainId) => void\r\n  selectedChainId?: ChainId\r\n}): JSX.Element | null {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const toggleNetworkModal = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  if (!chainId) return null\r\n  const { name } = selectedChainId ? NETWORKS_INFO[selectedChainId] : { name: t`Select a network` }\r\n  return (\r\n    <>\r\n      <NetworkSwitchContainer onClick={() => chainIds.length && toggleNetworkModal()}>\r\n        <NetworkLogo chainId={selectedChainId} style={{ width: 20, height: 20, marginRight: '8px' }} />\r\n        <NetworkLabel>{name}</NetworkLabel>\r\n        <DropdownIcon open={isOpen} />\r\n      </NetworkSwitchContainer>\r\n      <NetworkModal\r\n        disabledMsg={t`The token cannot be bridged to this chain`}\r\n        activeChainIds={chainIds}\r\n        isOpen={isOpen}\r\n        selectedId={selectedChainId}\r\n        customToggleModal={toggleNetworkModal}\r\n        customOnSelectNetwork={onSelectNetwork}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Web3Network\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { Trans } from '@lingui/macro'\r\nimport { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ReactComponent as DropdownSVG } from 'assets/svg/down.svg'\r\nimport Wallet from 'components/Icons/Wallet'\r\nimport { RowFixed } from 'components/Row'\r\nimport CurrencySearchModalBridge from 'components/SearchModal/bridge/CurrencySearchModalBridge'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useTokenBalanceOfAnotherChain } from 'hooks/bridge'\r\nimport useTheme from 'hooks/useTheme'\r\nimport SelectNetwork from 'pages/Bridge/SelectNetwork'\r\nimport { useBridgeState } from 'state/bridge/hooks'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\nimport { useCurrencyBalance } from 'state/wallet/hooks'\r\n\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport { Input as NumericalInput } from '../NumericalInput'\r\nimport { Aligner, Container, CurrencySelect, InputPanel, InputRow, StyledTokenName } from './index'\r\n\r\ninterface CurrencyInputPanelBridgeProps {\r\n  value: string\r\n  error?: boolean\r\n  onUserInput?: (value: string) => void\r\n  onMax?: () => void\r\n  onCurrencySelect: (currency: WrappedTokenInfo) => void\r\n  id: string\r\n  isOutput?: boolean\r\n  onSelectNetwork: (chain: ChainId) => void\r\n  chainIds: ChainId[]\r\n  selectedChainId: ChainId | undefined\r\n}\r\nexport default function CurrencyInputPanelBridge({\r\n  error,\r\n  value,\r\n  onUserInput = (value: string) => {\r\n    //\r\n  },\r\n  onSelectNetwork,\r\n  chainIds,\r\n  onMax,\r\n  selectedChainId,\r\n  onCurrencySelect,\r\n  isOutput = false,\r\n  id,\r\n}: CurrencyInputPanelBridgeProps) {\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const [{ currencyIn, currencyOut, listTokenOut, chainIdOut, loadingToken }] = useBridgeState()\r\n  const currency = isOutput ? currencyOut : currencyIn\r\n  const selectedCurrencyBalance = useCurrencyBalance(isOutput ? undefined : currency ?? undefined)\r\n  const balanceRef = useRef(selectedCurrencyBalance?.toSignificant(10))\r\n  const destBalance = useTokenBalanceOfAnotherChain(chainIdOut, isOutput ? currency : undefined)\r\n\r\n  useEffect(() => {\r\n    balanceRef.current = undefined\r\n  }, [chainId])\r\n\r\n  // Keep previous value of balance if rpc node was down\r\n  useEffect(() => {\r\n    if (!!selectedCurrencyBalance) balanceRef.current = selectedCurrencyBalance.toSignificant(10)\r\n    if (!currency || !account) balanceRef.current = '0'\r\n  }, [selectedCurrencyBalance, currency, account])\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleDismissSearch = useCallback(() => {\r\n    setModalOpen(false)\r\n  }, [setModalOpen])\r\n\r\n  const disabledSelect = listTokenOut.length === 1 && isOutput\r\n  const formatDestBalance = parseFloat(destBalance) ? parseFloat(destBalance)?.toFixed(10) : 0\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <InputPanel id={id}>\r\n        <Container hideInput={false} selected={false} error={error}>\r\n          <Flex justifyContent=\"space-between\" fontSize=\"12px\" marginBottom=\"12px\" alignItems=\"center\">\r\n            <SelectNetwork chainIds={chainIds} onSelectNetwork={onSelectNetwork} selectedChainId={selectedChainId} />\r\n            <Flex\r\n              onClick={() => onMax && onMax()}\r\n              style={{ cursor: onMax ? 'pointer' : undefined }}\r\n              alignItems=\"center\"\r\n            >\r\n              <Wallet color={theme.subText} />\r\n              <Text fontWeight={500} color={theme.subText} marginLeft=\"4px\">\r\n                {isOutput ? formatDestBalance : selectedCurrencyBalance?.toSignificant(10) || balanceRef.current || 0}\r\n              </Text>\r\n            </Flex>\r\n          </Flex>\r\n          <InputRow>\r\n            <NumericalInput\r\n              error={error}\r\n              className=\"token-amount-input\"\r\n              value={value}\r\n              disabled={isOutput}\r\n              onUserInput={onUserInput}\r\n            />\r\n\r\n            <CurrencySelect\r\n              selected={!!currency}\r\n              className=\"open-currency-select-button\"\r\n              onClick={() => !disabledSelect && !loadingToken && setModalOpen(true)}\r\n              style={{ cursor: disabledSelect ? 'default' : 'pointer', paddingRight: disabledSelect ? '8px' : 0 }}\r\n            >\r\n              <Aligner>\r\n                <RowFixed>\r\n                  {currency && <CurrencyLogo currency={currency} size={'20px'} />}\r\n                  <StyledTokenName\r\n                    className=\"token-symbol-container\"\r\n                    active={Boolean(currency?.symbol)}\r\n                    style={{ paddingRight: 0 }}\r\n                  >\r\n                    {currency?.symbol || (loadingToken ? <Trans>Loading tokens</Trans> : <Trans>Select a token</Trans>)}\r\n                  </StyledTokenName>\r\n                </RowFixed>\r\n                {disabledSelect ? <div /> : <DropdownSVG />}\r\n              </Aligner>\r\n            </CurrencySelect>\r\n          </InputRow>\r\n        </Container>\r\n        <CurrencySearchModalBridge\r\n          isOutput={isOutput}\r\n          isOpen={modalOpen}\r\n          onDismiss={handleDismissSearch}\r\n          onCurrencySelect={onCurrencySelect}\r\n        />\r\n      </InputPanel>\r\n    </div>\r\n  )\r\n}\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { captureException } from '@sentry/react'\r\nimport axios from 'axios'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { mutate } from 'swr'\r\n\r\nimport { KS_SETTING_API } from 'constants/env'\r\nimport { NETWORKS_INFO } from 'constants/networks'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useBridgeContract, useSwapBTCContract, useSwapETHContract } from 'hooks/useContract'\r\nimport { useBridgeOutputValue, useBridgeState } from 'state/bridge/hooks'\r\nimport { useAppSelector } from 'state/hooks'\r\nimport { tryParseAmount } from 'state/swap/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useCurrencyBalance, useETHBalance } from 'state/wallet/hooks'\r\nimport { formatNumberWithPrecisionRange, isAddress } from 'utils'\r\n\r\nconst NOT_APPLICABLE = {\r\n  execute: async () => {\r\n    //\r\n  },\r\n  inputError: false,\r\n}\r\n\r\nfunction useSendTxToKsSettingCallback() {\r\n  const { account } = useActiveWeb3React()\r\n  const historyURL = useAppSelector(state => state.bridge.historyURL)\r\n\r\n  const onSuccess = useCallback(() => {\r\n    mutate(historyURL)\r\n  }, [historyURL])\r\n\r\n  return useCallback(\r\n    async (\r\n      srcChainId: ChainId,\r\n      dstChainId: ChainId,\r\n      srcTxHash: string,\r\n      srcTokenSymbol: string,\r\n      dstTokenSymbol: string,\r\n      srcAmount: string,\r\n      dstAmount: string,\r\n    ) => {\r\n      const url = `${KS_SETTING_API}/v1/multichain-transfers`\r\n      const body = {\r\n        userAddress: account,\r\n        srcChainId: srcChainId.toString(),\r\n        dstChainId: dstChainId.toString(),\r\n        srcTxHash,\r\n        dstTxHash: '',\r\n        srcTokenSymbol,\r\n        dstTokenSymbol,\r\n        srcAmount,\r\n        dstAmount,\r\n        status: 0,\r\n      }\r\n      try {\r\n        await axios.post(url, body)\r\n        onSuccess()\r\n      } catch (err) {\r\n        const extraData = {\r\n          body,\r\n          status: undefined,\r\n          response: undefined,\r\n        }\r\n        if (err?.response?.data) {\r\n          extraData.status = err.response.status\r\n          extraData.response = err.response.data\r\n        }\r\n        const error = new Error(`SendTxToKsSetting fail, srcTxHash = ${extraData.body.srcTxHash}`, { cause: err })\r\n        error.name = 'PostBridge'\r\n        captureException(error, { level: 'fatal', extra: { args: JSON.stringify(extraData, null, 2) } })\r\n      }\r\n    },\r\n    [account, onSuccess],\r\n  )\r\n}\r\n\r\nexport default function useBridgeCallback(\r\n  inputAmount: string | undefined,\r\n  inputToken: string | undefined,\r\n  routerToken: string | undefined,\r\n  isNative: boolean,\r\n  toAddress: string | undefined | null,\r\n) {\r\n  const { execute: onRouterSwap, inputError: wrapInputErrorBridge } = useRouterSwap(\r\n    routerToken,\r\n    inputToken,\r\n    inputAmount,\r\n    isNative,\r\n  )\r\n  const { execute: onBridgeSwap, inputError: wrapInputErrorCrossBridge } = useBridgeSwap(\r\n    toAddress,\r\n    inputToken,\r\n    inputAmount,\r\n  )\r\n  return useMemo(() => {\r\n    return {\r\n      execute: async (useSwapMethods: string) => {\r\n        const isBridge =\r\n          useSwapMethods.includes('transfer') ||\r\n          useSwapMethods.includes('sendTransaction') ||\r\n          useSwapMethods.includes('Swapout')\r\n        return isBridge ? onBridgeSwap() : onRouterSwap(useSwapMethods)\r\n      },\r\n      inputError: wrapInputErrorBridge || wrapInputErrorCrossBridge,\r\n    }\r\n  }, [onBridgeSwap, onRouterSwap, wrapInputErrorBridge, wrapInputErrorCrossBridge])\r\n}\r\n\r\nfunction useRouterSwap(\r\n  routerToken: string | undefined,\r\n  inputToken: string | undefined,\r\n  typedValue: string | undefined,\r\n  isNative: boolean,\r\n) {\r\n  const [{ tokenInfoIn, chainIdOut, currencyIn, currencyOut }] = useBridgeState()\r\n  const outputInfo = useBridgeOutputValue(typedValue ?? '0')\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const bridgeContract = useBridgeContract(isAddress(chainId, routerToken), chainIdOut && isNaN(chainIdOut) ? 'V2' : '')\r\n\r\n  const ethBalance = useETHBalance()\r\n  const anyBalance = useCurrencyBalance(currencyIn)\r\n  const balance = isNative ? ethBalance : anyBalance\r\n\r\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, currencyIn ?? undefined), [currencyIn, typedValue])\r\n  const addTransactionWithType = useTransactionAdder()\r\n  const sendTxToKsSetting = useSendTxToKsSettingCallback()\r\n\r\n  return useMemo(() => {\r\n    if (!bridgeContract || !chainId || !tokenInfoIn || !account || !chainIdOut) return NOT_APPLICABLE\r\n\r\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\r\n    return {\r\n      execute: async (useSwapMethods: string) => {\r\n        let txHash = ''\r\n        try {\r\n          if (!sufficientBalance || !inputAmount) return Promise.reject('insufficient Balance')\r\n          let promise\r\n          const params = [inputToken, account, `0x${inputAmount.quotient.toString(16)}`, currencyOut?.chainId]\r\n          if (useSwapMethods.includes('anySwapOutNative')) {\r\n            promise = bridgeContract.anySwapOutNative(inputToken, account, currencyOut?.chainId, {\r\n              value: `0x${inputAmount.quotient.toString(16)}`,\r\n            })\r\n          } else if (useSwapMethods.includes('anySwapOutUnderlying')) {\r\n            promise = bridgeContract.anySwapOutUnderlying(...params)\r\n          } else if (useSwapMethods.includes('anySwapOut')) {\r\n            promise = bridgeContract.anySwapOut(...params)\r\n          }\r\n\r\n          let txReceipt\r\n          if (promise) {\r\n            window.onbeforeunload = () => ''\r\n            txReceipt = await promise\r\n          } else {\r\n            return Promise.reject('router wrong method')\r\n          }\r\n\r\n          txHash = txReceipt?.hash\r\n          if (txHash) {\r\n            const from_network = NETWORKS_INFO[chainId].name\r\n            const to_network = NETWORKS_INFO[chainIdOut].name\r\n            const inputAmountStr = inputAmount.toSignificant(6)\r\n            const outputAmountStr = formatNumberWithPrecisionRange(parseFloat(outputInfo.outputAmount.toString()), 0, 6)\r\n            const from_token = currencyIn?.symbol ?? ''\r\n            const to_token = currencyOut?.symbol ?? ''\r\n            addTransactionWithType({\r\n              hash: txReceipt,\r\n              type: TRANSACTION_TYPE.BRIDGE,\r\n              summary: `${inputAmountStr} ${from_token} (${from_network}) to ${outputAmountStr} ${to_token} (${to_network})`,\r\n              arbitrary: {\r\n                from_token,\r\n                to_token,\r\n                bridge_fee: outputInfo.fee,\r\n                from_network,\r\n                to_network,\r\n                trade_qty: typedValue,\r\n              },\r\n            })\r\n            sendTxToKsSetting(\r\n              chainId,\r\n              chainIdOut,\r\n              txHash,\r\n              from_token,\r\n              to_token,\r\n              inputAmountStr,\r\n              outputInfo?.outputAmount?.toString() ?? '',\r\n            )\r\n          }\r\n          return txHash ?? ''\r\n        } catch (error) {\r\n          console.error('Could not swap', error)\r\n          return Promise.reject(error || 'router unknown error')\r\n        } finally {\r\n          window.onbeforeunload = null\r\n        }\r\n      },\r\n      inputError: !sufficientBalance,\r\n    }\r\n  }, [\r\n    bridgeContract,\r\n    chainId,\r\n    tokenInfoIn,\r\n    account,\r\n    chainIdOut,\r\n    currencyIn?.symbol,\r\n    inputAmount,\r\n    balance,\r\n    inputToken,\r\n    outputInfo.outputAmount,\r\n    outputInfo.fee,\r\n    currencyOut,\r\n    sendTxToKsSetting,\r\n    addTransactionWithType,\r\n    typedValue,\r\n  ])\r\n}\r\n\r\nfunction useBridgeSwap(\r\n  toAddress: string | undefined | null,\r\n  inputToken: string | undefined,\r\n  typedValue: string | undefined,\r\n) {\r\n  const [{ tokenInfoOut, chainIdOut, tokenInfoIn, currencyIn, currencyOut }] = useBridgeState()\r\n  const addTransactionWithType = useTransactionAdder()\r\n  const outputInfo = useBridgeOutputValue(typedValue ?? '0')\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n\r\n  const tokenBalance = useCurrencyBalance(currencyIn)\r\n  const ethBalance = useETHBalance()\r\n  const balance = tokenInfoIn && tokenInfoIn?.tokenType !== 'NATIVE' ? tokenBalance : ethBalance\r\n\r\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, currencyIn), [currencyIn, typedValue])\r\n  const contractBTC = useSwapBTCContract(isAddress(chainId, inputToken) ? inputToken : undefined)\r\n  const contractETH = useSwapETHContract(isAddress(chainId, inputToken) ? inputToken : undefined)\r\n  const sendTxToKsSetting = useSendTxToKsSettingCallback()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId || !toAddress || !chainIdOut || !library || !account) return NOT_APPLICABLE\r\n\r\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\r\n\r\n    return {\r\n      execute: async () => {\r\n        try {\r\n          if (!sufficientBalance || !inputAmount) return Promise.reject('insufficient balance')\r\n          let txReceipt\r\n          if (tokenInfoOut?.type === 'swapin') {\r\n            if (isAddress(chainId, inputToken) && tokenInfoIn?.tokenType !== 'NATIVE') {\r\n              if (contractETH) {\r\n                txReceipt = await contractETH.transfer(toAddress, `0x${inputAmount.quotient.toString(16)}`)\r\n              } else {\r\n                return Promise.reject('not found contractETH')\r\n              }\r\n            } else {\r\n              const data = {\r\n                from: account,\r\n                to: toAddress,\r\n                value: `0x${inputAmount.quotient.toString(16)}`,\r\n              }\r\n              const hash = await library.send('eth_sendTransaction', [data])\r\n              txReceipt = hash && hash.toString().indexOf('0x') === 0 ? { hash } : ''\r\n            }\r\n          } else {\r\n            if (chainIdOut && isNaN(chainIdOut)) {\r\n              if (contractBTC) {\r\n                txReceipt = await contractBTC.Swapout(`0x${inputAmount.quotient.toString(16)}`, toAddress)\r\n              } else {\r\n                return Promise.reject('not found contractBTC')\r\n              }\r\n            } else {\r\n              if (contractETH) {\r\n                txReceipt = await contractETH.Swapout(`0x${inputAmount.quotient.toString(16)}`, toAddress)\r\n              } else {\r\n                Promise.reject('not found contractETH')\r\n              }\r\n            }\r\n          }\r\n          const txHash = txReceipt?.hash\r\n          if (txHash) {\r\n            const from_network = NETWORKS_INFO[chainId].name\r\n            const to_network = NETWORKS_INFO[chainIdOut].name\r\n            const inputAmountStr = inputAmount.toSignificant(6)\r\n            const outputAmountStr = formatNumberWithPrecisionRange(parseFloat(outputInfo.outputAmount.toString()), 0, 6)\r\n            const from_token = currencyIn?.symbol ?? ''\r\n            const to_token = currencyOut?.symbol ?? ''\r\n            addTransactionWithType({\r\n              hash: txReceipt,\r\n              type: TRANSACTION_TYPE.BRIDGE,\r\n              summary: `${inputAmountStr} ${from_token} (${from_network}) to ${outputAmountStr} ${to_token} (${to_network})`,\r\n              arbitrary: {\r\n                from_token,\r\n                to_token,\r\n                bridge_fee: outputInfo.fee,\r\n                from_network,\r\n                to_network,\r\n                trade_qty: typedValue,\r\n              },\r\n            })\r\n            sendTxToKsSetting(\r\n              chainId,\r\n              chainIdOut,\r\n              txHash,\r\n              from_token,\r\n              to_token,\r\n              inputAmountStr,\r\n              outputInfo?.outputAmount?.toString() ?? '',\r\n            )\r\n          }\r\n          return txHash ?? ''\r\n        } catch (error) {\r\n          console.log('Could not swapout', error)\r\n          return Promise.reject(error || 'bridge unknown error')\r\n        }\r\n      },\r\n      inputError: !sufficientBalance,\r\n    }\r\n  }, [\r\n    chainId,\r\n    toAddress,\r\n    chainIdOut,\r\n    library,\r\n    account,\r\n    inputAmount,\r\n    balance,\r\n    tokenInfoOut?.type,\r\n    inputToken,\r\n    tokenInfoIn?.tokenType,\r\n    currencyIn?.symbol,\r\n    contractETH,\r\n    contractBTC,\r\n    outputInfo.outputAmount,\r\n    outputInfo.fee,\r\n    currencyOut,\r\n    sendTxToKsSetting,\r\n    addTransactionWithType,\r\n    typedValue,\r\n  ])\r\n}\r\n","import { Trans, t } from '@lingui/macro'\r\nimport { memo, useCallback, useMemo } from 'react'\r\nimport { X } from 'react-feather'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport CopyHelper from 'components/Copy'\r\nimport CurrencyLogo from 'components/CurrencyLogo'\r\nimport { NetworkLogo } from 'components/Logo'\r\nimport TransactionConfirmationModal, { TransactionErrorContent } from 'components/TransactionConfirmationModal'\r\nimport { NETWORKS_INFO } from 'constants/networks'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { OutputBridgeInfo, useBridgeState } from 'state/bridge/hooks'\r\nimport { formatNumberWithPrecisionRange, shortenAddress } from 'utils'\r\n\r\nimport { BridgeSwapState } from './type'\r\n\r\nconst Container = styled.div`\r\n  padding: 25px 30px;\r\n  width: 100%;\r\n`\r\nconst Row = styled.div`\r\n  line-height: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n`\r\n\r\nconst Value = styled.div`\r\n  color: ${({ theme }) => theme.text};\r\n  font-weight: 500;\r\n  display: flex;\r\n  gap: 5px;\r\n  align-items: center;\r\n`\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.subText};\r\n  font-weight: 500;\r\n`\r\nconst formatValue = (amount: string) =>\r\n  !amount ? '' : formatNumberWithPrecisionRange(parseFloat(amount.toString()), 0, 10)\r\n\r\nconst styleLogo = { width: 20, height: 20 }\r\nexport default memo(function Disclaimer({\r\n  onSwap,\r\n  onDismiss,\r\n  outputInfo,\r\n  swapState,\r\n}: {\r\n  onSwap: () => void\r\n  onDismiss: () => void\r\n  outputInfo: OutputBridgeInfo\r\n  swapState: BridgeSwapState\r\n}) {\r\n  const theme = useTheme()\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const [{ chainIdOut, currencyIn, currencyOut }] = useBridgeState()\r\n\r\n  const listData = useMemo(() => {\r\n    return [\r\n      {\r\n        label: t`I want to transfer`,\r\n        content: (\r\n          <Value>\r\n            <CurrencyLogo currency={currencyIn} style={styleLogo} />\r\n            <Text>\r\n              {formatValue(outputInfo.inputAmount)} {currencyIn?.symbol}\r\n            </Text>\r\n          </Value>\r\n        ),\r\n      },\r\n      {\r\n        label: t`from`,\r\n        content: (\r\n          <Value>\r\n            <NetworkLogo chainId={chainId} style={styleLogo} />\r\n            <Text>{chainId && NETWORKS_INFO?.[chainId]?.name}</Text>\r\n          </Value>\r\n        ),\r\n      },\r\n      {\r\n        label: t`to`,\r\n        content: (\r\n          <Value>\r\n            <NetworkLogo chainId={chainIdOut} style={styleLogo} />\r\n            {chainIdOut && <Text>{NETWORKS_INFO[chainIdOut].name}</Text>}\r\n          </Value>\r\n        ),\r\n      },\r\n      {\r\n        label: t`and receive at least`,\r\n        content: (\r\n          <Value>\r\n            <CurrencyLogo currency={currencyOut} style={styleLogo} />\r\n            <Text>\r\n              {formatValue(outputInfo?.outputAmount?.toString())} {currencyOut?.symbol}\r\n            </Text>\r\n          </Value>\r\n        ),\r\n      },\r\n      {\r\n        label: t`at this address`,\r\n        content: account && (\r\n          <Value>\r\n            <Text>{shortenAddress(chainId, account, 5)}</Text>\r\n            <CopyHelper toCopy={account} style={{ color: theme.subText }} />\r\n          </Value>\r\n        ),\r\n      },\r\n    ]\r\n  }, [account, chainIdOut, chainId, currencyIn, currencyOut, outputInfo, theme])\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapState.swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapState.swapErrorMessage} />\r\n      ) : (\r\n        <Container>\r\n          <Flex flexDirection={'column'} style={{ gap: 25 }}>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Flex color={theme.text} alignItems=\"center\" style={{ gap: 8 }}>\r\n                <Text fontSize={20}>{t`Review your transfer`}</Text>\r\n              </Flex>\r\n              <X onClick={onDismiss} style={{ cursor: 'pointer' }} color={theme.text} />\r\n            </Flex>\r\n\r\n            <Flex style={{ gap: 20 }} flexDirection=\"column\">\r\n              {listData.map(item => (\r\n                <Row key={item.label}>\r\n                  <Label>{item.label}</Label>\r\n                  {item.content}\r\n                </Row>\r\n              ))}\r\n            </Flex>\r\n\r\n            <Flex\r\n              flexDirection={'column'}\r\n              style={{\r\n                borderRadius: 16,\r\n                padding: '14px 18px',\r\n                border: `1px solid ${theme.border}`,\r\n                gap: 8,\r\n                fontSize: 13,\r\n              }}\r\n            >\r\n              <Row>\r\n                <Label>\r\n                  <Trans>Estimated Processing Time</Trans>\r\n                </Label>\r\n                <Value>{outputInfo.time}</Value>\r\n              </Row>\r\n              <Row>\r\n                <Label>\r\n                  <Trans>Transaction Fee</Trans>\r\n                </Label>\r\n                <Value>{outputInfo.fee ? `~${outputInfo.fee} ${currencyIn?.symbol}` : '--'}</Value>\r\n              </Row>\r\n            </Flex>\r\n\r\n            <Text fontSize={12} fontStyle=\"italic\" color={theme.subText}>\r\n              <Trans>Note: It may take upto 30 minutes for your transaction to show up under Transfer History.</Trans>\r\n            </Text>\r\n            <ButtonPrimary onClick={onSwap}>\r\n              <Trans>Transfer</Trans>\r\n            </ButtonPrimary>\r\n          </Flex>\r\n        </Container>\r\n      ),\r\n    [onDismiss, swapState.swapErrorMessage, listData, onSwap, outputInfo, theme, currencyIn?.symbol],\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      hash={swapState.txHash}\r\n      isOpen={swapState.showConfirm}\r\n      onDismiss={onDismiss}\r\n      attemptingTxn={swapState.attemptingTxn}\r\n      content={confirmationContent}\r\n      pendingText={\r\n        chainId && chainIdOut\r\n          ? t`Transferring ${currencyIn?.symbol} (${NETWORKS_INFO[chainId].name}) to ${currencyOut?.symbol} (${NETWORKS_INFO[chainIdOut].name})`\r\n          : ''\r\n      }\r\n    />\r\n  )\r\n})\r\n","import { Trans } from '@lingui/macro'\r\nimport { rgba } from 'polished'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ReactComponent as DropdownSVG } from 'assets/svg/down.svg'\r\nimport { CollapseItem } from 'components/Collapse'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ExternalLink } from 'theme'\r\n\r\nconst style = {\r\n  gap: 8,\r\n  borderRadius: 16,\r\n  padding: '14px 18px',\r\n}\r\nconst ErrorWarningPanel = ({ title, type }: { title: string; type: 'error' | 'warn' }) => {\r\n  const theme = useTheme()\r\n  if (type === 'error')\r\n    return (\r\n      <Flex color={theme.red} alignItems=\"center\" style={{ background: rgba(theme.red, 0.25), ...style }}>\r\n        <div>\r\n          <AlertTriangle size={15} />\r\n        </div>\r\n        <Text fontWeight={500} fontSize={13}>\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  return (\r\n    <CollapseItem\r\n      arrowComponent={<DropdownSVG />}\r\n      style={{ background: rgba(theme.warning, 0.25), ...style }}\r\n      header={\r\n        <Flex color={theme.warning} alignItems=\"center\" style={{ gap: 8 }}>\r\n          <div>\r\n            <AlertTriangle size={15} />\r\n          </div>\r\n          <Text fontWeight={500} fontSize={13}>\r\n            {title}\r\n          </Text>\r\n        </Flex>\r\n      }\r\n    >\r\n      <div style={{ marginLeft: 22 }}>\r\n        <Text as=\"p\" fontSize={12} lineHeight={'16px'} marginTop={'5px'}>\r\n          <Trans>\r\n            There is a chance that during your transfer another high volume transaction utilizes the available\r\n            liquidity. As a result, for the unavailable liquidity, you may receive ‘anyToken’ from Multichain. You can\r\n            exchange your ‘anyToken’ when the Multichain pool has sufficient liquidity.\r\n          </Trans>\r\n        </Text>\r\n        <ExternalLink\r\n          style={{ fontSize: 12 }}\r\n          href=\"https://multichain.zendesk.com/hc/en-us/articles/4410379722639-Redeem-Remove-Pool-Token-Anyassets-e-g-anyUSDC-anyUSDT-anyDAI-anyETH-anyFTM-etc-into-Native-Token-Tutorial\"\r\n        >\r\n          See here ↗\r\n        </ExternalLink>{' '}\r\n      </div>\r\n    </CollapseItem>\r\n  )\r\n}\r\nexport default ErrorWarningPanel\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { NETWORKS_INFO } from 'constants/networks'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nimport { formatPoolValue } from './helpers'\r\nimport { MultiChainTokenInfo } from './type'\r\n\r\nconst PoolInfo = ({\r\n  chainId,\r\n  tokenIn,\r\n  poolValue,\r\n}: {\r\n  chainId: ChainId | undefined\r\n  tokenIn: MultiChainTokenInfo | undefined\r\n  poolValue: string | number | undefined\r\n}) => {\r\n  const theme = useTheme()\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      justifyContent={'flex-end'}\r\n      fontSize={12}\r\n      fontWeight={500}\r\n      color={theme.subText}\r\n      width=\"100%\"\r\n    >\r\n      <Text>\r\n        <Trans>\r\n          {chainId\r\n            ? `${NETWORKS_INFO[chainId].name} Pool: ${`${formatPoolValue(poolValue)} ${tokenIn?.symbol ?? ''}`}`\r\n            : ''}\r\n        </Trans>\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default PoolInfo\r\n","import { ChainId, Fraction } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport { isAddress } from 'ethers/lib/utils'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { Info } from 'react-feather'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport MultichainLogoDark from 'assets/images/multichain_black.png'\r\nimport MultichainLogoLight from 'assets/images/multichain_white.png'\r\nimport { ReactComponent as ArrowUp } from 'assets/svg/arrow_up.svg'\r\nimport { ButtonConfirmed, ButtonError, ButtonLight } from 'components/Button'\r\nimport CurrencyInputPanelBridge from 'components/CurrencyInputPanel/CurrencyInputPanelBridge'\r\nimport Loader from 'components/Loader'\r\nimport ProgressSteps from 'components/ProgressSteps'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport Tooltip, { MouseoverTooltip } from 'components/Tooltip'\r\nimport { AdvancedSwapDetailsDropdownBridge } from 'components/swapv2/AdvancedSwapDetailsDropdown'\r\nimport { SwapFormWrapper } from 'components/swapv2/styleds'\r\nimport { NETWORKS_INFO, SUPPORTED_NETWORKS } from 'constants/networks'\r\nimport { Z_INDEXS } from 'constants/styles'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useMultichainPool } from 'hooks/bridge'\r\nimport useBridgeCallback from 'hooks/bridge/useBridgeCallback'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport { useChangeNetwork } from 'hooks/useChangeNetwork'\r\nimport useMixpanel, { MIXPANEL_TYPE } from 'hooks/useMixpanel'\r\nimport usePrevious from 'hooks/usePrevious'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { BodyWrapper } from 'pages/AppBody'\r\nimport { useWalletModalToggle } from 'state/application/hooks'\r\nimport { useBridgeOutputValue, useBridgeState, useBridgeStateHandler } from 'state/bridge/hooks'\r\nimport { PoolValueOutMap } from 'state/bridge/reducer'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\nimport { tryParseAmount } from 'state/swap/hooks'\r\nimport { useIsDarkMode } from 'state/user/hooks'\r\nimport { useCurrencyBalance } from 'state/wallet/hooks'\r\nimport { ExternalLink } from 'theme'\r\nimport { formattedNum } from 'utils'\r\n\r\nimport ComfirmBridgeModal from './ComfirmBridgeModal'\r\nimport ErrorWarningPanel from './ErrorWarning'\r\nimport PoolInfo from './PoolInfo'\r\nimport { formatPoolValue } from './helpers'\r\nimport { BridgeSwapState } from './type'\r\n\r\nconst AppBodyWrapped = styled(BodyWrapper)`\r\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.04);\r\n  z-index: ${Z_INDEXS.SWAP_FORM};\r\n  padding: 20px 16px;\r\n  margin-top: 0;\r\n`\r\nconst ArrowWrapper = styled.div`\r\n  padding: 8px 10px;\r\n  background: ${({ theme }) => theme.buttonBlack};\r\n  height: fit-content;\r\n  width: fit-content;\r\n  border-radius: 999px;\r\n  margin-bottom: 0.75rem;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.subText};\r\n  font-size: 12px;\r\n  margin-bottom: 0.75rem;\r\n`\r\nconst calcPoolValue = (amount: string, decimals: number) => {\r\n  try {\r\n    if (Number(amount))\r\n      return new Fraction(amount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals ?? 18))).toFixed(5)\r\n  } catch (error) {}\r\n  return '0'\r\n}\r\n\r\ntype PoolValueType = {\r\n  poolValueIn: string | number | undefined // undefined: unlimited\r\n  poolValueOut: string | number | undefined\r\n}\r\n\r\nexport default function SwapForm() {\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const changeNetwork = useChangeNetwork()\r\n  const [\r\n    {\r\n      tokenInfoIn,\r\n      tokenInfoOut,\r\n      chainIdOut,\r\n      currencyIn,\r\n      listTokenOut,\r\n      listTokenIn,\r\n      listChainIn,\r\n      loadingToken,\r\n      poolValueOutMap,\r\n    },\r\n  ] = useBridgeState()\r\n  const { resetBridgeState, setBridgeState, setBridgePoolInfo } = useBridgeStateHandler()\r\n  const toggleWalletModal = useWalletModalToggle()\r\n  const isDark = useIsDarkMode()\r\n  const theme = useTheme()\r\n  const { mixpanelHandler } = useMixpanel()\r\n\r\n  const [inputAmount, setInputAmount] = useState('')\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n  const [poolValue, setPoolValue] = useState<PoolValueType>({\r\n    poolValueIn: undefined,\r\n    poolValueOut: undefined,\r\n  })\r\n\r\n  // modal and loading\r\n  const [swapState, setSwapState] = useState<BridgeSwapState>({\r\n    showConfirm: false,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: '',\r\n    txHash: undefined,\r\n  })\r\n\r\n  const listChainOut = useMemo(() => {\r\n    const destChainInfo = tokenInfoIn?.destChains || {}\r\n    return (Object.keys(destChainInfo).map(Number) as ChainId[]).filter(id => SUPPORTED_NETWORKS.includes(id))\r\n  }, [tokenInfoIn])\r\n\r\n  const outputInfo = useBridgeOutputValue(inputAmount)\r\n\r\n  const anyToken = tokenInfoOut?.fromanytoken\r\n\r\n  const poolParamIn = useMemo(() => {\r\n    const anytoken = tokenInfoOut?.isFromLiquidity && tokenInfoOut?.isLiquidity ? anyToken?.address : undefined\r\n    const underlying = tokenInfoIn?.address\r\n    return anytoken && underlying ? [{ anytoken, underlying }] : []\r\n  }, [anyToken?.address, tokenInfoIn?.address, tokenInfoOut?.isFromLiquidity, tokenInfoOut?.isLiquidity])\r\n\r\n  const poolParamOut = useMemo(() => {\r\n    return listTokenOut\r\n      .map(({ multichainInfo: token }) => ({\r\n        anytoken: token?.isLiquidity ? token?.anytoken?.address : undefined,\r\n        underlying: token?.underlying?.address,\r\n      }))\r\n      .filter(e => e.anytoken && e.underlying) as { anytoken: string; underlying: string }[]\r\n  }, [listTokenOut])\r\n\r\n  const poolDataIn = useMultichainPool(chainId, poolParamIn)\r\n  const poolDataOut = useMultichainPool(chainIdOut, poolParamOut)\r\n\r\n  useEffect(() => {\r\n    const address = anyToken?.address\r\n    let poolValueIn: string | undefined\r\n    if (address && poolDataIn?.[address]?.balanceOf) {\r\n      poolValueIn = calcPoolValue(poolDataIn[address]?.balanceOf, anyToken?.decimals)\r\n    }\r\n    setPoolValue(poolValue => ({ ...poolValue, poolValueIn }))\r\n  }, [poolDataIn, anyToken])\r\n\r\n  useEffect(() => {\r\n    const poolValueOutMap: PoolValueOutMap = {}\r\n    let poolValueOut: string | undefined | number\r\n    let tokenWithMaxPool\r\n    let maxPoolValue = -1\r\n    let hasUnlimitedPool = false\r\n\r\n    if (poolDataOut && listTokenOut.length) {\r\n      listTokenOut.forEach(token => {\r\n        const anytokenAddress = token.multichainInfo?.anytoken?.address ?? ''\r\n        const poolInfo = poolDataOut?.[anytokenAddress]\r\n        if (!poolInfo) {\r\n          tokenWithMaxPool = token\r\n          hasUnlimitedPool = true\r\n          return\r\n        }\r\n\r\n        if (!poolInfo?.balanceOf || !token?.multichainInfo?.anytoken?.decimals) return\r\n        const calcValue = calcPoolValue(poolInfo?.balanceOf, token?.multichainInfo?.anytoken?.decimals)\r\n        poolValueOutMap[anytokenAddress] = calcValue\r\n        if (Number(calcValue) > maxPoolValue && !hasUnlimitedPool) {\r\n          tokenWithMaxPool = token\r\n          maxPoolValue = Number(calcValue)\r\n        }\r\n      })\r\n    }\r\n    const tokenOut = tokenWithMaxPool || listTokenOut[0] || null\r\n    const anyTokenOut = tokenOut?.multichainInfo?.anytoken?.address\r\n    if (typeof anyTokenOut === 'string' && poolValueOutMap[anyTokenOut]) {\r\n      poolValueOut = poolValueOutMap[anyTokenOut]\r\n    }\r\n    setBridgeState({ tokenOut })\r\n    setPoolValue(poolValue => ({ ...poolValue, poolValueOut }))\r\n    setBridgePoolInfo({ poolValueOutMap })\r\n  }, [poolDataOut, listTokenOut, setBridgePoolInfo, setBridgeState])\r\n\r\n  useEffect(() => {\r\n    if (!listChainOut.find(el => el === chainIdOut)) setBridgeState({ chainIdOut: listChainOut[0] })\r\n  }, [setBridgeState, listChainOut, chainIdOut])\r\n\r\n  useEffect(() => {\r\n    setInputAmount('')\r\n  }, [tokenInfoIn, chainId])\r\n\r\n  const prevChain = usePrevious(chainId)\r\n  useEffect(() => {\r\n    if (chainId !== prevChain && prevChain) {\r\n      resetBridgeState()\r\n    }\r\n  }, [chainId, prevChain, resetBridgeState])\r\n\r\n  const useSwapMethods = tokenInfoOut?.routerABI\r\n  const routerToken = tokenInfoOut?.router && isAddress(tokenInfoOut?.router) ? tokenInfoOut?.router : undefined\r\n\r\n  const { execute: onWrap, inputError: wrapInputError } = useBridgeCallback(\r\n    inputAmount,\r\n    anyToken?.address,\r\n    routerToken,\r\n    tokenInfoIn?.tokenType === 'NATIVE' || !!useSwapMethods?.includes('anySwapOutNative'),\r\n    tokenInfoOut?.type === 'swapin' ? tokenInfoOut?.DepositAddress : account,\r\n  )\r\n\r\n  const inputError: string | undefined | { state: 'warn' | 'error'; tip: string } = useMemo(() => {\r\n    if (!listTokenOut.length && !listTokenIn.length && !loadingToken) {\r\n      return { state: 'error', tip: t`Cannot get token info. Please try again later.` }\r\n    }\r\n\r\n    const inputNumber = Number(inputAmount)\r\n\r\n    if (!tokenInfoIn || !chainIdOut || !tokenInfoOut || inputNumber === 0) return\r\n\r\n    if (isNaN(inputNumber)) return t`Input amount is not valid`\r\n\r\n    if (inputNumber < Number(tokenInfoOut.MinimumSwap)) {\r\n      return t`The amount to bridge must be more than ${formattedNum(tokenInfoOut.MinimumSwap, false, 5)} ${\r\n        tokenInfoIn.symbol\r\n      }`\r\n    }\r\n    if (inputNumber > Number(tokenInfoOut.MaximumSwap)) {\r\n      return t`The amount to bridge must be less than ${formattedNum(tokenInfoOut.MaximumSwap)} ${tokenInfoIn.symbol}`\r\n    }\r\n\r\n    if (tokenInfoOut.isLiquidity && tokenInfoOut.underlying) {\r\n      const poolLiquidity = formatPoolValue(poolValue.poolValueOut)\r\n      if (inputNumber > Number(poolValue.poolValueOut))\r\n        return t`The bridge amount must be less than the current available amount of the pool which is ${poolLiquidity} ${tokenInfoOut.symbol}.`\r\n\r\n      const ratio = 0.7\r\n      if (inputNumber > ratio * Number(poolValue.poolValueOut)) {\r\n        return {\r\n          state: 'warn',\r\n          tip: t`Note: Your transfer amount (${formattedNum(inputAmount, false, 5)} ${\r\n            tokenInfoIn.symbol\r\n          }) is more than ${100 * ratio}% of the available liquidity (${poolLiquidity} ${tokenInfoOut.symbol})!`,\r\n        }\r\n      }\r\n    }\r\n    if (!tryParseAmount(inputAmount, currencyIn)) {\r\n      return t`Your amount is invalid.`\r\n    }\r\n\r\n    const isWrapInputError = wrapInputError && inputNumber > 0\r\n    if (isWrapInputError) return t`Insufficient ${tokenInfoIn?.symbol} balance`\r\n    return\r\n  }, [\r\n    tokenInfoIn,\r\n    chainIdOut,\r\n    wrapInputError,\r\n    inputAmount,\r\n    tokenInfoOut,\r\n    poolValue.poolValueOut,\r\n    loadingToken,\r\n    listTokenOut,\r\n    listTokenIn,\r\n    currencyIn,\r\n  ])\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      if (tokenInfoIn) setInputAmount(value)\r\n    },\r\n    [tokenInfoIn],\r\n  )\r\n\r\n  const showPreview = () => {\r\n    setSwapState(state => ({ ...state, showConfirm: true, swapErrorMessage: '', txHash: '' }))\r\n    if (chainId && chainIdOut) {\r\n      mixpanelHandler(MIXPANEL_TYPE.BRIDGE_CLICK_REVIEW_TRANSFER, {\r\n        from_network: NETWORKS_INFO[chainId].name,\r\n        to_network: NETWORKS_INFO[chainIdOut].name,\r\n      })\r\n    }\r\n  }\r\n\r\n  const hidePreview = useCallback(() => {\r\n    setSwapState(state => ({ ...state, showConfirm: false }))\r\n  }, [])\r\n\r\n  const handleSwap = useCallback(async () => {\r\n    try {\r\n      if (!useSwapMethods) return\r\n      setSwapState(state => ({ ...state, attemptingTxn: true }))\r\n      if (chainId && chainIdOut) {\r\n        mixpanelHandler(MIXPANEL_TYPE.BRIDGE_CLICK_TRANSFER, {\r\n          from_token: tokenInfoIn?.symbol,\r\n          to_token: tokenInfoOut?.symbol,\r\n          bridge_fee: outputInfo.fee,\r\n          from_network: NETWORKS_INFO[chainId].name,\r\n          to_network: NETWORKS_INFO[chainIdOut].name,\r\n          trade_qty: inputAmount,\r\n        })\r\n      }\r\n      const txHash = await onWrap(useSwapMethods)\r\n      setInputAmount('')\r\n      setSwapState(state => ({ ...state, attemptingTxn: false, txHash }))\r\n    } catch (error) {\r\n      console.error(error)\r\n      setSwapState(state => ({ ...state, attemptingTxn: false, swapErrorMessage: error?.message || error }))\r\n    }\r\n  }, [\r\n    useSwapMethods,\r\n    onWrap,\r\n    chainId,\r\n    chainIdOut,\r\n    inputAmount,\r\n    outputInfo.fee,\r\n    mixpanelHandler,\r\n    tokenInfoIn?.symbol,\r\n    tokenInfoOut?.symbol,\r\n  ])\r\n\r\n  const maxAmountInput = useCurrencyBalance(currencyIn)?.toExact()\r\n  const handleMaxInput = useCallback(() => {\r\n    maxAmountInput && setInputAmount(maxAmountInput)\r\n  }, [maxAmountInput])\r\n\r\n  const approveSpender = (() => {\r\n    const isRouter = !['swapin', 'swapout'].includes(tokenInfoOut?.type ?? '')\r\n    if (tokenInfoOut?.isApprove) {\r\n      return isRouter ? tokenInfoOut.spender : anyToken?.address\r\n    }\r\n    return undefined\r\n  })()\r\n\r\n  const formatInputBridgeValue = tryParseAmount(\r\n    inputAmount,\r\n    currencyIn && tokenInfoOut?.isApprove ? currencyIn : undefined,\r\n  )\r\n  const [approval, approveCallback] = useApproveCallback(\r\n    formatInputBridgeValue && tokenInfoOut?.isApprove ? formatInputBridgeValue : undefined,\r\n    approveSpender,\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n    if (approval === ApprovalState.NOT_APPROVED) {\r\n      setApprovalSubmitted(false)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const onCurrencySelect = useCallback(\r\n    (tokenIn: WrappedTokenInfo) => {\r\n      setBridgeState({ tokenIn })\r\n    },\r\n    [setBridgeState],\r\n  )\r\n  const onCurrencySelectDest = useCallback(\r\n    (tokenOut: WrappedTokenInfo) => {\r\n      setBridgeState({ tokenOut })\r\n      const anyToken = tokenOut?.multichainInfo?.anytoken?.address ?? ''\r\n      setPoolValue(state => ({ ...state, poolValueOut: poolValueOutMap[anyToken] }))\r\n    },\r\n    [setBridgeState, poolValueOutMap],\r\n  )\r\n  const onSelectDestNetwork = useCallback(\r\n    (chainId: ChainId) => {\r\n      setBridgeState({ chainIdOut: chainId })\r\n    },\r\n    [setBridgeState],\r\n  )\r\n\r\n  const showApproveFlow =\r\n    !inputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED))\r\n\r\n  const disableBtnApproved = approval !== ApprovalState.NOT_APPROVED || approvalSubmitted || !!inputError\r\n  const disableBtnReviewTransfer =\r\n    !!inputError ||\r\n    [inputAmount, tokenInfoIn, tokenInfoOut, chainIdOut].some(e => !e) ||\r\n    (approval !== ApprovalState.APPROVED && tokenInfoOut?.isApprove)\r\n  return (\r\n    <>\r\n      <Flex style={{ position: 'relative', flexDirection: 'column', gap: 22, alignItems: 'center' }}>\r\n        <SwapFormWrapper style={{ position: 'unset' }}>\r\n          <AppBodyWrapped style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\r\n            <Flex flexDirection={'column'}>\r\n              <Label>\r\n                <Trans>You Transfer</Trans>\r\n              </Label>\r\n              <Tooltip\r\n                text={typeof inputError === 'string' ? inputError : ''}\r\n                show={typeof inputError === 'string'}\r\n                placement=\"top\"\r\n                width=\"fit-content\"\r\n                style={{ maxWidth: '230px' }}\r\n              >\r\n                <CurrencyInputPanelBridge\r\n                  chainIds={listChainIn}\r\n                  selectedChainId={chainId}\r\n                  onSelectNetwork={changeNetwork}\r\n                  error={typeof inputError === 'string'}\r\n                  value={inputAmount}\r\n                  onUserInput={handleTypeInput}\r\n                  onMax={handleMaxInput}\r\n                  onCurrencySelect={onCurrencySelect}\r\n                  id=\"swap-currency-input\"\r\n                />\r\n              </Tooltip>\r\n            </Flex>\r\n\r\n            <PoolInfo chainId={chainId} tokenIn={tokenInfoIn} poolValue={poolValue.poolValueIn} />\r\n\r\n            <div>\r\n              <Flex alignItems={'flex-end'} justifyContent=\"space-between\">\r\n                <Label>\r\n                  <Trans>You Receive</Trans>\r\n                </Label>\r\n                <ArrowWrapper>\r\n                  <ArrowUp width={24} fill={theme.subText} style={{ cursor: 'default' }} />\r\n                </ArrowWrapper>\r\n              </Flex>\r\n              <CurrencyInputPanelBridge\r\n                chainIds={listChainOut}\r\n                onSelectNetwork={onSelectDestNetwork}\r\n                selectedChainId={chainIdOut}\r\n                isOutput\r\n                value={outputInfo.outputAmount.toString()}\r\n                onCurrencySelect={onCurrencySelectDest}\r\n                id=\"swap-currency-output\"\r\n              />\r\n            </div>\r\n\r\n            <PoolInfo chainId={chainIdOut} tokenIn={tokenInfoIn} poolValue={poolValue.poolValueOut} />\r\n\r\n            {typeof inputError !== 'string' && inputError?.state && (\r\n              <ErrorWarningPanel title={inputError?.tip} type={inputError?.state} />\r\n            )}\r\n            {!account ? (\r\n              <ButtonLight onClick={toggleWalletModal}>\r\n                <Trans>Connect Wallet</Trans>\r\n              </ButtonLight>\r\n            ) : (\r\n              showApproveFlow && (\r\n                <>\r\n                  <RowBetween>\r\n                    <ButtonConfirmed\r\n                      onClick={approveCallback}\r\n                      disabled={disableBtnApproved}\r\n                      width=\"48%\"\r\n                      altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\r\n                      confirmed={approval === ApprovalState.APPROVED}\r\n                    >\r\n                      {approval === ApprovalState.PENDING ? (\r\n                        <AutoRow gap=\"6px\" justify=\"center\">\r\n                          <Trans>Approving</Trans> <Loader stroke=\"white\" />\r\n                        </AutoRow>\r\n                      ) : (\r\n                        <Flex alignContent={'center'}>\r\n                          <MouseoverTooltip\r\n                            placement=\"bottom\"\r\n                            width=\"300px\"\r\n                            text={t`You would need to first allow Multichain smart contract to use your ${tokenInfoIn?.symbol}. This has to be done only once for each token.`}\r\n                          >\r\n                            <Info size={18} />\r\n                          </MouseoverTooltip>\r\n                          <Text marginLeft={'5px'}>\r\n                            <Trans>Approve {tokenInfoIn?.symbol}</Trans>\r\n                          </Text>\r\n                        </Flex>\r\n                      )}\r\n                    </ButtonConfirmed>\r\n                    <ButtonError width=\"48%\" id=\"swap-button\" disabled={disableBtnReviewTransfer} onClick={showPreview}>\r\n                      <Text fontSize={16} fontWeight={500}>\r\n                        {t`Review transfer`}\r\n                      </Text>\r\n                    </ButtonError>\r\n                  </RowBetween>\r\n                  <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\r\n                </>\r\n              )\r\n            )}\r\n            {!showApproveFlow && account && (\r\n              <ButtonError onClick={showPreview} disabled={disableBtnReviewTransfer}>\r\n                <Text fontWeight={500}>{t`Review Transfer`}</Text>\r\n              </ButtonError>\r\n            )}\r\n            <Flex justifyContent={'flex-end'}>\r\n              <Flex alignItems={'center'} style={{ gap: 6 }}>\r\n                <Text color={theme.subText} fontSize={12}>\r\n                  Powered by\r\n                </Text>\r\n                <ExternalLink href=\"https://multichain.org/\">\r\n                  <img\r\n                    src={isDark ? MultichainLogoLight : MultichainLogoDark}\r\n                    alt=\"kyberswap with multichain\"\r\n                    height={13}\r\n                  />\r\n                </ExternalLink>\r\n              </Flex>\r\n            </Flex>\r\n          </AppBodyWrapped>\r\n        </SwapFormWrapper>\r\n\r\n        <AdvancedSwapDetailsDropdownBridge outputInfo={outputInfo} />\r\n      </Flex>\r\n\r\n      <ComfirmBridgeModal swapState={swapState} onDismiss={hidePreview} onSwap={handleSwap} outputInfo={outputInfo} />\r\n    </>\r\n  )\r\n}\r\n","import { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { Trans } from '@lingui/macro'\r\nimport { useCallback, useEffect, useRef } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { PageWrapper } from 'components/swapv2/styleds'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useBridgeState } from 'state/bridge/hooks'\r\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\r\nimport { isAddress } from 'utils'\r\nimport { isTokenNative } from 'utils/tokenInfo'\r\n\r\nimport BridgeHistory from './BridgeTransfers'\r\nimport Disclaimer from './Disclaimer'\r\nimport SwapForm from './SwapForm'\r\nimport {\r\n  BridgeLocalStorageKeys,\r\n  fetchTokenVersion,\r\n  getBridgeLocalstorage,\r\n  getChainlist,\r\n  getTokenlist,\r\n  setBridgeLocalstorage,\r\n} from './helpers'\r\nimport { MultiChainTokenInfo } from './type'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 22px;\r\n`\r\nconst Content = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 48px;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaWidth.upToMedium`\r\n    gap: 24px;\r\n    flex-direction: column;\r\n  `}\r\n`\r\nconst Title = styled.h1`\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.primary};\r\n  font-size: 20px;\r\n  margin: 0;\r\n`\r\nconst TIMEOUT = 'TIMEOUT'\r\nfunction timeout() {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(TIMEOUT)\r\n    }, 1000 * 3)\r\n  })\r\n}\r\nexport default function Bridge() {\r\n  const theme = useTheme()\r\n  const { chainId, isSolana } = useActiveWeb3React()\r\n  const [{ tokenInfoIn, chainIdOut }, setBridgeState] = useBridgeState()\r\n  const curChainId = useRef(chainId)\r\n  curChainId.current = chainId\r\n\r\n  const formatAndSaveToken = useCallback(\r\n    (tokens: any, chainIdRequest: ChainId) => {\r\n      let native: WrappedTokenInfo | undefined\r\n      if (curChainId.current !== chainIdRequest || !chainIdRequest) return // prevent api 1 call first but finished later\r\n      const result: WrappedTokenInfo[] = []\r\n      Object.keys(tokens).forEach(key => {\r\n        const token = { ...tokens[key] } as MultiChainTokenInfo\r\n        const { address, logoUrl, name, decimals, symbol } = token\r\n        if (!isAddress(chainId, address)) {\r\n          return\r\n        }\r\n        token.key = key\r\n        token.chainId = chainIdRequest\r\n        const wrappedToken = new WrappedTokenInfo({\r\n          chainId: chainIdRequest,\r\n          decimals,\r\n          symbol,\r\n          name,\r\n          address,\r\n          logoURI: logoUrl,\r\n          multichainInfo: token,\r\n        })\r\n        result.push(wrappedToken)\r\n        if (isTokenNative(wrappedToken, chainIdRequest)) {\r\n          native = wrappedToken\r\n        }\r\n      })\r\n      setBridgeState({ listTokenIn: result, tokenIn: native || result[0], loadingToken: false })\r\n    },\r\n    [chainId, setBridgeState],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setBridgeState({ loadingToken: true })\r\n        const oldVersion = getBridgeLocalstorage(BridgeLocalStorageKeys.TOKEN_VERSION)\r\n        let version\r\n        try {\r\n          version = await Promise.race([timeout(), fetchTokenVersion()])\r\n        } catch (error) {}\r\n\r\n        const isStaleData = oldVersion !== version || !version || version === TIMEOUT\r\n        if (isStaleData && version !== TIMEOUT) {\r\n          setBridgeLocalstorage(BridgeLocalStorageKeys.TOKEN_VERSION, version)\r\n        }\r\n\r\n        const data = await Promise.allSettled([\r\n          getChainlist(isStaleData),\r\n          chainId ? getTokenlist(chainId, isStaleData) : Promise.reject(),\r\n        ])\r\n        if (data[0].status === 'fulfilled') {\r\n          const listChainIn = data[0].value\r\n          setBridgeState({ listChainIn })\r\n        }\r\n        if (data[1].status === 'fulfilled' && chainId) {\r\n          const tokens = data[1].value\r\n          formatAndSaveToken(tokens, chainId)\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    }\r\n\r\n    if (chainId) {\r\n      fetchData()\r\n    }\r\n  }, [chainId, setBridgeState, formatAndSaveToken])\r\n\r\n  useEffect(() => {\r\n    const destChainInfo = tokenInfoIn?.destChains || {}\r\n    if (!chainIdOut || !tokenInfoIn || !chainId) {\r\n      setBridgeState({ listTokenOut: [] })\r\n      return\r\n    }\r\n    const map = chainIdOut ? destChainInfo[chainIdOut] ?? {} : {}\r\n    const listTokenOut: WrappedTokenInfo[] = []\r\n    Object.keys(map).forEach(hash => {\r\n      const token = { ...map[hash] }\r\n      token.key = hash\r\n      const { decimals, name, address, symbol } = token as MultiChainTokenInfo\r\n      if (!isAddress(chainId, address)) return\r\n      listTokenOut.push(\r\n        new WrappedTokenInfo({\r\n          chainId: chainIdOut,\r\n          decimals,\r\n          symbol,\r\n          name,\r\n          address,\r\n          logoURI: tokenInfoIn.logoUrl,\r\n          multichainInfo: token,\r\n        }),\r\n      )\r\n    })\r\n    setBridgeState({ listTokenOut })\r\n  }, [chainIdOut, tokenInfoIn, chainId, setBridgeState])\r\n\r\n  if (isSolana) return <Redirect to=\"/\" />\r\n  return (\r\n    <PageWrapper>\r\n      <Disclaimer />\r\n      <Content>\r\n        <Container>\r\n          <div>\r\n            <Title>\r\n              <Trans>Bridge</Trans>\r\n            </Title>\r\n            <Text fontSize={12} color={theme.subText} marginTop={'8px'}>\r\n              <Trans>Easily transfer tokens from one chain to another</Trans>\r\n            </Text>\r\n          </div>\r\n          <SwapForm />\r\n        </Container>\r\n        <BridgeHistory />\r\n      </Content>\r\n    </PageWrapper>\r\n  )\r\n}\r\n","import { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { MultiChainTokenInfo } from 'pages/Bridge/type'\r\nimport { AppDispatch, AppState } from 'state'\r\n\r\nimport {\r\n  BridgeStateParams,\r\n  BridgeStatePoolParams,\r\n  resetBridgeState as resetBridgeStateAction,\r\n  setBridgePoolInfo as setBridgePoolInfoAction,\r\n  setBridgeState,\r\n} from './actions'\r\nimport { BridgeState } from './reducer'\r\n\r\nexport function useBridgeState(): [BridgeState, (value: BridgeStateParams) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const bridge = useSelector((state: AppState) => state.bridge)\r\n  const setState = useCallback((data: BridgeStateParams) => dispatch(setBridgeState(data)), [dispatch])\r\n  return [bridge, setState]\r\n}\r\n\r\nexport function useBridgeStateHandler() {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const resetBridgeState = useCallback(() => dispatch(resetBridgeStateAction()), [dispatch])\r\n  const setBridgePoolInfo = useCallback(\r\n    (data: BridgeStatePoolParams) => dispatch(setBridgePoolInfoAction(data)),\r\n    [dispatch],\r\n  )\r\n\r\n  const setBridgeState = useBridgeState()[1]\r\n  return { resetBridgeState, setBridgeState, setBridgePoolInfo }\r\n}\r\n\r\nexport type OutputBridgeInfo = {\r\n  fee: string | number\r\n  outputAmount: string | number\r\n  time: string\r\n  inputAmount: string\r\n}\r\nfunction calcReceiveValueAndFee(inputBridgeValue: string, tokenOut: MultiChainTokenInfo | undefined): OutputBridgeInfo {\r\n  const inputAmount = Number(inputBridgeValue)\r\n  if (inputAmount && tokenOut) {\r\n    const SwapFeeRatePerMillion = Number(tokenOut.SwapFeeRatePerMillion)\r\n    const MaximumSwapFee = Number(tokenOut.MaximumSwapFee)\r\n    const MinimumSwapFee = Number(tokenOut.MinimumSwapFee)\r\n    const BaseFeePercent = Number(tokenOut.BaseFeePercent)\r\n    const minFee = BaseFeePercent ? (MinimumSwapFee / (100 + BaseFeePercent)) * 100 : MinimumSwapFee\r\n    const baseFee = BaseFeePercent ? (minFee * BaseFeePercent) / 100 : 0\r\n\r\n    let fee = (inputAmount * SwapFeeRatePerMillion) / 100 // SwapFeeRatePerMillion: 0 or 0.1\r\n    if (fee < minFee) {\r\n      fee = minFee\r\n    } else if (fee > MaximumSwapFee) {\r\n      fee = MaximumSwapFee\r\n    }\r\n    const value = inputAmount - fee - baseFee\r\n    if (value > 0) {\r\n      return {\r\n        fee,\r\n        outputAmount: value,\r\n        time: '~3-30 mins',\r\n        inputAmount: inputBridgeValue,\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    fee: '',\r\n    outputAmount: '',\r\n    time: '--',\r\n    inputAmount: inputBridgeValue,\r\n  }\r\n}\r\n\r\nexport function useBridgeOutputValue(inputBridgeValue: string) {\r\n  const [{ tokenInfoOut }] = useBridgeState()\r\n  return useMemo(() => {\r\n    return calcReceiveValueAndFee(inputBridgeValue, tokenInfoOut)\r\n  }, [inputBridgeValue, tokenInfoOut])\r\n}\r\n","import { Fraction } from '@kyberswap/ks-sdk-core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BIPS_BASE, RESERVE_USD_DECIMALS } from 'constants/index'\r\nimport { FeeConfig } from 'hooks/useSwapV2Callback'\r\nimport { Aggregator } from 'utils/aggregator'\r\nimport { formattedNum } from 'utils/index'\r\n\r\nimport { toFixed } from './numbers'\r\n\r\n/**\r\n * Get Fee Amount in a Trade (unit: USD)\r\n * @param trade\r\n * @param feeConfig\r\n */\r\nexport function getFormattedFeeAmountUsd(trade: Aggregator, feeConfig: FeeConfig | undefined) {\r\n  if (feeConfig) {\r\n    const amountInUsd = new Fraction(\r\n      parseUnits(toFixed(trade.amountInUsd), RESERVE_USD_DECIMALS).toString(),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(RESERVE_USD_DECIMALS)),\r\n    )\r\n    if (amountInUsd) {\r\n      // feeAmount might < 1.\r\n      const feeAmountFraction = new Fraction(\r\n        parseUnits(feeConfig.feeAmount, RESERVE_USD_DECIMALS).toString(),\r\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(RESERVE_USD_DECIMALS)),\r\n      )\r\n      const feeAmountDecimal = feeAmountFraction.divide(BIPS_BASE)\r\n      const feeAmountUsd = amountInUsd.multiply(feeAmountDecimal).toSignificant(RESERVE_USD_DECIMALS)\r\n      return formattedNum(feeAmountUsd, true)\r\n    }\r\n  }\r\n\r\n  return '--'\r\n}\r\n"],"sourceRoot":""}