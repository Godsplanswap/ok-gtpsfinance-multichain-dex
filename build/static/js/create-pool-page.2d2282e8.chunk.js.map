{"version":3,"sources":["pages/CreatePool/FeeTypeSelector.tsx","pages/CreatePool/StaticFeeSelector.tsx","pages/CreatePool/index.tsx","pages/CreatePool/styled.tsx","state/pair/hooks.ts"],"names":["ToggleButton","styled","span","theme","primary","element","offsetLeft","offsetWidth","ToggleElement","isActive","textReverse","text","ToggleWrapper","button","buttonBlack","FeeTypeSelector","active","onChange","buttonsRef","bgColor","useRef","useState","activeElement","setActiveElement","useEffect","current","buttons","name","content","QuestionHelper","useCurrentColor","map","ref","el","onClick","firstRender","SelectWrapper","select","buttonGray","StaticFeeSelector","options","title","above400","useMedia","setTimeout","option","e","parseFloat","target","value","style","background","color","FEE_TYPE","PageWrapper","div","Container","GridColumn","TokenColumn","AutoColumn","border","AMPColumn","ActiveText","Section","Card","NumericalInput2","NumericalInput","USDPrice","subText","Warning","warning","CreatePool","match","params","currencyIdA","currencyIdB","history","useActiveWeb3React","account","chainId","isEVM","networkInfo","library","useWeb3React","useTheme","currencyA","useCurrency","currencyB","STATIC_FEE_OPTIONS","selectedFee","setSelectedFee","onlyStaticFee","ONLY_STATIC_FEE_CHAINS","includes","onlyDynamicFee","ONLY_DYNAMIC_FEE_CHAINS","currencies","useMemo","Field","CURRENCY_A","undefined","CURRENCY_B","pairs","usePair","useDerivedPairInfo","currencyAIsETHER","isNative","currencyAIsWETH","equals","WETH","currencyBIsETHER","currencyBIsWETH","toggleWalletModal","useWalletModalToggle","useExpertModeManager","expertMode","STATIC","feeType","setFeeType","useMintState","independentField","typedValue","otherTypedValue","useDerivedMintInfo","dependentField","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","poolTokenPercentage","error","unAmplifiedPairAddress","nativeA","useCurrencyConvertedToNative","nativeB","amp","setAmp","poolsList","filter","isPoolExisted","length","ampConvertedInBps","toString","Fraction","JSBI","BigInt","parseUnits","linkToUnamplifiedPool","equalTo","isZero","useMintActionHandlers","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","reduce","accumulator","field","maxAmountSpend","routerAddress","classic","static","router","dynamic","useApproveCallback","approvalA","approveACallback","approvalB","approveBCallback","addTransactionWithType","useTransactionAdder","addPair","usePairAdderByTokens","onAdd","getDynamicFeeRouterContract","getStaticFeeRouterContract","parsedAmountA","parsedAmountB","amountsMin","calculateSlippageAmount","tokenBIsETH","estimate","estimateGas","addLiquidityNewPoolETH","method","args","wrapped","address","quotient","toHexString","BigNumber","from","addLiquidityNewPool","console","log","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","cA","cB","hash","type","TRANSACTION_TYPE","CREATE_POOL","summary","symbol","arbitrary","token_1","token_2","tA","tB","catch","code","modalHeader","gap","Row","fontSize","fontWeight","lineHeight","marginRight","modalBottom","ConfirmAddModalBottom","amplification","pendingText","isWrappedTokenInPool","useCallback","currency","selectedCurrency","handleCurrencyASelect","selectedCurrencyA","newCurrencyIdA","currencyId","push","handleCurrencyBSelect","selectedCurrencyB","newCurrencyIdB","handleDismissConfirmation","tokens","usdPrices","useTokensPrice","marketPrices","useTokensMarketPrice","poolRatio","Number","marketRatio","showSanityPriceWarning","Math","abs","mixpanelHandler","useMixpanel","tutorialType","TutorialType","CLASSIC_CREATE_POOL","action","LiquidityAction","CREATE","onShared","MIXPANEL_TYPE","CREATE_POOL_LINK_SHARED","TransactionConfirmationModal","isOpen","onDismiss","topContent","bottomContent","id","to","Column","link","CurrencyInputPanel","positionMax","onUserInput","onMax","toExact","onHalf","divide","onCurrencySelect","disableCurrencySelect","showCommonBases","justifyContent","alignItems","marginTop","formattedNum","Loader","replace","NativeCurrencies","size","text2","PairState","INVALID","padding","borderRadius","subHeader","PoolPriceBar","height","CREATE_POOL_AMP_HINT","className","fee","feeRangeCalc","yellow2","marginLeft","ApprovalState","NOT_APPROVED","PENDING","APPROVED","Button","disabled","width"],"mappings":"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","file":"static/js/create-pool-page.2d2282e8.chunk.js","sourcesContent":["import { Trans, t } from '@lingui/macro'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport QuestionHelper from 'components/QuestionHelper'\r\n\r\nconst ToggleButton = styled.span<{ size?: string; element?: HTMLSpanElement }>`\r\n  position: absolute;\r\n  transition: all 0.2s ease;\r\n  background-color: ${({ theme }) => theme.primary};\r\n  ${({ element }) => `transform: translateX(${element?.offsetLeft ?? 0}px); width: ${element?.offsetWidth || 0}px;`}\r\n  border-radius: 20px;\r\n  height: 100%;\r\n  top: 0;\r\n`\r\n\r\nconst ToggleElement = styled.span<{\r\n  isActive?: boolean\r\n}>`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  height: 32px;\r\n  padding: 6px 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${({ isActive, theme }) => (isActive ? theme.textReverse : theme.text)};\r\n  z-index: 1;\r\n  transition: all 0.2s ease;\r\n  flex: 1;\r\n  cursor: pointer;\r\n`\r\n\r\nconst ToggleWrapper = styled.button<{ background?: string }>`\r\n  position: relative;\r\n  border-radius: 20px;\r\n  background: ${({ theme }) => theme.buttonBlack};\r\n  display: flex;\r\n  width: fit-content;\r\n  outline: none;\r\n  padding: 0;\r\n  border: none;\r\n  width: 100%;\r\n`\r\n\r\ninterface FeeTypeSelectorProps {\r\n  active?: string\r\n  onChange: (type: string) => void\r\n  bgColor?: 'background' | 'buttonBlack'\r\n}\r\n\r\nexport default function FeeTypeSelector({ active = 'static', onChange, bgColor = 'background' }: FeeTypeSelectorProps) {\r\n  const buttonsRef = useRef<any>({})\r\n  const [activeElement, setActiveElement] = useState()\r\n\r\n  useEffect(() => {\r\n    setActiveElement(buttonsRef.current[active])\r\n  }, [active])\r\n  const buttons = [\r\n    {\r\n      name: 'static',\r\n      content: (\r\n        <>\r\n          <Trans>Static Fees</Trans>{' '}\r\n          <QuestionHelper\r\n            text={t`You can select the appropriate fee tier for your pool. For each trade that uses this liquidity pool, liquidity providers will earn this trading fee.`}\r\n            useCurrentColor\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      name: 'dynamic',\r\n      content: (\r\n        <>\r\n          <Trans>Dynamic Fees</Trans>{' '}\r\n          <QuestionHelper\r\n            text={t`Fees are adjusted dynamically according to market conditions to maximise returns for liquidity providers.`}\r\n            useCurrentColor\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ]\r\n  return (\r\n    <ToggleWrapper>\r\n      {buttons.map(button => {\r\n        return (\r\n          <ToggleElement\r\n            key={button.name}\r\n            ref={el => {\r\n              buttonsRef.current[button.name] = el\r\n            }}\r\n            isActive={active === button.name}\r\n            onClick={() => onChange(button.name)}\r\n          >\r\n            {button.content}\r\n          </ToggleElement>\r\n        )\r\n      })}\r\n      <ToggleButton element={activeElement} />\r\n    </ToggleWrapper>\r\n  )\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { useMedia } from 'react-use'\r\nimport styled from 'styled-components'\r\n\r\nconst ToggleButton = styled.span<{ size?: string; element?: HTMLSpanElement; firstRender?: boolean }>`\r\n  position: absolute;\r\n  transition: all ${({ firstRender }) => (firstRender ? '0s' : '0.2s')} ease;\r\n  background-color: ${({ theme }) => theme.primary};\r\n  ${({ element }) =>\r\n    `transform: translateX(${element?.offsetLeft ? element?.offsetLeft - 4 : 0}px); width: ${\r\n      element?.offsetWidth || 0\r\n    }px;`}\r\n  border-radius: 999px;\r\n  height: 28px;\r\n`\r\n\r\nconst ToggleElement = styled.span<{\r\n  isActive?: boolean\r\n}>`\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  height: 28px;\r\n  padding: 3px 6px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${({ isActive, theme }) => (isActive ? theme.textReverse : theme.text)};\r\n  z-index: 1;\r\n  transition: all 0.2s ease;\r\n  flex: 1;\r\n  cursor: pointer;\r\n\r\n  @media screen and (min-width: 450px) {\r\n    font-size: 14px;\r\n    padding: 6px 12px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.button<{ background?: string }>`\r\n  position: relative;\r\n  border-radius: 999px;\r\n  background: ${({ theme }) => theme.buttonBlack};\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 100%;\r\n  outline: none;\r\n  padding: 4px;\r\n  border: none;\r\n`\r\n\r\nconst SelectWrapper = styled.select`\r\n  padding: 10px 5px;\r\n  background: ${({ theme }) => theme.buttonGray};\r\n  color: ${({ theme }) => theme.text};\r\n  border-radius: 999px;\r\n  border: none;\r\n`\r\ninterface StaticFeeSelectorProps {\r\n  active?: number\r\n  onChange: (name: number) => void\r\n  options: { name: number; title: string }[]\r\n}\r\n\r\nexport default function StaticFeeSelector({\r\n  active = 1,\r\n  onChange,\r\n  options = [{ name: 1, title: '0.01%' }],\r\n}: StaticFeeSelectorProps) {\r\n  const buttonsRef = useRef<any>({})\r\n  const [activeElement, setActiveElement] = useState()\r\n  const firstRender = useRef<boolean>(true)\r\n  const above400 = useMedia('(min-width:400px)')\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      firstRender.current = false\r\n    }, 0)\r\n  }, [])\r\n  useEffect(() => {\r\n    setActiveElement(buttonsRef.current[active])\r\n  }, [active])\r\n\r\n  return above400 ? (\r\n    <ToggleWrapper>\r\n      {options.map(option => {\r\n        return (\r\n          <ToggleElement\r\n            key={option.name}\r\n            ref={el => {\r\n              buttonsRef.current[option.name] = el\r\n            }}\r\n            isActive={active === option.name}\r\n            onClick={() => onChange(option.name)}\r\n          >\r\n            {option.title}\r\n          </ToggleElement>\r\n        )\r\n      })}\r\n      <ToggleButton element={activeElement} firstRender={firstRender.current} />\r\n    </ToggleWrapper>\r\n  ) : (\r\n    <SelectWrapper\r\n      onChange={e => {\r\n        onChange(parseFloat(e.target.value))\r\n      }}\r\n      style={{ background: 'black', color: 'white' }}\r\n    >\r\n      {options.map(option => {\r\n        return (\r\n          <option key={option.name} value={option.name}>\r\n            {option.title}\r\n          </option>\r\n        )\r\n      })}\r\n    </SelectWrapper>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, Fraction, TokenAmount, WETH } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { AlertTriangle, Plus } from 'react-feather'\r\nimport { Link, Redirect, RouteComponentProps } from 'react-router-dom'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from 'components/Button'\r\nimport { BlueCard, LightCard } from 'components/Card'\r\nimport { AutoColumn, ColumnCenter } from 'components/Column'\r\nimport { ConfirmAddModalBottom } from 'components/ConfirmAddModalBottom'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport Loader from 'components/Loader'\r\nimport { AddRemoveTabs, LiquidityAction } from 'components/NavigationTabs'\r\nimport { PoolPriceBar, PoolPriceRangeBarToggle } from 'components/PoolPriceBar'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport Row, { AutoRow, RowBetween, RowFlat } from 'components/Row'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\r\nimport { TutorialType } from 'components/Tutorial'\r\nimport {\r\n  CREATE_POOL_AMP_HINT,\r\n  ONLY_DYNAMIC_FEE_CHAINS,\r\n  ONLY_STATIC_FEE_CHAINS,\r\n  STATIC_FEE_OPTIONS,\r\n} from 'constants/index'\r\nimport { EVMNetworkInfo } from 'constants/networks/type'\r\nimport { NativeCurrencies } from 'constants/tokens'\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport useMixpanel, { MIXPANEL_TYPE } from 'hooks/useMixpanel'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokensMarketPrice from 'hooks/useTokensMarketPrice'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { Dots, Wrapper } from 'pages/Pool/styleds'\r\nimport { useTokensPrice, useWalletModalToggle } from 'state/application/hooks'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\r\nimport { useDerivedPairInfo } from 'state/pair/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useExpertModeManager, usePairAdderByTokens, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { StyledInternalLink, TYPE } from 'theme'\r\nimport { calculateGasMargin, calculateSlippageAmount, formattedNum } from 'utils'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport { feeRangeCalc, useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport { getDynamicFeeRouterContract, getStaticFeeRouterContract } from 'utils/getContract'\r\nimport isZero from 'utils/isZero'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\n\r\nimport FeeTypeSelector from './FeeTypeSelector'\r\nimport StaticFeeSelector from './StaticFeeSelector'\r\nimport {\r\n  AMPColumn,\r\n  ActiveText,\r\n  Container,\r\n  GridColumn,\r\n  NumericalInput2,\r\n  PageWrapper,\r\n  Section,\r\n  TokenColumn,\r\n  USDPrice,\r\n  Warning,\r\n} from './styled'\r\n\r\nexport enum FEE_TYPE {\r\n  STATIC = 'static',\r\n  DYNAMIC = 'dynamic',\r\n}\r\n\r\nexport default function CreatePool({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\r\n  const { account, chainId, isEVM, networkInfo } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n  const theme = useTheme()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n  const [selectedFee, setSelectedFee] = useState(STATIC_FEE_OPTIONS[chainId]?.[0])\r\n\r\n  const onlyStaticFee = !!chainId && ONLY_STATIC_FEE_CHAINS.includes(chainId)\r\n  const onlyDynamicFee = !!chainId && ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)\r\n\r\n  const { pairs } = useDerivedPairInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n\r\n  const currencyAIsETHER = !!(chainId && currencyA && currencyA.isNative)\r\n  const currencyAIsWETH = !!(chainId && currencyA && currencyA.equals(WETH[chainId]))\r\n  const currencyBIsETHER = !!(chainId && currencyB && currencyB.isNative)\r\n  const currencyBIsWETH = !!(chainId && currencyB && currencyB.equals(WETH[chainId]))\r\n\r\n  const toggleWalletModal = useWalletModalToggle() // toggle wallet when disconnected\r\n\r\n  const [expertMode] = useExpertModeManager()\r\n\r\n  // fee types\r\n  const [feeType, setFeeType] = useState<string>(FEE_TYPE.STATIC)\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    poolTokenPercentage,\r\n    error,\r\n    unAmplifiedPairAddress,\r\n  } = useDerivedMintInfo(\r\n    currencyA ?? undefined,\r\n    currencyB ?? undefined,\r\n    undefined,\r\n    !onlyDynamicFee && feeType === FEE_TYPE.STATIC,\r\n  )\r\n  const nativeA = useCurrencyConvertedToNative(currencies[Field.CURRENCY_A])\r\n  const nativeB = useCurrencyConvertedToNative(currencies[Field.CURRENCY_B])\r\n\r\n  const [amp, setAmp] = useState('')\r\n  const onAmpChange = (e: any) => {\r\n    if (e.toString().length < 20) setAmp(e)\r\n  }\r\n\r\n  const poolsList = useMemo(() => pairs.map(([, pair]) => pair).filter(pair => pair !== null), [pairs])\r\n  const isPoolExisted = poolsList.length > 0\r\n\r\n  const ampConvertedInBps = !!amp.toString()\r\n    ? new Fraction(JSBI.BigInt(parseUnits(amp.toString() || '1', 20)), JSBI.BigInt(parseUnits('1', 16)))\r\n    : undefined\r\n\r\n  const linkToUnamplifiedPool =\r\n    !!ampConvertedInBps &&\r\n    ampConvertedInBps.equalTo(JSBI.BigInt(10000)) &&\r\n    !!unAmplifiedPairAddress &&\r\n    !isZero(unAmplifiedPairAddress)\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !(error || (+amp < 1 ? 'Enter amp (>=1)' : ''))\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  const routerAddress = useMemo(() => {\r\n    if (!isEVM) return\r\n    if (ONLY_STATIC_FEE_CHAINS.includes(chainId)) return (networkInfo as EVMNetworkInfo).classic.static.router\r\n    if (ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)) return (networkInfo as EVMNetworkInfo).classic.dynamic?.router\r\n    if (feeType === FEE_TYPE.STATIC) {\r\n      return (networkInfo as EVMNetworkInfo).classic.static.router\r\n    } else {\r\n      return (networkInfo as EVMNetworkInfo).classic.dynamic?.router\r\n    }\r\n  }, [chainId, feeType, isEVM, networkInfo])\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], routerAddress)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], routerAddress)\r\n\r\n  const addTransactionWithType = useTransactionAdder()\r\n  const addPair = usePairAdderByTokens()\r\n\r\n  async function onAdd() {\r\n    // if (!pair) return\r\n    if (!chainId || !library || !account) return\r\n\r\n    const router =\r\n      feeType === FEE_TYPE.STATIC && !onlyDynamicFee\r\n        ? getStaticFeeRouterContract(chainId, library, account)\r\n        : getDynamicFeeRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n    let estimate,\r\n      method: (...args: any) => Promise<TransactionResponse>,\r\n      args: Array<string | string[] | number>,\r\n      value: BigNumber | null\r\n\r\n    if (!ampConvertedInBps) return\r\n    if (currencyA.isNative || currencyB.isNative) {\r\n      const tokenBIsETH = currencyB.isNative\r\n      estimate = router.estimateGas.addLiquidityNewPoolETH\r\n      method = router.addLiquidityNewPoolETH\r\n      args = [\r\n        (tokenBIsETH ? currencyA?.wrapped : currencyB?.wrapped).address ?? '', // token\r\n        feeType === FEE_TYPE.STATIC && !onlyDynamicFee\r\n          ? [ampConvertedInBps.toSignificant(5), selectedFee?.toString() ?? '']\r\n          : ampConvertedInBps.toSignificant(5), //ampBps\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidityNewPool\r\n      method = router.addLiquidityNewPool\r\n      args = [\r\n        currencyA?.wrapped.address ?? '',\r\n        currencyB?.wrapped.address ?? '',\r\n        feeType === FEE_TYPE.STATIC && !onlyDynamicFee\r\n          ? [ampConvertedInBps.toSignificant(5), selectedFee?.toString() ?? '']\r\n          : ampConvertedInBps.toSignificant(5), //ampBps\r\n        parsedAmountA.quotient.toString(),\r\n        parsedAmountB.quotient.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n    console.log(args)\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then(estimatedGasLimit => {\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        })\r\n          .then(response => {\r\n            const cA = currencies[Field.CURRENCY_A]\r\n            const cB = currencies[Field.CURRENCY_B]\r\n            if (!!cA && !!cB) {\r\n              setAttemptingTxn(false)\r\n              addTransactionWithType({\r\n                hash: response.hash,\r\n                type: TRANSACTION_TYPE.CREATE_POOL,\r\n                summary:\r\n                  parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) +\r\n                  ' ' +\r\n                  cA.symbol +\r\n                  ' and ' +\r\n                  parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) +\r\n                  ' ' +\r\n                  cB.symbol,\r\n                arbitrary: {\r\n                  token_1: cA.symbol,\r\n                  token_2: cB.symbol,\r\n                  amp,\r\n                },\r\n              })\r\n              setTxHash(response.hash)\r\n              const tA = cA.wrapped\r\n              const tB = cB.wrapped\r\n              if (!!tA && !!tB) {\r\n                // In case subgraph sync is slow, doing this will show the pool in \"My Pools\" page.\r\n                addPair(tA, tB)\r\n              }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            setAttemptingTxn(false)\r\n            setShowConfirm(false)\r\n            // we only care if the error is something _other_ than the user rejected the tx\r\n            if (error?.code !== 4001) {\r\n              console.error(error)\r\n            }\r\n          })\r\n      })\r\n      .catch(error => {\r\n        setAttemptingTxn(false)\r\n        setShowConfirm(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (error?.code !== 4001) {\r\n          console.error(error)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return (\r\n      <AutoColumn gap=\"5px\">\r\n        <RowFlat>\r\n          <Text fontSize=\"24px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\r\n            {nativeA?.symbol + '/' + nativeB?.symbol}\r\n          </Text>\r\n        </RowFlat>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        pair={pair}\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={true}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n        amplification={ampConvertedInBps}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    nativeA?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${nativeB?.symbol}`\r\n\r\n  const isWrappedTokenInPool = useCallback(\r\n    (currency: Currency | null | undefined, selectedCurrency: Currency) => {\r\n      return (\r\n        chainId &&\r\n        currency &&\r\n        ((currency.isNative && selectedCurrency.equals(WETH[chainId])) ||\r\n          (currency.equals(WETH[chainId]) && selectedCurrency.isNative))\r\n      )\r\n    },\r\n    [chainId],\r\n  )\r\n  const handleCurrencyASelect = useCallback(\r\n    (selectedCurrencyA: Currency) => {\r\n      const newCurrencyIdA = currencyId(selectedCurrencyA, chainId)\r\n\r\n      // support WETH\r\n      if (isWrappedTokenInPool(currencyA, selectedCurrencyA)) {\r\n        history.push(`/create/${newCurrencyIdA}/${currencyIdB}`)\r\n      } else if (newCurrencyIdA === currencyIdB) {\r\n        history.push(`/create/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/create/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, history, currencyIdA, isWrappedTokenInPool, currencyA, chainId],\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (selectedCurrencyB: Currency) => {\r\n      const newCurrencyIdB = currencyId(selectedCurrencyB, chainId)\r\n\r\n      if (isWrappedTokenInPool(currencyB, selectedCurrencyB)) {\r\n        history.push(`/create/${currencyIdA}/${newCurrencyIdB}`)\r\n      } else if (newCurrencyIdB === currencyIdA) {\r\n        if (currencyIdB) {\r\n          history.push(`/create/${currencyIdB}/${currencyIdA}`)\r\n        } else {\r\n          history.push(`/create/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        history.push(`/create/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, history, currencyIdB, isWrappedTokenInPool, currencyB, chainId],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    setAmp('')\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  // const realPercentToken0 = pair\r\n  //   ? pair.reserve0\r\n  //       .divide(pair.virtualReserve0)\r\n  //       .multiply('100')\r\n  //       .divide(pair.reserve0.divide(pair.virtualReserve0).add(pair.reserve1.divide(pair.virtualReserve1)))\r\n  //   : new Fraction(JSBI.BigInt(50))\r\n\r\n  // const realPercentToken1 = new Fraction(JSBI.BigInt(100), JSBI.BigInt(1)).subtract(realPercentToken0 as Fraction)\r\n\r\n  // const percentToken0 = realPercentToken0.toSignificant(4)\r\n  // const percentToken1 = realPercentToken1.toSignificant(4)\r\n\r\n  const tokens = useMemo(\r\n    () => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]].map(currency => currency?.wrapped),\r\n    [currencies],\r\n  )\r\n\r\n  const usdPrices = useTokensPrice(tokens)\r\n  const marketPrices = useTokensMarketPrice(tokens)\r\n\r\n  const poolRatio = Number(price?.toSignificant(6))\r\n  const marketRatio = marketPrices[1] && marketPrices[0] / marketPrices[1]\r\n\r\n  const showSanityPriceWarning = !!(poolRatio && marketRatio && Math.abs(poolRatio - marketRatio) / marketRatio > 0.05)\r\n  const { mixpanelHandler } = useMixpanel()\r\n\r\n  useEffect(() => {\r\n    if (chainId) {\r\n      setSelectedFee(STATIC_FEE_OPTIONS[chainId]?.[0])\r\n    }\r\n  }, [chainId])\r\n\r\n  if (!isEVM) return <Redirect to=\"/\" />\r\n  return (\r\n    <PageWrapper>\r\n      <Container>\r\n        <AddRemoveTabs\r\n          tutorialType={TutorialType.CLASSIC_CREATE_POOL}\r\n          action={LiquidityAction.CREATE}\r\n          onShared={() => {\r\n            mixpanelHandler(MIXPANEL_TYPE.CREATE_POOL_LINK_SHARED, {\r\n              token_1: nativeA?.symbol,\r\n              token_2: nativeB?.symbol,\r\n            })\r\n          }}\r\n        />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            content={() =>\r\n              !linkToUnamplifiedPool ? (\r\n                <ConfirmationModalContent\r\n                  title={t`You are creating a pool`}\r\n                  onDismiss={handleDismissConfirmation}\r\n                  topContent={modalHeader}\r\n                  bottomContent={modalBottom}\r\n                />\r\n              ) : (\r\n                <ConfirmationModalContent\r\n                  title={t`Unamplified Pool existed`}\r\n                  onDismiss={handleDismissConfirmation}\r\n                  topContent={() => {\r\n                    return null\r\n                  }}\r\n                  bottomContent={() => {\r\n                    return (\r\n                      <>\r\n                        Please use the link below if you want to add liquidity to Unamplified Pool\r\n                        <StyledInternalLink\r\n                          onClick={handleDismissConfirmation}\r\n                          id=\"unamplified-pool-link\"\r\n                          to={`/add/${currencyIdA}/${currencyIdB}/${unAmplifiedPairAddress}`}\r\n                        >\r\n                          Go to unamplified pool\r\n                        </StyledInternalLink>\r\n                      </>\r\n                    )\r\n                  }}\r\n                />\r\n              )\r\n            }\r\n            pendingText={pendingText}\r\n          />\r\n          <AutoColumn gap=\"20px\">\r\n            <ColumnCenter>\r\n              <BlueCard>\r\n                <AutoColumn gap=\"10px\">\r\n                  {isPoolExisted && (\r\n                    <TYPE.link fontSize=\"14px\" lineHeight=\"22px\" color={'text1'} fontWeight=\"normal\">\r\n                      <Trans>Note: There are existing pools for this token pair. Please check</Trans>{' '}\r\n                      <Link to={`/pools/${currencyIdA}/${currencyIdB}`}>\r\n                        <Trans>here</Trans>\r\n                      </Link>\r\n                    </TYPE.link>\r\n                  )}\r\n                  <TYPE.link fontSize=\"14px\" lineHeight=\"22px\" color={theme.text} fontWeight=\"normal\">\r\n                    <Trans>\r\n                      You are creating a new pool and will be the first liquidity provider. The ratio of tokens you\r\n                      supply below will set the initial price of this pool. Once you are satisfied with the rate,\r\n                      proceed to supply liquidity.\r\n                    </Trans>\r\n                  </TYPE.link>\r\n                </AutoColumn>\r\n              </BlueCard>\r\n            </ColumnCenter>\r\n\r\n            <GridColumn>\r\n              <TokenColumn gap=\"20px\">\r\n                <ActiveText>Token</ActiveText>\r\n\r\n                <div>\r\n                  <CurrencyInputPanel\r\n                    positionMax=\"top\"\r\n                    value={formattedAmounts[Field.CURRENCY_A]}\r\n                    onUserInput={onFieldAInput}\r\n                    onMax={() => {\r\n                      onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                    }}\r\n                    onHalf={() => {\r\n                      onFieldAInput(currencyBalances[Field.CURRENCY_A]?.divide(2).toExact() ?? '')\r\n                    }}\r\n                    onCurrencySelect={handleCurrencyASelect}\r\n                    currency={currencies[Field.CURRENCY_A]}\r\n                    id=\"create-pool-input-tokena\"\r\n                    disableCurrencySelect={false}\r\n                    showCommonBases\r\n                  />\r\n                  <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0.5rem\">\r\n                    <USDPrice>\r\n                      {usdPrices[0] ? (\r\n                        `1 ${nativeA?.symbol} = ${formattedNum(usdPrices[0].toString(), true)}`\r\n                      ) : (\r\n                        <Loader />\r\n                      )}\r\n                    </USDPrice>\r\n\r\n                    {chainId && (currencyAIsWETH || currencyAIsETHER) && (\r\n                      <StyledInternalLink\r\n                        replace\r\n                        to={`/create/${\r\n                          currencyAIsETHER\r\n                            ? currencyId(WETH[chainId], chainId)\r\n                            : currencyId(NativeCurrencies[chainId], chainId)\r\n                        }/${currencyIdB}`}\r\n                      >\r\n                        {currencyAIsETHER ? <Trans>Use Wrapped Token</Trans> : <Trans>Use Native Token</Trans>}\r\n                      </StyledInternalLink>\r\n                    )}\r\n                  </Flex>\r\n                </div>\r\n                <ColumnCenter>\r\n                  <Plus size=\"16\" color={theme.text2} />\r\n                </ColumnCenter>\r\n                <div>\r\n                  <CurrencyInputPanel\r\n                    positionMax=\"top\"\r\n                    value={formattedAmounts[Field.CURRENCY_B]}\r\n                    onUserInput={onFieldBInput}\r\n                    onCurrencySelect={handleCurrencyBSelect}\r\n                    onMax={() => {\r\n                      onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                    }}\r\n                    onHalf={() => {\r\n                      onFieldBInput(currencyBalances[Field.CURRENCY_B]?.divide(2).toExact() ?? '')\r\n                    }}\r\n                    currency={currencies[Field.CURRENCY_B]}\r\n                    id=\"create-pool-input-tokenb\"\r\n                    disableCurrencySelect={false}\r\n                    showCommonBases\r\n                  />\r\n                  <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0.5rem\">\r\n                    <USDPrice>\r\n                      {usdPrices[1] ? (\r\n                        `1 ${nativeB?.symbol} = ${formattedNum(usdPrices[1].toString(), true)}`\r\n                      ) : (\r\n                        <Loader />\r\n                      )}\r\n                    </USDPrice>\r\n\r\n                    {chainId && (currencyBIsWETH || currencyBIsETHER) && (\r\n                      <StyledInternalLink\r\n                        replace\r\n                        to={`/create/${currencyIdA}/${\r\n                          currencyBIsETHER\r\n                            ? currencyId(WETH[chainId], chainId)\r\n                            : currencyId(NativeCurrencies[chainId], chainId)\r\n                        }`}\r\n                      >\r\n                        {currencyBIsETHER ? <Trans>Use Wrapped Token</Trans> : <Trans>Use Native Token</Trans>}\r\n                      </StyledInternalLink>\r\n                    )}\r\n                  </Flex>\r\n                </div>\r\n\r\n                {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n                  <Section padding=\"0px\" borderRadius={'20px'}>\r\n                    <Row padding=\"0 0 1rem 0\">\r\n                      <TYPE.subHeader fontWeight={500} fontSize={14} color={theme.subText}>\r\n                        <Trans>Prices and Pool share</Trans>\r\n                      </TYPE.subHeader>\r\n                    </Row>\r\n\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                      pair={pair}\r\n                    />\r\n                  </Section>\r\n                )}\r\n              </TokenColumn>\r\n\r\n              <AMPColumn gap=\"20px\" style={{ height: 'fit-content' }}>\r\n                <AutoRow>\r\n                  <ActiveText>\r\n                    AMP\r\n                    {!!pair ? (\r\n                      <>\r\n                        &nbsp;=&nbsp;{new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)}\r\n                      </>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </ActiveText>\r\n                  <QuestionHelper text={CREATE_POOL_AMP_HINT} />\r\n                </AutoRow>\r\n\r\n                <LightCard padding=\"0 0.75rem\" borderRadius={'10px'} style={{ background: theme.buttonBlack }}>\r\n                  <NumericalInput2 className=\"token-amount-input\" value={amp} onUserInput={onAmpChange} />\r\n                </LightCard>\r\n\r\n                {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n                  <PoolPriceRangeBarToggle\r\n                    pair={pair}\r\n                    currencies={currencies}\r\n                    price={price}\r\n                    amplification={ampConvertedInBps}\r\n                  />\r\n                )}\r\n                {/* <StaticFeeSelector\r\n                      active={staticFee.toString()}\r\n                      onChange={(name: string) => setStaticFee(name)}\r\n                      options={FEE_OPTIONS[chainId].map((fee: number) => {\r\n                        return { name: fee.toString(), title: (fee / 100).toString() + '%' }\r\n                      })}\r\n                    /> */}\r\n\r\n                {chainId &&\r\n                  (onlyStaticFee ? (\r\n                    <>\r\n                      <AutoRow>\r\n                        <ActiveText>Fee</ActiveText>\r\n                        <QuestionHelper\r\n                          text={t`You can select the appropriate fee tier for your pool. For each trade that uses this liquidity pool, liquidity providers will earn this trading fee.`}\r\n                        />\r\n                      </AutoRow>\r\n                      <StaticFeeSelector\r\n                        active={selectedFee}\r\n                        onChange={(name: number) => setSelectedFee(name)}\r\n                        options={\r\n                          STATIC_FEE_OPTIONS[chainId]?.map((fee: number) => {\r\n                            return { name: fee, title: (fee / 1000).toString() + '%' }\r\n                          }) || []\r\n                        }\r\n                      />\r\n                    </>\r\n                  ) : onlyDynamicFee ? (\r\n                    <Section>\r\n                      <AutoRow>\r\n                        <Text fontWeight={500} fontSize={14} color={theme.subText}>\r\n                          <Trans>Dynamic Fee Range</Trans>:{' '}\r\n                          {currencies[Field.CURRENCY_A] &&\r\n                          currencies[Field.CURRENCY_B] &&\r\n                          pairState !== PairState.INVALID &&\r\n                          +amp >= 1\r\n                            ? feeRangeCalc(\r\n                                !!pair?.amp\r\n                                  ? +new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)\r\n                                  : +amp,\r\n                              )\r\n                            : '-'}\r\n                        </Text>\r\n                        <QuestionHelper\r\n                          text={t`Fees are adjusted dynamically according to market conditions to maximise returns for liquidity providers.`}\r\n                        />\r\n                      </AutoRow>\r\n                    </Section>\r\n                  ) : (\r\n                    <>\r\n                      <FeeTypeSelector active={feeType} onChange={(type: string) => setFeeType(type)} />\r\n                      {feeType === FEE_TYPE.STATIC ? (\r\n                        <StaticFeeSelector\r\n                          active={selectedFee}\r\n                          onChange={(name: number) => setSelectedFee(name)}\r\n                          options={\r\n                            STATIC_FEE_OPTIONS[chainId]?.map((fee: number) => {\r\n                              return { name: fee, title: (fee / 1000).toString() + '%' }\r\n                            }) || []\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <Section>\r\n                          <AutoRow>\r\n                            <Text fontWeight={500} fontSize={14} color={theme.subText}>\r\n                              <Trans>Dynamic Fee Range</Trans>:{' '}\r\n                              {currencies[Field.CURRENCY_A] &&\r\n                              currencies[Field.CURRENCY_B] &&\r\n                              pairState !== PairState.INVALID &&\r\n                              +amp >= 1\r\n                                ? feeRangeCalc(\r\n                                    !!pair?.amp\r\n                                      ? +new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)\r\n                                      : +amp,\r\n                                  )\r\n                                : '-'}\r\n                            </Text>\r\n                            <QuestionHelper\r\n                              text={t`Fees are adjusted dynamically according to market conditions to maximise returns for liquidity providers.`}\r\n                            />\r\n                          </AutoRow>\r\n                        </Section>\r\n                      )}\r\n                    </>\r\n                  ))}\r\n\r\n                {showSanityPriceWarning && (\r\n                  <Warning>\r\n                    <AlertTriangle color={theme.yellow2} />\r\n                    <Text fontSize=\"0.75rem\" marginLeft=\"0.75rem\">\r\n                      <Trans>The price is deviating quite a lot from that market price, please be careful!</Trans>\r\n                    </Text>\r\n                  </Warning>\r\n                )}\r\n\r\n                {!account ? (\r\n                  <ButtonLight onClick={toggleWalletModal}>\r\n                    <Trans>Connect Wallet</Trans>\r\n                  </ButtonLight>\r\n                ) : (\r\n                  <AutoColumn gap={'md'}>\r\n                    {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                      approvalA === ApprovalState.PENDING ||\r\n                      approvalB === ApprovalState.NOT_APPROVED ||\r\n                      approvalB === ApprovalState.PENDING) &&\r\n                      isValid && (\r\n                        <RowBetween>\r\n                          {approvalA !== ApprovalState.APPROVED && (\r\n                            <ButtonPrimary\r\n                              onClick={approveACallback}\r\n                              disabled={approvalA === ApprovalState.PENDING}\r\n                              width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                            >\r\n                              {approvalA === ApprovalState.PENDING ? (\r\n                                <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\r\n                              ) : (\r\n                                'Approve ' + currencies[Field.CURRENCY_A]?.symbol\r\n                              )}\r\n                            </ButtonPrimary>\r\n                          )}\r\n                          {approvalB !== ApprovalState.APPROVED && (\r\n                            <ButtonPrimary\r\n                              onClick={approveBCallback}\r\n                              disabled={approvalB === ApprovalState.PENDING}\r\n                              width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                            >\r\n                              {approvalB === ApprovalState.PENDING ? (\r\n                                <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\r\n                              ) : (\r\n                                'Approve ' + currencies[Field.CURRENCY_B]?.symbol\r\n                              )}\r\n                            </ButtonPrimary>\r\n                          )}\r\n                        </RowBetween>\r\n                      )}\r\n\r\n                    <ButtonError\r\n                      onClick={() => {\r\n                        expertMode && !linkToUnamplifiedPool ? onAdd() : setShowConfirm(true)\r\n                      }}\r\n                      disabled={\r\n                        !isValid ||\r\n                        approvalA !== ApprovalState.APPROVED ||\r\n                        approvalB !== ApprovalState.APPROVED ||\r\n                        (feeType === FEE_TYPE.STATIC ? !selectedFee : false)\r\n                      }\r\n                      error={\r\n                        !isValid &&\r\n                        !!parsedAmounts[Field.CURRENCY_A] &&\r\n                        !!parsedAmounts[Field.CURRENCY_B] &&\r\n                        !!(+amp < 1)\r\n                      }\r\n                    >\r\n                      <Text fontSize={16} fontWeight={500}>\r\n                        {error ??\r\n                          (+amp < 1\r\n                            ? t`Enter amp (>=1)`\r\n                            : feeType === FEE_TYPE.STATIC && !selectedFee\r\n                            ? t`Please select fee`\r\n                            : t`Create`)}\r\n                      </Text>\r\n                    </ButtonError>\r\n                  </AutoColumn>\r\n                )}\r\n              </AMPColumn>\r\n            </GridColumn>\r\n          </AutoColumn>\r\n        </Wrapper>\r\n      </Container>\r\n    </PageWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport Card from 'components/Card'\r\nimport { AutoColumn } from 'components/Column'\r\nimport NumericalInput from 'components/NumericalInput'\r\n\r\nexport const PageWrapper = styled.div`\r\n  padding: 16px 16px 100px;\r\n  width: 100%;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding: 16px 16px 100px;\r\n  }\r\n\r\n  @media only screen and (min-width: 1000px) {\r\n    padding: 16px 32px 100px;\r\n  }\r\n\r\n  @media only screen and (min-width: 1366px) {\r\n    padding: 16px 215px 50px;\r\n  }\r\n\r\n  @media only screen and (min-width: 1440px) {\r\n    padding: 16px 252px 50px;\r\n  }\r\n`\r\n\r\nexport const Container = styled.div`\r\n  max-width: 936px;\r\n  margin: 0 auto;\r\n  padding: 24px 20px;\r\n  background: ${({ theme }) => theme.background};\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n  border-radius: 8px;\r\n\r\n  @media only screen and (min-width: 1000px) {\r\n    padding: 24px;\r\n  }\r\n`\r\n\r\nexport const GridColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n`\r\n\r\nexport const TokenColumn = styled(AutoColumn)`\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.border};\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding-right: 24px;\r\n    padding-bottom: 0;\r\n    border-right: 1px solid ${({ theme }) => theme.border};\r\n    border-bottom: none;\r\n  }\r\n`\r\n\r\nexport const AMPColumn = styled(AutoColumn)`\r\n  padding-top: 24px;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding-left: 24px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nexport const ActiveText = styled.div`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n`\r\n\r\nexport const Section = styled(Card)`\r\n  padding: 16px;\r\n  border: 1px solid ${({ theme }) => theme.border};\r\n  border-radius: 8px;\r\n`\r\n\r\nexport const NumericalInput2 = styled(NumericalInput)`\r\n  width: 100%;\r\n  height: 60px;\r\n`\r\n\r\nexport const USDPrice = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  padding-left: 8px;\r\n  color: ${({ theme }) => theme.subText};\r\n`\r\n\r\nexport const Warning = styled.div`\r\n  display: flex;\r\n  background: ${({ theme }) => `${theme.warning}20`};\r\n  border-radius: 0.625rem;\r\n  padding: 0.75rem 1rem;\r\n`\r\n","import { Pair } from '@kyberswap/ks-sdk-classic'\r\nimport { Currency } from '@kyberswap/ks-sdk-core'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { PairState, usePair } from 'data/Reserves'\r\nimport { AppState } from 'state/index'\r\n\r\nimport { Field } from './actions'\r\n\r\nexport function usePairState(): AppState['pair'] {\r\n  return useSelector<AppState, AppState['pair']>(state => state.pair)\r\n}\r\n\r\nexport function useDerivedPairInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  currencies: { [field in Field]?: Currency }\r\n  pairs: [PairState, Pair | null, boolean?][]\r\n} {\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB],\r\n  )\r\n  const pairs = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n  return {\r\n    currencies,\r\n    pairs,\r\n  }\r\n}\r\n"],"sourceRoot":""}