{"version":3,"sources":["components/AddressInputPanel/index.tsx","components/ProgressSteps/index.tsx","components/SwitchLocaleLink/index.tsx","components/TokenWarningModal/index.tsx","components/swap/FormattedPriceImpact.tsx","hooks/solana/useProvider.ts","hooks/useWrapCallback.ts","pages/AppBody.tsx","pages/Pool/styleds.tsx","assets/svg/swap.svg","components/swap/SwapRoute.tsx","components/swap/AdvancedSwapDetails.tsx","components/swap/AdvancedSwapDetailsDropdown.tsx","components/swap/SwapModalFooter.tsx","components/swap/SwapModalHeader.tsx","components/swap/ConfirmSwapModal.tsx","components/swap/TradePrice.tsx","hooks/useSwapCallback.ts","pages/Swap/index.tsx","components/swap/confirmPriceImpactWithoutFee.ts"],"names":["InputPanel","styled","div","theme","flexColumnNoWrap","buttonBlack","ContainerRow","InputContainer","Input","input","error","red","text","border","DropdownIcon","DropdownSVG","open","AddressInputPanel","id","value","onChange","useActiveWeb3React","chainId","networkInfo","isEVM","useENS","address","loading","name","handleInput","useCallback","event","withoutSpaces","target","replace","useTheme","Boolean","length","gap","justifyContent","alignItems","marginTop","color","subText","fontSize","fontWeight","href","getEtherscanLink","style","marginLeft","etherscanName","onClick","maxHeight","className","type","autoComplete","autoCorrect","autoCapitalize","spellCheck","placeholder","pattern","Wrapper","AutoColumn","Grouping","RowBetween","Circle","confirmed","disabled","buttonGray","green1","primary","textReverse","CircleRow","Connector","prevConfirmed","bg4","transparentize","ProgressCircles","steps","rest","justify","map","step","i","Container","TYPE","small","mediaWidth","upToMedium","SwitchLocaleLink","activeLocale","useActiveLocale","browserLocale","useMemo","navigatorLocale","location","useLocation","qs","useParsedQueryString","DEFAULT_LOCALE","targetLocale","search","stringify","lng","to","LOCALE_LABEL","TokenWarningModal","isOpen","tokens","onConfirm","onDismiss","handleCurrencySelect","enterToImport","FormattedPriceImpact","priceImpact","lessThan","severity","warningSeverity","ONE_BIPS","toFixed","useProvider","wallet","useAnchorWallet","AnchorProvider","connection","defaultOptions","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","isSolana","account","provider","wethContract","useWETHContract","balance","useCurrencyBalance","undefined","inputAmount","tryParseAmount","addTransactionWithType","useTransactionAdder","sufficientBalance","nativeTokenSymbol","NativeCurrencies","symbol","isNative","WETH","equals","WRAP","execute","estimateGas","deposit","quotient","toString","gasLimit","calculateGasMargin","txReceipt","hash","accountPK","PublicKey","createWrapSOLInstructions","wrapIxs","getLatestBlockhash","blockhash","lastValidBlockHeight","tx","Transaction","feePayer","add","sendAndConfirm","TRANSACTION_TYPE","summary","toSignificant","Error","console","inputError","UNWRAP","withdraw","checkAndCreateUnwrapSOLInstruction","ix","BodyWrapper","AppBody","children","ClickableText","Text","Dots","span","memo","trade","px","py","my","bg3","borderRadius","flexWrap","width","route","path","token","isLastItem","flexShrink","CurrencyLogo","currency","size","black","ml","text2","InfoLink","ExternalLink","advancedBorder","text10","TradeSummary","allowedSlippage","computeTradePriceBreakdown","priceImpactWithoutFee","realizedLPFee","accruedFeePercent","isExactIn","tradeType","TradeType","EXACT_INPUT","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","nativeInput","useCurrencyConvertedToNative","nativeOutput","outputAmount","padding","Row","QuestionHelper","Field","OUTPUT","INPUT","AdvancedSwapDetails","useUserSlippageTolerance","showRoute","DMM_ANALYTICS_URL","pairs","liquidityToken","AdvancedDetailsFooter","advancedBG","show","AdvancedSwapDetailsDropdown","lastTrade","useLastTruthy","SwapModalFooter","swapErrorMessage","disabledConfirm","useState","showInverted","setShowInverted","align","display","textAlign","paddingLeft","formatExecutionPrice","Button","margin","SwapModalHeader","recipient","showAcceptChanges","onAcceptChanges","priceImpactSeverity","marginRight","EXACT_OUTPUT","minWidth","red1","main","italic","title","isAddress","shortenAddress","ConfirmSwapModal","originalTrade","attemptingTxn","txHash","tokenAddToMetaMask","showTxBanner","tradeB","tradeA","equalTo","modalHeader","modalBottom","pendingText","confirmationContent","message","topContent","bottomContent","TransactionConfirmationModal","content","TradePrice","price","formattedPrice","invert","baseCurrency","quoteCurrency","nativeQuote","nativeBase","label","SwapCallbackState","useSwapCallArguments","INITIAL_ALLOWED_SLIPPAGE","recipientAddressOrName","useWeb3React","library","recipientAddress","deadline","useTransactionDeadline","tradeBestExactInAnyway","useTradeExactIn","routerContract","getDynamicFeeRouterContract","swapMethods","Router","swapCallParameters","feeOnTransfer","Percent","JSBI","BigInt","BIPS_BASE","toNumber","push","methodName","args","calldata","interface","encodeFunctionData","AppBodyRaw","Swap","history","loadedUrlParams","useDefaultsFromURLSearch","useCurrency","inputCurrencyId","outputCurrencyId","loadedInputCurrency","loadedOutputCurrency","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","Token","handleConfirmTokenWarning","defaultTokens","useAllTokens","importTokensNotInDefault","toggleWalletModal","useWalletModalToggle","toggleSettings","useToggleSettingsMenu","useExpertModeManager","isExpertMode","useSwapState","independentField","useDerivedSwapInfo","v2Trade","currencyBalances","parsedAmount","currencies","swapInputError","onWrap","wrapInputError","showWrap","parsedAmounts","useSwapActionHandlers","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","handleTypeOutput","handleDismissTokenWarning","showConfirm","tradeToConfirm","setSwapState","formattedAmounts","toExact","userHasSpecifiedInputOutput","greaterThan","noRoute","useApproveCallbackFromTrade","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","useEffect","ApprovalState","PENDING","NOT_APPROVED","maxAmountInput","maxAmountSpend","atMaxAmountInput","swapCalls","state","VALID","callback","Promise","all","call","isZero","from","data","then","gasEstimate","catch","gasError","debug","result","callError","errorMessage","estimatedCalls","successfulEstimation","find","el","list","errorCalls","getSigner","sendTransaction","response","inputSymbol","outputSymbol","formatCurrencyAmount","base","withRecipient","SWAP","code","INVALID","LOADING","useSwapCallback","swapCallback","swapCallbackError","handleSwap","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","ALLOWED_PRICE_IMPACT_HIGH","window","confirm","prompt","confirmPriceImpactWithoutFee","showApproveFlow","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","handleMaxInput","handleOutputSelect","isLoading","active","mb","TransactionSettings","CurrencyInputPanel","onMax","onHalf","onCurrencySelect","otherCurrency","showCommonBases","positionMax","clickable","src","SwapIcon","alt","Card","executionPrice","altDisabledStyle","Loader","stroke","Column","ProgressSteps"],"mappings":"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","file":"static/js/swap-page.3dd2c2ff.chunk.js","sourcesContent":["import { Trans, t } from '@lingui/macro'\r\nimport { ChangeEvent, useCallback } from 'react'\r\nimport { Flex, Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { ReactComponent as DropdownSVG } from 'assets/svg/down.svg'\r\nimport { AutoColumn } from 'components/Column'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useENS from 'hooks/useENS'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ExternalLink } from 'theme'\r\nimport { getEtherscanLink } from 'utils'\r\n\r\nconst InputPanel = styled.div`\r\n  ${({ theme }) => theme.flexColumnNoWrap}\r\n  position: relative;\r\n  border-radius: 12px;\r\n  background-color: ${({ theme }) => theme.buttonBlack};\r\n  z-index: 1;\r\n  width: 100%;\r\n  transition: max-height 200ms ease-in-out;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ContainerRow = styled.div<{ error: boolean }>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 12px;\r\n  background-color: ${({ theme }) => theme.buttonBlack};\r\n`\r\n\r\nconst InputContainer = styled.div`\r\n  flex: 1;\r\n  padding: 0.75rem;\r\n`\r\n\r\nconst Input = styled.input<{ error?: boolean }>`\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n  background-color: ${({ theme }) => theme.buttonBlack};\r\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\r\n  color: ${({ error, theme }) => (error ? theme.red : theme.text)};\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  font-weight: 500;\r\n  width: 100%;\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.border};\r\n  }\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n`\r\n\r\nconst DropdownIcon = styled(DropdownSVG)<{ open: boolean }>`\r\n  cursor: pointer;\r\n  transition: transform 300ms;\r\n  transform: rotate(${({ open }) => (open ? '-180deg' : 0)});\r\n`\r\n\r\nexport default function AddressInputPanel({\r\n  id,\r\n  value,\r\n  onChange,\r\n}: {\r\n  id?: string\r\n  // the typed string value\r\n  value: string | null\r\n  // triggers whenever the typed value changes\r\n  onChange: (value: string | null) => void\r\n}) {\r\n  const { chainId, networkInfo, isEVM } = useActiveWeb3React()\r\n  const { address, loading, name } = useENS(value)\r\n\r\n  const handleInput = useCallback(\r\n    (event: ChangeEvent<HTMLInputElement>) => {\r\n      const input = event.target.value\r\n      const withoutSpaces = input.replace(/\\s+/g, '')\r\n      onChange(withoutSpaces)\r\n    },\r\n    [onChange],\r\n  )\r\n  const theme = useTheme()\r\n\r\n  const error = Boolean((value || '').length > 0 && !loading && !address)\r\n  if (!isEVM) return null\r\n  return (\r\n    <AutoColumn gap=\"4px\">\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"4px\" color={theme.subText}>\r\n        <Text fontSize=\"12px\" fontWeight=\"500\">\r\n          <Trans>Recipient (Optional)</Trans>\r\n\r\n          {address && (\r\n            <ExternalLink\r\n              href={getEtherscanLink(chainId, name ?? address, 'address')}\r\n              style={{ fontSize: '12px', marginLeft: '4px' }}\r\n            >\r\n              ({networkInfo.etherscanName})\r\n            </ExternalLink>\r\n          )}\r\n        </Text>\r\n        <DropdownIcon open={value !== null} onClick={() => onChange(value === null ? '' : null)} />\r\n      </Flex>\r\n\r\n      <InputPanel id={id} style={{ maxHeight: value === null ? 0 : '44px' }}>\r\n        <ContainerRow error={error}>\r\n          <InputContainer>\r\n            <AutoColumn gap=\"md\">\r\n              <Input\r\n                className=\"recipient-address-input\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"off\"\r\n                autoCapitalize=\"off\"\r\n                spellCheck=\"false\"\r\n                placeholder={t`Wallet Address or ENS name`}\r\n                error={error}\r\n                pattern=\"^(0x[a-fA-F0-9]{40})$\"\r\n                onChange={handleInput}\r\n                value={value || ''}\r\n              />\r\n            </AutoColumn>\r\n          </InputContainer>\r\n        </ContainerRow>\r\n      </InputPanel>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\n\r\nimport { AutoColumn } from 'components/Column'\r\nimport { RowBetween } from 'components/Row'\r\n\r\nconst Wrapper = styled(AutoColumn)``\r\n\r\nconst Grouping = styled(RowBetween)`\r\n  width: 50%;\r\n`\r\n\r\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  background-color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.buttonGray : confirmed ? theme.green1 : theme.primary};\r\n  border-radius: 50%;\r\n  color: ${({ theme }) => theme.textReverse};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 8px;\r\n  font-size: 12px;\r\n`\r\n\r\nconst CircleRow = styled.div`\r\n  width: calc(100% - 20px);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ;\r\n  background: linear-gradient(\r\n    90deg,\r\n    ${({ theme, prevConfirmed, disabled }) =>\r\n        disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary)}\r\n      0%,\r\n    ${({ theme, prevConfirmed, disabled }) => (disabled ? theme.bg4 : prevConfirmed ? theme.primary : theme.bg4)} 80%\r\n  );\r\n  opacity: 0.6;\r\n`\r\n\r\ninterface ProgressCirclesProps {\r\n  steps: boolean[]\r\n  disabled?: boolean\r\n}\r\n\r\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\r\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\r\n  return (\r\n    <Wrapper justify={'center'} {...rest}>\r\n      <Grouping>\r\n        {steps.map((step, i) => {\r\n          return (\r\n            <CircleRow key={i}>\r\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\r\n                {step ? '✓' : i + 1}\r\n              </Circle>\r\n              <Connector prevConfirmed={step} disabled={disabled} />\r\n            </CircleRow>\r\n          )\r\n        })}\r\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\r\n      </Grouping>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { stringify } from 'querystring'\r\nimport React, { useMemo } from 'react'\r\nimport { useLocation } from 'react-router'\r\nimport styled from 'styled-components'\r\n\r\nimport { DEFAULT_LOCALE, LOCALE_LABEL, SupportedLocale } from 'constants/locales'\r\nimport { navigatorLocale, useActiveLocale } from 'hooks/useActiveLocale'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport { StyledInternalLink, TYPE } from 'theme'\r\n\r\nconst Container = styled(TYPE.small)`\r\n  opacity: 0.6;\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n  margin-top: 1rem !important;\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToMedium`\r\n    display: none;\r\n  `};\r\n`\r\n\r\nexport function SwitchLocaleLink() {\r\n  const activeLocale = useActiveLocale()\r\n  const browserLocale = useMemo(() => navigatorLocale(), [])\r\n  const location = useLocation()\r\n  const qs = useParsedQueryString()\r\n\r\n  if (browserLocale && (browserLocale !== DEFAULT_LOCALE || activeLocale !== DEFAULT_LOCALE)) {\r\n    let targetLocale: SupportedLocale\r\n    if (activeLocale === browserLocale) {\r\n      targetLocale = DEFAULT_LOCALE\r\n    } else {\r\n      targetLocale = browserLocale\r\n    }\r\n\r\n    const target = {\r\n      ...location,\r\n      search: stringify({ ...qs, lng: targetLocale }),\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        KyberSwap available in: {<StyledInternalLink to={target}>{LOCALE_LABEL[targetLocale]}</StyledInternalLink>}\r\n      </Container>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n","import { Token } from '@kyberswap/ks-sdk-core'\r\n\r\nimport Modal from 'components/Modal'\r\nimport { ImportToken } from 'components/SearchModal/ImportToken'\r\n\r\nexport default function TokenWarningModal({\r\n  isOpen,\r\n  tokens,\r\n  onConfirm,\r\n  onDismiss,\r\n}: {\r\n  isOpen: boolean\r\n  tokens: Token[]\r\n  onConfirm: () => void\r\n  onDismiss: () => void\r\n}) {\r\n  return (\r\n    <Modal isOpen={isOpen} onDismiss={onDismiss} maxHeight={100}>\r\n      <ImportToken tokens={tokens} handleCurrencySelect={onConfirm} enterToImport={isOpen} />\r\n    </Modal>\r\n  )\r\n}\r\n","import { Percent } from '@kyberswap/ks-sdk-core'\r\n\r\nimport { ONE_BIPS } from 'constants/index'\r\nimport { warningSeverity } from 'utils/prices'\r\n\r\nimport { ErrorText } from './styleds'\r\n\r\n/**\r\n * Formatted version of price impact text with warning colors\r\n */\r\nexport default function FormattedPriceImpact({ priceImpact }: { priceImpact?: Percent }) {\r\n  if (!priceImpact || priceImpact.lessThan('0')) {\r\n    return <div>--</div>\r\n  }\r\n\r\n  return (\r\n    <ErrorText fontWeight={500} fontSize={14} severity={warningSeverity(priceImpact)}>\r\n      {priceImpact.lessThan(ONE_BIPS) ? '<0.01%' : `${priceImpact.toFixed(2)}%`}\r\n    </ErrorText>\r\n  )\r\n}\r\n","import { AnchorProvider } from '@project-serum/anchor'\r\nimport { useAnchorWallet } from '@solana/wallet-adapter-react'\r\nimport { useMemo } from 'react'\r\n\r\nimport connection from 'state/connection/connection'\r\n\r\nconst useProvider = (): AnchorProvider | null => {\r\n  const wallet = useAnchorWallet()\r\n\r\n  const provider = useMemo(\r\n    () => (wallet ? new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions()) : null),\r\n    [wallet],\r\n  )\r\n  return provider\r\n}\r\n\r\nexport default useProvider\r\n","import { Currency, WETH } from '@kyberswap/ks-sdk-core'\r\nimport { t } from '@lingui/macro'\r\nimport { PublicKey, Transaction } from '@solana/web3.js'\r\nimport { useMemo } from 'react'\r\n\r\nimport { NativeCurrencies } from 'constants/tokens'\r\nimport connection from 'state/connection/connection'\r\nimport { tryParseAmount } from 'state/swap/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useCurrencyBalance } from 'state/wallet/hooks'\r\nimport { calculateGasMargin } from 'utils'\r\nimport { checkAndCreateUnwrapSOLInstruction, createWrapSOLInstructions } from 'utils/solanaInstructions'\r\n\r\nimport { useActiveWeb3React } from './index'\r\nimport useProvider from './solana/useProvider'\r\nimport { useWETHContract } from './useContract'\r\n\r\nexport enum WrapType {\r\n  NOT_APPLICABLE,\r\n  WRAP,\r\n  UNWRAP,\r\n}\r\n\r\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\r\n/**\r\n * Given the selected input and output currency, return a wrap callback\r\n * @param inputCurrency the selected input currency\r\n * @param outputCurrency the selected output currency\r\n * @param typedValue the user input value\r\n */\r\nexport default function useWrapCallback(\r\n  inputCurrency: Currency | undefined | null,\r\n  outputCurrency: Currency | undefined | null,\r\n  typedValue: string | undefined,\r\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\r\n  const { chainId, isEVM, isSolana, account } = useActiveWeb3React()\r\n  const provider = useProvider()\r\n  const wethContract = useWETHContract()\r\n  const balance = useCurrencyBalance(inputCurrency ?? undefined)\r\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\r\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency ?? undefined), [inputCurrency, typedValue])\r\n  const addTransactionWithType = useTransactionAdder()\r\n\r\n  return useMemo(() => {\r\n    if ((!wethContract && isEVM) || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\r\n\r\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\r\n\r\n    const nativeTokenSymbol = NativeCurrencies[chainId].symbol\r\n\r\n    if (inputCurrency.isNative && WETH[chainId].equals(outputCurrency)) {\r\n      return {\r\n        wrapType: WrapType.WRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  let hash: string | undefined\r\n                  if (isEVM && wethContract) {\r\n                    const estimateGas = await wethContract.estimateGas.deposit({\r\n                      value: `0x${inputAmount.quotient.toString(16)}`,\r\n                    })\r\n                    const txReceipt = await wethContract.deposit({\r\n                      value: `0x${inputAmount.quotient.toString(16)}`,\r\n                      gasLimit: calculateGasMargin(estimateGas),\r\n                    })\r\n                    hash = txReceipt?.hash\r\n                  } else if (isSolana && account && provider) {\r\n                    const accountPK = new PublicKey(account)\r\n                    const wrapIxs = await createWrapSOLInstructions(accountPK, inputAmount)\r\n                    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash()\r\n\r\n                    const tx = new Transaction({\r\n                      blockhash,\r\n                      lastValidBlockHeight,\r\n                      feePayer: accountPK,\r\n                    })\r\n                    tx.add(...wrapIxs)\r\n                    hash = await provider.sendAndConfirm(tx)\r\n                  }\r\n                  if (hash) {\r\n                    addTransactionWithType({\r\n                      hash,\r\n                      type: TRANSACTION_TYPE.WRAP,\r\n                      summary: `${inputAmount.toSignificant(6)} ${nativeTokenSymbol} to ${inputAmount.toSignificant(\r\n                        6,\r\n                      )} W${nativeTokenSymbol}`,\r\n                    })\r\n                  }\r\n                  throw new Error()\r\n                } catch (error) {\r\n                  console.error('Could not deposit', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: !typedValue\r\n          ? t`Enter an amount`\r\n          : sufficientBalance\r\n          ? undefined\r\n          : t`Insufficient ${NativeCurrencies[chainId].symbol} balance`,\r\n      }\r\n    } else if (WETH[chainId].equals(inputCurrency) && outputCurrency.isNative) {\r\n      return {\r\n        wrapType: WrapType.UNWRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  let hash: string | undefined\r\n                  if (isEVM && wethContract) {\r\n                    const estimateGas = await wethContract.estimateGas.withdraw(\r\n                      `0x${inputAmount.quotient.toString(16)}`,\r\n                    )\r\n                    const txReceipt = await wethContract.withdraw(`0x${inputAmount.quotient.toString(16)}`, {\r\n                      gasLimit: calculateGasMargin(estimateGas),\r\n                    })\r\n                    hash = txReceipt.hash\r\n                  } else if (isSolana && account && provider) {\r\n                    const accountPK = new PublicKey(account)\r\n                    const ix = await checkAndCreateUnwrapSOLInstruction(accountPK)\r\n                    if (ix) {\r\n                      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash()\r\n\r\n                      const tx = new Transaction({\r\n                        blockhash,\r\n                        lastValidBlockHeight,\r\n                        feePayer: accountPK,\r\n                      })\r\n                      tx.add(ix)\r\n                      hash = await provider.sendAndConfirm(tx)\r\n                    }\r\n                  }\r\n                  if (hash) {\r\n                    addTransactionWithType({\r\n                      hash,\r\n                      type: TRANSACTION_TYPE.UNWRAP,\r\n                      summary: `${inputAmount.toSignificant(6)} W${nativeTokenSymbol} to ${inputAmount.toSignificant(\r\n                        6,\r\n                      )} ${nativeTokenSymbol}`,\r\n                    })\r\n                  }\r\n                  throw new Error()\r\n                } catch (error) {\r\n                  console.error('Could not withdraw', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: !typedValue\r\n          ? t`Enter an amount`\r\n          : sufficientBalance\r\n          ? undefined\r\n          : t`Insufficient W${NativeCurrencies[chainId].symbol} balance`,\r\n      }\r\n    } else {\r\n      return NOT_APPLICABLE\r\n    }\r\n  }, [\r\n    wethContract,\r\n    isEVM,\r\n    chainId,\r\n    inputCurrency,\r\n    outputCurrency,\r\n    inputAmount,\r\n    balance,\r\n    typedValue,\r\n    isSolana,\r\n    account,\r\n    provider,\r\n    addTransactionWithType,\r\n  ])\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport const BodyWrapper = styled.div`\r\n  position: relative;\r\n  max-width: 425px;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n  border-radius: 20px;\r\n  padding: 2rem 1.5rem 1.5rem 1.5rem;\r\n  margin-top: 20px;\r\n`\r\n\r\n/**\r\n * The styled container element that wraps the content of most pages and the tabs.\r\n */\r\nexport default function AppBody({ children, className }: { children: React.ReactNode; className?: string }) {\r\n  return <BodyWrapper className={className}>{children}</BodyWrapper>\r\n}\r\n","import { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n`\r\n\r\nexport const ClickableText = styled(Text)`\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n  color: ${({ theme }) => theme.primary};\r\n`\r\n\r\nexport const Dots = styled.span`\r\n  &::after {\r\n    display: inline-block;\r\n    animation: ellipsis 1.25s infinite;\r\n    content: '.';\r\n    width: 1em;\r\n    text-align: left;\r\n  }\r\n  @keyframes ellipsis {\r\n    0% {\r\n      content: '.';\r\n    }\r\n    33% {\r\n      content: '..';\r\n    }\r\n    66% {\r\n      content: '...';\r\n    }\r\n  }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/swap.b65645c2.svg\";","import { Trade } from '@kyberswap/ks-sdk-classic'\r\nimport { Currency, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport React, { Fragment, memo } from 'react'\r\nimport { ChevronRight } from 'react-feather'\r\nimport { Flex } from 'rebass'\r\n\r\nimport CurrencyLogo from 'components/CurrencyLogo'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { TYPE } from 'theme'\r\n\r\nexport default memo(function SwapRoute({ trade }: { trade: Trade<Currency, Currency, TradeType> }) {\r\n  const theme = useTheme()\r\n  return (\r\n    <Flex\r\n      px=\"1rem\"\r\n      py=\"0.5rem\"\r\n      my=\"0.5rem\"\r\n      style={{ border: `1px solid ${theme.bg3}`, borderRadius: '1rem' }}\r\n      flexWrap=\"wrap\"\r\n      width=\"100%\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      {trade.route.path.map((token, i, path) => {\r\n        const isLastItem: boolean = i === path.length - 1\r\n        return (\r\n          <Fragment key={i}>\r\n            <Flex my=\"0.5rem\" alignItems=\"center\" style={{ flexShrink: 0 }}>\r\n              <CurrencyLogo currency={token} size=\"1.5rem\" />\r\n              <TYPE.black fontSize={14} color={theme.text} ml=\"0.5rem\">\r\n                {token.symbol}\r\n              </TYPE.black>\r\n            </Flex>\r\n            {isLastItem ? null : <ChevronRight color={theme.text2} />}\r\n          </Fragment>\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n})\r\n","import { Trade } from '@kyberswap/ks-sdk-classic'\r\nimport { Currency, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport styled from 'styled-components'\r\n\r\nimport { AutoColumn } from 'components/Column'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport { RowBetween, RowFixed } from 'components/Row'\r\nimport { DMM_ANALYTICS_URL } from 'constants/index'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { ExternalLink, TYPE } from 'theme'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from 'utils/prices'\r\n\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport SwapRoute from './SwapRoute'\r\nimport { SectionBreak } from './styleds'\r\n\r\nconst InfoLink = styled(ExternalLink)`\r\n  width: 100%;\r\n  border-top: 1px solid ${({ theme }) => theme.advancedBorder};\r\n  padding: 12px 6px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.text10};\r\n`\r\n\r\nfunction TradeSummary({\r\n  trade,\r\n  allowedSlippage,\r\n}: {\r\n  trade: Trade<Currency, Currency, TradeType>\r\n  allowedSlippage: number\r\n}) {\r\n  const theme = useTheme()\r\n  const { priceImpactWithoutFee, realizedLPFee, accruedFeePercent } = computeTradePriceBreakdown(trade)\r\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\r\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\r\n\r\n  const nativeInput = useCurrencyConvertedToNative(trade.inputAmount.currency)\r\n  const nativeOutput = useCurrencyConvertedToNative(trade.outputAmount.currency)\r\n  return (\r\n    <>\r\n      <AutoColumn style={{ padding: '0 20px' }}>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n              {isExactIn ? t`Minimum Received` : t`Maximum Sold`}\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`Your transaction will revert if there is a large, unfavorable price movement before it is confirmed`}\r\n            />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <TYPE.black color={theme.text} fontSize={14}>\r\n              {isExactIn\r\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${nativeOutput?.symbol}` ?? '-'\r\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${nativeInput?.symbol}` ?? '-'}\r\n            </TYPE.black>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n              <Trans>Price Impact</Trans>\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`The difference between the market price and your price due to trade size. Adjust the price impact tolerance in the top right configuration`}\r\n            />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n              <Trans>Liquidity Provider Fee</Trans>\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`A portion of each trade (${accruedFeePercent.toSignificant(\r\n                6,\r\n              )}%) goes to liquidity providers as a protocol incentive`}\r\n            />\r\n          </RowFixed>\r\n          <TYPE.black fontSize={14} color={theme.text}>\r\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${nativeInput?.symbol}` : '-'}\r\n          </TYPE.black>\r\n        </RowBetween>\r\n      </AutoColumn>\r\n    </>\r\n  )\r\n}\r\n\r\nexport interface AdvancedSwapDetailsProps {\r\n  trade?: Trade<Currency, Currency, TradeType>\r\n}\r\n\r\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\r\n  const { chainId } = useActiveWeb3React()\r\n  const theme = useTheme()\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      {trade && (\r\n        <>\r\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\r\n          {showRoute && (\r\n            <>\r\n              <SectionBreak />\r\n              <AutoColumn style={{ padding: '0 24px' }}>\r\n                <RowFixed>\r\n                  <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n                    <Trans>Route</Trans>\r\n                  </TYPE.black>\r\n                  <QuestionHelper text={t`Routing through these tokens resulted in the best price for your trade`} />\r\n                </RowFixed>\r\n                <SwapRoute trade={trade} />\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n          <AutoColumn style={{ padding: '0 24px' }}>\r\n            <InfoLink\r\n              href={`${DMM_ANALYTICS_URL[chainId]}/pool/${trade?.route.pairs[0].liquidityToken.address}`}\r\n              target=\"_blank\"\r\n            >\r\n              <Trans>Token pool analytics →</Trans>\r\n            </InfoLink>\r\n          </AutoColumn>\r\n        </>\r\n      )}\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { useLastTruthy } from 'hooks/useLast'\r\n\r\nimport { AdvancedSwapDetails, AdvancedSwapDetailsProps } from './AdvancedSwapDetails'\r\n\r\nconst AdvancedDetailsFooter = styled.div<{ show: boolean }>`\r\n  padding-top: 10px;\r\n  padding-bottom: 8px;\r\n  margin-top: 10px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  border-radius: 8px;\r\n  color: ${({ theme }) => theme.text2};\r\n  background-color: ${({ theme }) => theme.advancedBG};\r\n  z-index: 1;\r\n  border: dashed 1px ${({ theme }) => theme.advancedBorder};\r\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(calc(-100% - 50px))')};\r\n  transition: transform 300ms ease-in-out;\r\n`\r\n\r\nexport default function AdvancedSwapDetailsDropdown({ trade, ...rest }: AdvancedSwapDetailsProps) {\r\n  const lastTrade = useLastTruthy(trade)\r\n\r\n  return (\r\n    <AdvancedDetailsFooter show={Boolean(trade)}>\r\n      <AdvancedSwapDetails {...rest} trade={trade ?? lastTrade ?? undefined} />\r\n    </AdvancedDetailsFooter>\r\n  )\r\n}\r\n","import { Currency, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Repeat } from 'react-feather'\r\nimport { Text } from 'rebass'\r\n\r\nimport { ButtonError } from 'components/Button'\r\nimport { AutoColumn } from 'components/Column'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport { AutoRow, RowBetween, RowFixed } from 'components/Row'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { AnyTrade } from 'hooks/useSwapCallback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Field } from 'state/swap/actions'\r\nimport { TYPE } from 'theme'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport {\r\n  computeSlippageAdjustedAmounts,\r\n  computeTradePriceBreakdown,\r\n  formatExecutionPrice,\r\n  warningSeverity,\r\n} from 'utils/prices'\r\n\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\r\n\r\nexport default function SwapModalFooter({\r\n  trade,\r\n  onConfirm,\r\n  allowedSlippage,\r\n  swapErrorMessage,\r\n  disabledConfirm,\r\n}: {\r\n  trade: AnyTrade\r\n  allowedSlippage: number\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  disabledConfirm: boolean\r\n}) {\r\n  const { chainId } = useActiveWeb3React()\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n  const theme = useTheme()\r\n  const slippageAdjustedAmounts = useMemo(\r\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\r\n    [allowedSlippage, trade],\r\n  )\r\n  const { priceImpactWithoutFee, realizedLPFee, accruedFeePercent } = useMemo(\r\n    () => computeTradePriceBreakdown(trade),\r\n    [trade],\r\n  )\r\n  const severity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  const nativeInput = useCurrencyConvertedToNative(trade.inputAmount.currency as Currency)\r\n\r\n  const nativeOutput = useCurrencyConvertedToNative(trade.outputAmount.currency as Currency)\r\n  return (\r\n    <>\r\n      <AutoColumn gap=\"0px\">\r\n        <RowBetween align=\"center\">\r\n          <Text fontWeight={400} fontSize={14} color={theme.text2}>\r\n            Price\r\n          </Text>\r\n          <Text\r\n            fontWeight={500}\r\n            fontSize={14}\r\n            color={theme.text}\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              display: 'flex',\r\n              textAlign: 'right',\r\n              paddingLeft: '10px',\r\n            }}\r\n          >\r\n            {formatExecutionPrice(trade, showInverted, chainId)}\r\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\r\n              <Repeat size={14} />\r\n            </StyledBalanceMaxMini>\r\n          </Text>\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n              {trade.tradeType === TradeType.EXACT_INPUT ? t`Minimum Received` : t`Maximum Sold`}\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`Your transaction will revert if there is a large, unfavorable price movement before it is confirmed`}\r\n            />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14}>\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\r\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\r\n            </TYPE.black>\r\n            <TYPE.black fontSize={14} marginLeft={'4px'}>\r\n              {trade.tradeType === TradeType.EXACT_INPUT ? nativeOutput?.symbol : nativeInput?.symbol}\r\n            </TYPE.black>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black color={theme.text2} fontSize={14} fontWeight={400}>\r\n              Price Impact\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`The difference between the market price and your price due to trade size. Adjust the price impact tolerance in the top right configuration`}\r\n            />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <TYPE.black fontSize={14} fontWeight={400} color={theme.text2}>\r\n              <Trans>Liquidity Provider Fee</Trans>\r\n            </TYPE.black>\r\n            <QuestionHelper\r\n              text={t`A portion of each trade (${\r\n                accruedFeePercent && accruedFeePercent.toSignificant(6)\r\n              }%) goes to liquidity providers as a protocol incentive`}\r\n            />\r\n          </RowFixed>\r\n          <TYPE.black fontSize={14}>\r\n            {realizedLPFee ? realizedLPFee?.toSignificant(6) + ' ' + nativeInput?.symbol : '-'}\r\n          </TYPE.black>\r\n        </RowBetween>\r\n      </AutoColumn>\r\n\r\n      <AutoRow>\r\n        <ButtonError\r\n          onClick={onConfirm}\r\n          disabled={disabledConfirm}\r\n          error={severity > 2}\r\n          style={{ margin: '10px 0 0 0' }}\r\n          id=\"confirm-swap-or-send\"\r\n        >\r\n          <Text fontSize={20} fontWeight={500}>\r\n            {severity > 2 ? t`Swap Anyway` : t`Confirm Swap`}\r\n          </Text>\r\n        </ButtonError>\r\n\r\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n      </AutoRow>\r\n    </>\r\n  )\r\n}\r\n","import { Currency, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport React, { useMemo } from 'react'\r\nimport { AlertTriangle, ArrowDown } from 'react-feather'\r\nimport { Text } from 'rebass'\r\n\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport { AutoColumn } from 'components/Column'\r\nimport CurrencyLogo from 'components/CurrencyLogo'\r\nimport { RowBetween, RowFixed } from 'components/Row'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { AnyTrade } from 'hooks/useSwapCallback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Field } from 'state/swap/actions'\r\nimport { TYPE } from 'theme'\r\nimport { isAddress, shortenAddress } from 'utils'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\r\n\r\nimport { SwapShowAcceptChanges, TruncatedText } from './styleds'\r\n\r\nexport default function SwapModalHeader({\r\n  trade,\r\n  allowedSlippage,\r\n  recipient,\r\n  showAcceptChanges,\r\n  onAcceptChanges,\r\n}: {\r\n  trade: AnyTrade\r\n  allowedSlippage: number\r\n  recipient: string | null\r\n  showAcceptChanges: boolean\r\n  onAcceptChanges: () => void\r\n}) {\r\n  const { chainId } = useActiveWeb3React()\r\n  const slippageAdjustedAmounts = useMemo(\r\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\r\n    [trade, allowedSlippage],\r\n  )\r\n  const priceImpact = useMemo(() => computeTradePriceBreakdown(trade).priceImpactWithoutFee, [trade])\r\n  const priceImpactSeverity = warningSeverity(priceImpact)\r\n\r\n  const theme = useTheme()\r\n\r\n  const nativeInput = useCurrencyConvertedToNative(trade.inputAmount.currency as Currency)\r\n\r\n  const nativeOutput = useCurrencyConvertedToNative(trade.outputAmount.currency as Currency)\r\n  return (\r\n    <AutoColumn gap={'md'} style={{ marginTop: '20px' }}>\r\n      <RowBetween align=\"flex-end\">\r\n        <RowFixed gap={'0px'}>\r\n          <CurrencyLogo currency={trade.inputAmount.currency} size={'24px'} style={{ marginRight: '12px' }} />\r\n          <TruncatedText\r\n            fontSize={24}\r\n            fontWeight={500}\r\n            color={showAcceptChanges && trade.tradeType === TradeType.EXACT_OUTPUT ? theme.primary : ''}\r\n          >\r\n            {trade.inputAmount.toSignificant(6)}\r\n          </TruncatedText>\r\n        </RowFixed>\r\n        <RowFixed gap={'0px'}>\r\n          <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\r\n            {nativeInput?.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowFixed>\r\n        <ArrowDown size=\"16\" color={theme.text2} style={{ marginLeft: '4px', minWidth: '16px' }} />\r\n      </RowFixed>\r\n      <RowBetween align=\"flex-end\">\r\n        <RowFixed gap={'0px'}>\r\n          <CurrencyLogo currency={trade.outputAmount.currency} size={'24px'} style={{ marginRight: '12px' }} />\r\n          <TruncatedText\r\n            fontSize={24}\r\n            fontWeight={500}\r\n            color={\r\n              priceImpactSeverity > 2\r\n                ? theme.red1\r\n                : showAcceptChanges && trade.tradeType === TradeType.EXACT_INPUT\r\n                ? theme.primary\r\n                : ''\r\n            }\r\n          >\r\n            {trade.outputAmount.toSignificant(6)}\r\n          </TruncatedText>\r\n        </RowFixed>\r\n        <RowFixed gap={'0px'}>\r\n          <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\r\n            {nativeOutput?.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      {showAcceptChanges ? (\r\n        <SwapShowAcceptChanges justify=\"flex-start\" gap={'0px'}>\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <AlertTriangle size={20} style={{ marginRight: '8px', minWidth: 24 }} />\r\n              <TYPE.main color={theme.primary}> Price Updated</TYPE.main>\r\n            </RowFixed>\r\n            <ButtonPrimary\r\n              style={{ padding: '.5rem', width: 'fit-content', fontSize: '0.825rem', borderRadius: '12px' }}\r\n              onClick={onAcceptChanges}\r\n            >\r\n              <Trans>Accept</Trans>\r\n            </ButtonPrimary>\r\n          </RowBetween>\r\n        </SwapShowAcceptChanges>\r\n      ) : null}\r\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\r\n        {trade.tradeType === TradeType.EXACT_INPUT ? (\r\n          <TYPE.italic textAlign=\"left\" style={{ width: '100%' }}>\r\n            {t`Output is estimated. You will receive at least `}{' '}\r\n            <b>\r\n              {slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)} {nativeOutput?.symbol}\r\n            </b>{' '}\r\n            {t` or the transaction will revert.`}\r\n          </TYPE.italic>\r\n        ) : (\r\n          <TYPE.italic textAlign=\"left\" style={{ width: '100%' }}>\r\n            {t`Input is estimated. You will sell at most `}\r\n            <b>\r\n              {slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)} {nativeInput?.symbol}\r\n            </b>\r\n            {t` or the transaction will revert.`}\r\n            {t` or the transaction will revert.`}\r\n          </TYPE.italic>\r\n        )}\r\n      </AutoColumn>\r\n      {recipient !== null ? (\r\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\r\n          <TYPE.main>\r\n            Output will be sent to{' '}\r\n            <b title={recipient}>{isAddress(chainId, recipient) ? shortenAddress(chainId, recipient) : recipient}</b>\r\n          </TYPE.main>\r\n        </AutoColumn>\r\n      ) : null}\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import { Currency } from '@kyberswap/ks-sdk-core'\r\nimport { t } from '@lingui/macro'\r\nimport React, { useCallback, useMemo } from 'react'\r\n\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport { AnyTrade } from 'hooks/useSwapCallback'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\n\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: AnyTrade, tradeB: AnyTrade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\n\r\nexport default function ConfirmSwapModal({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  isOpen,\r\n  attemptingTxn,\r\n  txHash,\r\n  tokenAddToMetaMask,\r\n  showTxBanner,\r\n}: {\r\n  isOpen: boolean\r\n  trade: AnyTrade | undefined\r\n  originalTrade: AnyTrade | undefined\r\n  attemptingTxn: boolean\r\n  txHash: string | undefined\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  tokenAddToMetaMask?: Currency | undefined\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  onDismiss: () => void\r\n  showTxBanner?: boolean\r\n}) {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade],\r\n  )\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  const nativeInput = useCurrencyConvertedToNative(trade?.inputAmount?.currency)\r\n  const nativeOutput = useCurrencyConvertedToNative(trade?.outputAmount?.currency)\r\n  // text to show while loading\r\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\r\n    nativeInput?.symbol\r\n  } for ${trade?.outputAmount?.toSignificant(6)} ${nativeOutput?.symbol}`\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent\r\n          title={t`Confirm Swap`}\r\n          onDismiss={onDismiss}\r\n          topContent={modalHeader}\r\n          bottomContent={modalBottom}\r\n        />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage],\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      isOpen={isOpen}\r\n      onDismiss={onDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n      tokenAddToMetaMask={tokenAddToMetaMask}\r\n      showTxBanner={showTxBanner}\r\n    />\r\n  )\r\n}\r\n","import { Currency, Price } from '@kyberswap/ks-sdk-core'\r\nimport { Repeat } from 'react-feather'\r\nimport { Text } from 'rebass'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\n\r\nimport { StyledBalanceMaxMini } from './styleds'\r\n\r\ninterface TradePriceProps {\r\n  price?: Price<Currency, Currency>\r\n  showInverted: boolean\r\n  setShowInverted: (showInverted: boolean) => void\r\n}\r\n\r\nexport default function TradePrice({ price, showInverted, setShowInverted }: TradePriceProps) {\r\n  const theme = useTheme()\r\n\r\n  const formattedPrice = showInverted ? price?.toSignificant(6) : price?.invert()?.toSignificant(6)\r\n\r\n  const show = Boolean(price?.baseCurrency && price?.quoteCurrency)\r\n  const nativeQuote = useCurrencyConvertedToNative(price?.quoteCurrency as Currency)\r\n  const nativeBase = useCurrencyConvertedToNative(price?.baseCurrency as Currency)\r\n  const label = showInverted\r\n    ? `${nativeQuote?.symbol} = 1 ${nativeBase?.symbol}`\r\n    : `${nativeBase?.symbol} = 1 ${nativeQuote?.symbol}`\r\n\r\n  return (\r\n    <Text fontWeight={500} fontSize={14} color={theme.text2} style={{ alignItems: 'center', display: 'flex' }}>\r\n      {show ? (\r\n        <>\r\n          {formattedPrice ?? '-'} {label}\r\n          <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\r\n            <Repeat size={14} color={theme.primary} />\r\n          </StyledBalanceMaxMini>\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Text>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { Router, Trade } from '@kyberswap/ks-sdk-classic'\r\nimport { Currency, Percent, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport JSBI from 'jsbi'\r\nimport { useMemo } from 'react'\r\n\r\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useTradeExactIn } from 'hooks/Trades'\r\nimport useENS from 'hooks/useENS'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { calculateGasMargin, isAddress, shortenAddress } from 'utils'\r\nimport { formatCurrencyAmount } from 'utils/formatBalance'\r\nimport { getDynamicFeeRouterContract } from 'utils/getContract'\r\nimport isZero from 'utils/isZero'\r\n\r\nexport type AnyTrade = Trade<Currency, Currency, TradeType>\r\n\r\nenum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID,\r\n}\r\n\r\ninterface SwapCall {\r\n  address: string\r\n  calldata: string\r\n  value: string\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: AnyTrade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n  const deadline = useTransactionDeadline()\r\n  const tradeBestExactInAnyway = useTradeExactIn(trade?.inputAmount, trade?.outputAmount.currency || undefined)\r\n  return useMemo(() => {\r\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\r\n\r\n    const routerContract: Contract | null = getDynamicFeeRouterContract(chainId, library, account)\r\n    if (!routerContract) {\r\n      return []\r\n    }\r\n    const swapMethods = [\r\n      Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n        recipient,\r\n        deadline: deadline.toNumber(),\r\n      }),\r\n    ]\r\n\r\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n      swapMethods.push(\r\n        Router.swapCallParameters(trade, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n          recipient,\r\n          deadline: deadline.toNumber(),\r\n        }),\r\n      )\r\n    } else if (!!tradeBestExactInAnyway) {\r\n      swapMethods.push(\r\n        Router.swapCallParameters(tradeBestExactInAnyway, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n          recipient,\r\n          deadline: deadline.toNumber(),\r\n        }),\r\n      )\r\n    }\r\n\r\n    return swapMethods.map(({ methodName, args, value }) => ({\r\n      address: routerContract.address,\r\n      calldata: routerContract.interface.encodeFunctionData(methodName, args),\r\n      value,\r\n    }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, tradeBestExactInAnyway])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: AnyTrade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\r\n\r\n  const addTransactionWithType = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      } else {\r\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n      }\r\n    }\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map(call => {\r\n            const { address, calldata, value } = call\r\n            const tx =\r\n              !value || isZero(value)\r\n                ? { from: account, to: address, data: calldata }\r\n                : {\r\n                    from: account,\r\n                    to: address,\r\n                    data: calldata,\r\n                    value,\r\n                  }\r\n\r\n            return library\r\n              .estimateGas(tx)\r\n              .then((gasEstimate: BigNumber) => {\r\n                return {\r\n                  call,\r\n                  gasEstimate,\r\n                }\r\n              })\r\n              .catch((gasError: any) => {\r\n                // This callback only for swap legacy, dont need to track error on sentry\r\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return library\r\n                  .call(tx)\r\n                  .then((result: any) => {\r\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch((callError: any) => {\r\n                    console.debug('Call threw error', call, callError)\r\n                    let errorMessage: string\r\n                    switch (callError.message) {\r\n                      case 'execution reverted: DmmExchangeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\r\n                      case 'execution reverted: DmmExchangeRouter: EXCESSIVE_INPUT_AMOUNT':\r\n                        errorMessage =\r\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\r\n                        break\r\n                      default:\r\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.message}. This is probably an issue with one of the tokens you are swapping.`\r\n                    }\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          }),\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\r\n        )\r\n        // return new Promise((resolve, reject) => resolve(\"\"))\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: { address, calldata, value },\r\n        } = successfulEstimation\r\n\r\n        return library\r\n          .getSigner()\r\n          .sendTransaction({\r\n            from: account,\r\n            to: address,\r\n            data: calldata,\r\n            // let the wallet try if we can't estimate the gas\r\n            ...('gasEstimate' in successfulEstimation\r\n              ? { gasLimit: calculateGasMargin(successfulEstimation.gasEstimate) }\r\n              : {}),\r\n            ...(value && !isZero(value) ? { value } : {}),\r\n          })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = formatCurrencyAmount(trade.inputAmount)\r\n            const outputAmount = formatCurrencyAmount(trade.outputAmount)\r\n\r\n            const base = `${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(chainId, recipientAddressOrName)\r\n                      ? shortenAddress(chainId, recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            addTransactionWithType({ hash: response.hash, type: TRANSACTION_TYPE.SWAP, summary: withRecipient })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001 || error?.code === 'ACTION_REJECTED') {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, address, calldata, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null,\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransactionWithType])\r\n}\r\n","import { Trade } from '@kyberswap/ks-sdk-classic'\r\nimport { Currency, CurrencyAmount, Token, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport SwapIcon from 'assets/svg/swap.svg'\r\nimport AddressInputPanel from 'components/AddressInputPanel'\r\nimport { ButtonConfirmed, ButtonError, ButtonLight, ButtonPrimary } from 'components/Button'\r\nimport Card, { GreyCard } from 'components/Card/index'\r\nimport Column, { AutoColumn } from 'components/Column/index'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport Loader from 'components/Loader'\r\nimport { SwapPoolTabs } from 'components/NavigationTabs'\r\nimport ProgressSteps from 'components/ProgressSteps'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\r\nimport TokenWarningModal from 'components/TokenWarningModal'\r\nimport TransactionSettings from 'components/TransactionSettings'\r\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown'\r\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal'\r\nimport TradePrice from 'components/swap/TradePrice'\r\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, Dots, Wrapper } from 'components/swap/styleds'\r\nimport { SwapCallbackError } from 'components/swapv2/styleds'\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useAllTokens, useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback'\r\nimport { useSwapCallback } from 'hooks/useSwapCallback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\r\nimport AppBodyRaw from 'pages/AppBody'\r\nimport { ClickableText } from 'pages/Pool/styleds'\r\nimport { useToggleSettingsMenu, useWalletModalToggle } from 'state/application/hooks'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks'\r\nimport { useExpertModeManager, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { LinkStyledButton, TYPE } from 'theme'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\r\n\r\nconst AppBody = styled(AppBodyRaw)`\r\n  padding-top: 24px;\r\n`\r\n\r\nexport default function Swap({ history }: RouteComponentProps) {\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId),\r\n  ]\r\n\r\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency],\r\n  )\r\n  const handleConfirmTokenWarning = useCallback(() => {\r\n    setDismissTokenWarning(true)\r\n  }, [])\r\n\r\n  // dismiss warning if all imported tokens are in active lists\r\n  const defaultTokens = useAllTokens()\r\n  const importTokensNotInDefault =\r\n    urlLoadedTokens &&\r\n    urlLoadedTokens.filter((token: Token) => {\r\n      return !Boolean(token.address in defaultTokens)\r\n    })\r\n\r\n  const { account } = useActiveWeb3React()\r\n  const theme = useTheme()\r\n\r\n  // toggle wallet when disconnected\r\n  const toggleWalletModal = useWalletModalToggle()\r\n\r\n  // for expert mode\r\n  const toggleSettings = useToggleSettingsMenu()\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n  const {\r\n    wrapType,\r\n    execute: onWrap,\r\n    inputError: wrapInputError,\r\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const trade = showWrap ? undefined : v2Trade\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount,\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  // reset if they close warning without tokens in params\r\n  const handleDismissTokenWarning = useCallback(() => {\r\n    setDismissTokenWarning(true)\r\n    history.push('/swap-legacy')\r\n  }, [history])\r\n\r\n  // modal and loading\r\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    showConfirm: boolean\r\n    tradeToConfirm: Trade<Currency, Currency, TradeType> | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    showConfirm: false,\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined,\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n\r\n    if (approval === ApprovalState.NOT_APPROVED) {\r\n      setApprovalSubmitted(false)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount<Currency> | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\r\n    swapCallback()\r\n      .then(hash => {\r\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\r\n      })\r\n      .catch(error => {\r\n        setSwapState({\r\n          attemptingTxn: false,\r\n          tradeToConfirm,\r\n          showConfirm,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined,\r\n        })\r\n      })\r\n  }, [tradeToConfirm, priceImpactWithoutFee, showConfirm, swapCallback])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\r\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\r\n\r\n  const handleInputSelect = useCallback(\r\n    (inputCurrency: Currency) => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n    },\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(\r\n    (outputCurrency: Currency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const isLoading =\r\n    (!currencyBalances[Field.INPUT] || !currencyBalances[Field.OUTPUT]) && userHasSpecifiedInputOutput && !v2Trade\r\n\r\n  return (\r\n    <>\r\n      <TokenWarningModal\r\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\r\n        tokens={importTokensNotInDefault}\r\n        onConfirm={handleConfirmTokenWarning}\r\n        onDismiss={handleDismissTokenWarning}\r\n      />\r\n      <AppBody>\r\n        <SwapPoolTabs active={'swap'} />\r\n        <RowBetween mb={'16px'}>\r\n          <TYPE.black color={theme.text} fontSize={20} fontWeight={500}>{t`Swap`}</TYPE.black>\r\n          <TransactionSettings />\r\n        </RowBetween>\r\n\r\n        <Wrapper id=\"swap-page\">\r\n          <ConfirmSwapModal\r\n            isOpen={showConfirm}\r\n            trade={trade}\r\n            originalTrade={tradeToConfirm}\r\n            onAcceptChanges={handleAcceptChanges}\r\n            attemptingTxn={attemptingTxn}\r\n            txHash={txHash}\r\n            recipient={recipient}\r\n            allowedSlippage={allowedSlippage}\r\n            onConfirm={handleSwap}\r\n            swapErrorMessage={swapErrorMessage}\r\n            onDismiss={handleConfirmDismiss}\r\n            tokenAddToMetaMask={currencies[Field.OUTPUT]}\r\n          />\r\n\r\n          <AutoColumn gap={'7px'}>\r\n            <CurrencyInputPanel\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? t`From (estimated)` : t`From`}\r\n              value={formattedAmounts[Field.INPUT]}\r\n              currency={currencies[Field.INPUT]}\r\n              onUserInput={handleTypeInput}\r\n              onMax={atMaxAmountInput ? null : handleMaxInput}\r\n              onHalf={null}\r\n              onCurrencySelect={handleInputSelect}\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              id=\"swap-currency-input\"\r\n              showCommonBases={true}\r\n              positionMax=\"top\"\r\n            />\r\n            <AutoColumn justify=\"space-between\">\r\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                <ArrowWrapper clickable>\r\n                  <img\r\n                    src={SwapIcon}\r\n                    alt=\"SwapIcon\"\r\n                    width=\"22\"\r\n                    onClick={() => {\r\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                      onSwitchTokens()\r\n                    }}\r\n                  />\r\n                </ArrowWrapper>\r\n                {recipient === null && !showWrap && isExpertMode ? (\r\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                    <Trans>+ Add a send (optional)</Trans>\r\n                  </LinkStyledButton>\r\n                ) : null}\r\n              </AutoRow>\r\n            </AutoColumn>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.OUTPUT]}\r\n              onUserInput={handleTypeOutput}\r\n              label={independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To'}\r\n              onMax={null}\r\n              onHalf={null}\r\n              currency={currencies[Field.OUTPUT]}\r\n              onCurrencySelect={handleOutputSelect}\r\n              otherCurrency={currencies[Field.INPUT]}\r\n              id=\"swap-currency-output\"\r\n              showCommonBases={true}\r\n            />\r\n\r\n            {recipient !== null && !showWrap ? (\r\n              <>\r\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable={false}>\r\n                    <ArrowDown size=\"16\" color={theme.text2} />\r\n                  </ArrowWrapper>\r\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                    <Trans>- Remove send</Trans>\r\n                  </LinkStyledButton>\r\n                </AutoRow>\r\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n              </>\r\n            ) : null}\r\n\r\n            {showWrap ? null : (\r\n              <Card padding={'0 .75rem 0 .75rem'} borderRadius={'20px'}>\r\n                <AutoColumn gap=\"4px\">\r\n                  {Boolean(trade) && (\r\n                    <div style={{ alignItems: 'center', display: 'flex' }}>\r\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\r\n                        <Trans>Price:</Trans>&nbsp;\r\n                      </Text>\r\n                      <TradePrice\r\n                        price={trade?.executionPrice}\r\n                        showInverted={showInverted}\r\n                        setShowInverted={setShowInverted}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                    <div style={{ alignItems: 'center', display: 'flex' }}>\r\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\r\n                        <Trans>Max Slippage:</Trans>&nbsp;\r\n                      </ClickableText>\r\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\r\n                        {allowedSlippage / 100}%\r\n                      </ClickableText>\r\n                    </div>\r\n                  )}\r\n                </AutoColumn>\r\n              </Card>\r\n            )}\r\n          </AutoColumn>\r\n          <BottomGrouping>\r\n            {!account ? (\r\n              <ButtonLight onClick={toggleWalletModal}>\r\n                <Trans>Connect Wallet</Trans>\r\n              </ButtonLight>\r\n            ) : isLoading ? (\r\n              <GreyCard style={{ textAlign: 'center', borderRadius: '5.5px' }}>\r\n                <TYPE.main mb=\"4px\">\r\n                  <Dots>\r\n                    <Trans>Calculating best route</Trans>\r\n                  </Dots>\r\n                </TYPE.main>\r\n              </GreyCard>\r\n            ) : showWrap ? (\r\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\r\n                {wrapInputError ??\r\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n              </ButtonPrimary>\r\n            ) : noRoute && userHasSpecifiedInputOutput ? (\r\n              <GreyCard style={{ textAlign: 'center', borderRadius: '5.5px' }}>\r\n                <TYPE.main mb=\"4px\">\r\n                  <Trans>Insufficient liquidity for this trade.</Trans>\r\n                </TYPE.main>\r\n              </GreyCard>\r\n            ) : showApproveFlow ? (\r\n              <RowBetween>\r\n                <ButtonConfirmed\r\n                  onClick={approveCallback}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                  width=\"48%\"\r\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\r\n                  confirmed={approval === ApprovalState.APPROVED}\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <AutoRow gap=\"6px\" justify=\"center\">\r\n                      <Trans>Approving</Trans> <Loader stroke=\"white\" />\r\n                    </AutoRow>\r\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                    t`Approved`\r\n                  ) : (\r\n                    t`Approve ${currencies[Field.INPUT]?.symbol}`\r\n                  )}\r\n                </ButtonConfirmed>\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    if (isExpertMode) {\r\n                      handleSwap()\r\n                    } else {\r\n                      setSwapState({\r\n                        tradeToConfirm: trade,\r\n                        attemptingTxn: false,\r\n                        swapErrorMessage: undefined,\r\n                        showConfirm: true,\r\n                        txHash: undefined,\r\n                      })\r\n                    }\r\n                  }}\r\n                  width=\"48%\"\r\n                  id=\"swap-button\"\r\n                  disabled={\r\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\r\n                  }\r\n                  error={isValid && priceImpactSeverity > 2}\r\n                >\r\n                  <Text fontSize={16} fontWeight={500}>\r\n                    {priceImpactSeverity > 3 && !isExpertMode\r\n                      ? t`Price Impact High`\r\n                      : priceImpactSeverity > 2\r\n                      ? t`Swap Anyway`\r\n                      : t`Swap`}\r\n                  </Text>\r\n                </ButtonError>\r\n              </RowBetween>\r\n            ) : (\r\n              <ButtonError\r\n                onClick={() => {\r\n                  if (isExpertMode) {\r\n                    handleSwap()\r\n                  } else {\r\n                    setSwapState({\r\n                      tradeToConfirm: trade,\r\n                      attemptingTxn: false,\r\n                      swapErrorMessage: undefined,\r\n                      showConfirm: true,\r\n                      txHash: undefined,\r\n                    })\r\n                  }\r\n                }}\r\n                id=\"swap-button\"\r\n                disabled={\r\n                  !isValid ||\r\n                  (priceImpactSeverity > 3 && !isExpertMode) ||\r\n                  !!swapCallbackError ||\r\n                  approval !== ApprovalState.APPROVED\r\n                }\r\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\r\n              >\r\n                <Text fontSize={20} fontWeight={500}>\r\n                  {swapInputError\r\n                    ? swapInputError\r\n                    : priceImpactSeverity > 3 && !isExpertMode\r\n                    ? t`Price Impact Too High`\r\n                    : approval !== ApprovalState.APPROVED\r\n                    ? t`Checking allowance...`\r\n                    : priceImpactSeverity > 2\r\n                    ? t`Swap Anyway`\r\n                    : t`Swap`}\r\n                </Text>\r\n              </ButtonError>\r\n            )}\r\n            {showApproveFlow && (\r\n              <Column style={{ marginTop: '1rem' }}>\r\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\r\n              </Column>\r\n            )}\r\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n          </BottomGrouping>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <AdvancedSwapDetailsDropdown trade={trade} />\r\n      <SwitchLocaleLink />\r\n    </>\r\n  )\r\n}\r\n","import { Percent } from '@kyberswap/ks-sdk-core'\r\n\r\nimport { ALLOWED_PRICE_IMPACT_HIGH, PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN } from 'constants/index'\r\n\r\n/**\r\n * Given the price impact, get user confirmation.\r\n *\r\n * @param priceImpactWithoutFee price impact of the trade without the fee.\r\n */\r\nexport default function confirmPriceImpactWithoutFee(priceImpactWithoutFee: Percent): boolean {\r\n  if (!priceImpactWithoutFee.lessThan(PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\r\n    return (\r\n      window.prompt(\r\n        `This swap has a price impact of at least ${PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(\r\n          0,\r\n        )}%. Please type the word \"confirm\" to continue with this swap.`,\r\n      ) === 'confirm'\r\n    )\r\n  } else if (!priceImpactWithoutFee.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\r\n    return window.confirm(\r\n      `This swap has a price impact of at least ${ALLOWED_PRICE_IMPACT_HIGH.toFixed(\r\n        0,\r\n      )}%. Please confirm that you would like to continue with this swap.`,\r\n    )\r\n  }\r\n  return true\r\n}\r\n"],"sourceRoot":""}