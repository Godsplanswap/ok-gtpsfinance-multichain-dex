{"version":3,"sources":["components/LiquidityProviderMode/index.tsx","components/PoolList/styled.tsx","components/ZapError/index.tsx","hooks/useProAmmPositions.ts","pages/AddLiquidity/TokenPair.tsx","pages/AddLiquidity/ZapIn.tsx","pages/AddLiquidity/index.tsx","pages/IncreaseLiquidity/styled.tsx","pages/IncreaseLiquidity/index.tsx","hooks/useProAmmDerivedPositionInfo.ts"],"names":["Tab","styled","TabItem","LiquidityProviderMode","activeTab","setActiveTab","singleTokenInfo","theme","useTheme","style","padding","active","onClick","role","text","size","isActive","color","subText","ListItemGroupContainer","div","border","isDisableShowTwoPools","isShowExpandedPools","rgba","tableHeader","background","ItemCardGroupContainer","TableRow","isShowBorderBottom","DataText","Flex","text7","ButtonWrapper","PoolAddressContainer","AddressAndAMPContainer","AddressWrapper","TextAMP","TokenPairContainer","TextTokenPair","TextAMPLiquidity","AMPLiquidityAndTVLContainer","TextTVL","TextShowMorePools","primary","disabled","mediaWidth","upToMedium","DashedDivider","bg14","ChevronContainer","StyledItemCard","HeaderContainer","HeaderTitle","HeaderAMPAndAddress","TokenRatioContainer","tabBackgound","TokenRatioGrid","Progress","value","tabActive","TokenRatioName","TokenRatioPercent","TabContainer","InformationContainer","ButtonGroupContainer","FooterContainer","ZapErrorWrapper","warning","red","ZapError","message","strokeWidth","useProAmmPositionsFromTokenIds","tokenIds","positionManager","useProAmmNFTPositionManagerContract","useActiveWeb3React","isEVM","networkInfo","inputs","useMemo","map","tokenId","results","useSingleContractMultipleData","loading","some","error","positions","call","i","result","poolId","getCreate2Address","elastic","coreFactory","keccak256","defaultAbiCoder","encode","info","token0","token1","fee","initCodeHash","feeGrowthInsideLast","pos","nonce","liquidity","operator","tickLower","tickUpper","rTokenOwed","position","useProAmmPositionsFromTokenId","undefined","useProAmmPositions","account","useSingleCallResult","balanceLoading","balanceResult","accountBalance","toNumber","tokenIdsArgs","tokenRequests","push","tokenIdResults","someTokenIdsLoading","filter","BigNumber","from","positionsLoading","TokenPair","currencyIdA","currencyIdB","pairAddress","chainId","library","useWeb3React","currencyA","useCurrency","currencyB","currencyAIsETHER","isNative","currencyAIsWETH","equals","WETH","currencyBIsETHER","currencyBIsWETH","toggleWalletModal","useWalletModalToggle","useExpertModeManager","expertMode","useMintState","independentField","typedValue","otherTypedValue","useDerivedMintInfo","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","unAmplifiedPairAddress","isStaticFeePair","isOldStaticFeeContract","nativeA","useCurrencyConvertedToNative","Field","CURRENCY_A","nativeB","CURRENCY_B","amp","JSBI","BigInt","ampConvertedInBps","toString","Fraction","parseUnits","linkToUnamplifiedPool","equalTo","isZero","useMintActionHandlers","onFieldAInput","onFieldBInput","isValid","useState","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","addLiquidityError","setAddLiquidityError","formattedAmounts","toSignificant","maxAmounts","reduce","accumulator","field","maxAmountSpend","routerAddress","classic","oldStatic","router","static","dynamic","useApproveCallback","approvalA","approveACallback","approvalB","approveBCallback","addTransactionWithType","useTransactionAdder","addPair","usePairAdderByTokens","onAdd","getOldStaticFeeRouterContract","getStaticFeeRouterContract","getDynamicFeeRouterContract","parsedAmountA","parsedAmountB","amountsMin","calculateSlippageAmount","tokenBIsETH","virtualReserveToken","virtualReserveOf","wrapped","virtualReserveETH","currentRate","divide","multiply","quotient","exponentiate","allowedSlippageAmount","vReserveRatioBounds","subtract","add","estimate","estimateGas","addLiquidityETH","method","args","address","toHexString","virtualReserveA","virtualReserveB","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","cA","cB","hash","type","TRANSACTION_TYPE","ADD_LIQUIDITY","summary","symbol","arbitrary","poolAddress","token_1","token_2","add_liquidity_method","tA","tB","catch","err","e","Error","cause","name","captureException","extra","code","console","includes","pendingText","handleDismissConfirmation","useCallback","realPercentToken0","reserve0","asFraction","virtualReserve0","reserve1","virtualReserve1","realPercentToken1","percentToken0","percentToken1","tokens","currency","usdPrices","useTokensPrice","marketPrices","useTokensMarketPrice","estimatedUsdCurrencyA","parseFloat","estimatedUsdCurrencyB","poolPrice","Number","marketPrice","showSanityPriceWarning","Math","abs","history","useHistory","modalHeader","gap","Row","marginTop","fontSize","fontWeight","lineHeight","marginRight","italic","textAlign","modalBottom","ConfirmAddModalBottom","amplification","estimatedUsd","TransactionConfirmationModal","isOpen","onDismiss","content","title","topContent","bottomContent","id","to","CurrencyInputPanel","onUserInput","onMax","toExact","onHalf","showCommonBases","positionMax","formattedNum","disableCurrencySelect","isSwitchMode","onSwitchCurrency","replace","NativeCurrencies","justifyContent","alignItems","Loader","PairState","INVALID","PoolPriceBar","borderRadius","marginBottom","borderBottom","subHeader","black","CurrentPrice","flex","QuestionHelper","AMP_HINT","feeRangeCalc","yellow2","marginLeft","ApprovalState","NOT_APPROVED","PENDING","APPROVED","Button","width","ZapIn","zapInError","setZapInError","useDerivedZapInInfo","insufficientLiquidity","independentToken","dependentToken","selectedCurrencyIsETHER","selectedCurrencyIsWETH","useZapInActionHandlers","onFieldInput","onSwitchField","amountToApprove","tryParseAmount","zap","approval","approveCallback","userInCurrencyAmount","userIn","minLPQty","onZapIn","zapContract","getZapContract","tokenIn","tokenOut","zapInEth","zapIn","unshift","factory","tx","invert","handleSwitchCurrency","tokenAPoolAllocUsd","tokenBPoolAllocUsd","estimatedUsdForPair","priceImpact","lessThan","computePriceImpact","priceImpactWithoutFee","computePriceImpactWithoutFee","priceImpactSeverity","warningSeverity","currencyId","borderTop","justify","CurrencyLogo","paddingTop","FormattedPriceImpact","AddLiquidity","match","params","oneCurrencyIsWETH","mixpanelHandler","useMixpanel","useEffect","MIXPANEL_TYPE","ADD_LIQUIDITY_INITIATED","action","LiquidityAction","ADD","tutorialType","TutorialType","CLASSIC_ADD_LIQUIDITY","showUnwrapped","Container","upToSmall","GridColumn","FirstColumn","AutoColumn","SecondColumn","feeAmountFromUrl","feeAmount","prevChainId","usePrevious","existingPositionDetails","owner","ownsNFT","ownByFarm","farms","flat","isAddressString","positionDetails","currency0","currency1","usePool","pool","Position","useProAmmDerivedPositionInfo","existingPosition","Object","values","FeeAmount","baseCurrency","quoteCurrency","useProAmmMintState","useProAmmDerivedMintInfo","errorMessage","invalidRange","depositADisabled","depositBDisabled","ticksAtLimit","baseCurrencyIsETHER","baseCurrencyIsWETH","quoteCurrencyIsETHER","quoteCurrencyIsWETH","VERSION","ELASTIC","previousTicks","useProAmmPreviousTicks","useProAmmMintActionHandlers","nonfungiblePositionManager","length","useNative","NonfungiblePositionManager","addCallParameters","slippageTolerance","Percent","calldata","txn","data","getSigner","newTxn","sendTransaction","INCREASE_LIQUIDITY","showApprovalA","showApprovalB","Buttons","sx","flexDirection","ProAmmPoolInfo","ProAmmPooledTokens","liquidityValue0","liquidityValue1","ProAmmPriceRange","hideChart","INCREASE","showTooltip","hideShare","ELASTIC_INCREASE_LIQUIDITY","paddingBottom","backgroundColor","bg3Opacity4","shortenAddress","display","Copy","toCopy","Divider","pooled","CurrencyAmount","fromRawAmount","unwrappedToken","amount0","amount1","locked"],"mappings":"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","file":"static/js/add-liquidity-page.022ec78b.chunk.js","sourcesContent":["import { Trans } from '@lingui/macro'\r\nimport styled from 'styled-components'\r\n\r\nimport InfoHelper from 'components/InfoHelper'\r\nimport { TabContainer, TabItem } from 'components/PoolList/styled'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst Tab = styled(TabItem)`\r\n  padding: 8px;\r\n`\r\n\r\nconst LiquidityProviderMode = ({\r\n  activeTab,\r\n  setActiveTab,\r\n  singleTokenInfo,\r\n}: {\r\n  activeTab: number\r\n  setActiveTab: (activeTab: number) => void\r\n  singleTokenInfo: string\r\n}) => {\r\n  const theme = useTheme()\r\n  return (\r\n    <TabContainer style={{ padding: '4px' }}>\r\n      <Tab active={activeTab === 0} onClick={() => setActiveTab(0)} role=\"button\">\r\n        <Trans>Token Pair</Trans>\r\n      </Tab>\r\n      <Tab active={activeTab === 1} onClick={() => setActiveTab(1)} role=\"button\">\r\n        <Trans>Single Token</Trans>\r\n        <InfoHelper\r\n          text={singleTokenInfo}\r\n          size={12}\r\n          isActive={activeTab === 1}\r\n          color={activeTab === 1 ? theme.text : theme.subText}\r\n        />\r\n      </Tab>\r\n    </TabContainer>\r\n  )\r\n}\r\n\r\nexport default LiquidityProviderMode\r\n","import { rgba } from 'polished'\r\nimport { Flex } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nexport const ListItemGroupContainer = styled.div<{ isDisableShowTwoPools: boolean; isShowExpandedPools: boolean }>`\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.border}`};\r\n  cursor: ${({ isDisableShowTwoPools }) => (isDisableShowTwoPools ? 'default' : 'pointer')};\r\n  background-color: ${({ theme, isShowExpandedPools }) =>\r\n    isShowExpandedPools ? rgba(theme.tableHeader, 0.6) : theme.background};\r\n\r\n  &:hover {\r\n    ${({ theme, isDisableShowTwoPools, isShowExpandedPools }) =>\r\n      !isDisableShowTwoPools && !isShowExpandedPools && `background-color: ${theme.tableHeader}`};\r\n  }\r\n`\r\n\r\nexport const ItemCardGroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nexport const TableRow = styled.div<{ isShowExpandedPools?: boolean; isShowBorderBottom?: boolean }>`\r\n  display: grid;\r\n  grid-gap: 1.5rem;\r\n  grid-template-columns: 1.5fr 1.5fr 2fr 0.75fr 1fr 1fr 1fr 1.5fr;\r\n  padding: 24px 16px;\r\n  font-size: 14px;\r\n  align-items: center;\r\n  height: fit-content;\r\n  position: relative;\r\n\r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 86.36%; // 100% - (1.5fr / grid-template-columns)\r\n    border-bottom: ${({ theme, isShowBorderBottom }) =>\r\n      isShowBorderBottom ? `1px solid ${rgba(theme.border, 0.5)}` : 'none'};\r\n  }\r\n`\r\n\r\nexport const DataText = styled(Flex)`\r\n  color: ${({ theme }) => theme.text7};\r\n  flex-direction: column;\r\n`\r\n\r\nexport const ButtonWrapper = styled(Flex)`\r\n  justify-content: flex-end;\r\n  gap: 4px;\r\n  align-items: center;\r\n`\r\n\r\nexport const PoolAddressContainer = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nexport const AddressAndAMPContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`\r\n\r\nexport const AddressWrapper = styled.div`\r\n  display: flex;\r\n  align-items: baseline;\r\n`\r\n\r\nexport const TextAMP = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.subText};\r\n`\r\n\r\nexport const TokenPairContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`\r\n\r\nexport const TextTokenPair = styled.div``\r\n\r\nexport const TextAMPLiquidity = styled.div``\r\n\r\nexport const AMPLiquidityAndTVLContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 8px;\r\n`\r\n\r\nexport const TextTVL = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.subText};\r\n`\r\n\r\nexport const TextShowMorePools = styled.div<{ disabled: boolean }>`\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.primary};\r\n  grid-column: 2 / -1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 24px;\r\n\r\n  ${({ disabled }) => (disabled ? `opacity: 0.5;` : ``)}\r\n  &:hover {\r\n    ${({ disabled }) => (!disabled ? `opacity: 0.7;` : ``)}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToMedium`\r\n    padding: 0;\r\n  `}\r\n`\r\n\r\nexport const DashedDivider = styled.div`\r\n  ${({ theme }) => `\r\n    border-bottom: 1px dashed ${theme.bg14};\r\n  `}\r\n`\r\n\r\nexport const ChevronContainer = styled.div`\r\n  margin-left: 8px;\r\n`\r\n\r\nexport const StyledItemCard = styled.div`\r\n  border-radius: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  position: relative;\r\n  min-width: 392px;\r\n  background: ${({ theme }) => theme.background};\r\n  padding: 20px;\r\n  overflow: hidden;\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToMedium`\r\n    min-width: revert;\r\n    padding: 16px;\r\n  `}\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n  display: grid;\r\n  grid-template-rows: auto auto;\r\n  grid-template-columns: 1fr auto;\r\n  gap: 4px;\r\n`\r\n\r\nexport const HeaderTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.text};\r\n  grid-column: 1 / 1;\r\n  grid-row: 1 / 1;\r\n  line-height: 24px;\r\n`\r\n\r\nexport const HeaderAMPAndAddress = styled.div`\r\n  display: flex;\r\n  gap: 4px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.subText};\r\n  grid-column: 1 / 1;\r\n  grid-row: 2 / 2;\r\n  line-height: 16px;\r\n`\r\n\r\nexport const TokenRatioContainer = styled.div`\r\n  background: ${({ theme }) => theme.tabBackgound};\r\n  position: relative;\r\n  overflow: hidden;\r\n  padding: 4px;\r\n  border-radius: 999px;\r\n`\r\n\r\nexport const TokenRatioGrid = styled.div`\r\n  padding: 4px;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr 1fr auto;\r\n  grid-template-rows: 1fr;\r\n  gap: 8px;\r\n  isolation: isolate;\r\n`\r\n\r\nexport const Progress = styled.div<{ value: string }>`\r\n  position: absolute;\r\n  top: 4px;\r\n  left: 4px;\r\n  bottom: 4px;\r\n  width: ${({ value }) => value + '%'};\r\n  background: ${({ theme }) => theme.tabActive};\r\n  border-top-left-radius: 999px;\r\n  border-bottom-left-radius: 999px;\r\n`\r\n\r\nexport const TokenRatioName = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`\r\n\r\nexport const TokenRatioPercent = styled.div`\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.subText};\r\n`\r\n\r\nexport const TabContainer = styled.div`\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.tabBackgound};\r\n  border-radius: 20px;\r\n  display: flex;\r\n  padding: 2px;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const TabItem = styled.div<{ active?: boolean }>`\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  color: ${({ theme, active }) => (active ? theme.text : theme.subText)};\r\n  background: ${({ theme, active }) => (active ? theme.tabActive : 'transparent')};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 6px;\r\n  border-radius: 20px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  transition: color 300ms;\r\n`\r\n\r\nexport const InformationContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`\r\n\r\nexport const ButtonGroupContainer = styled.div`\r\n  display: flex;\r\n  gap: 16px;\r\n\r\n  > * {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nexport const FooterContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n","import { rgba } from 'polished'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport styled from 'styled-components'\r\n\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nexport const ZapErrorWrapper = styled.div<{ warning?: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  background: ${({ theme, warning }) => rgba(warning ? theme.warning : theme.red, 0.35)};\r\n  padding: 1rem;\r\n  border-radius: 999px;\r\n  margin-bottom: 28px;\r\n  color: ${({ theme }) => theme.text};\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n`\r\n\r\nconst ZapError = ({ message, warning }: { message?: string; warning?: boolean }) => {\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <ZapErrorWrapper warning={warning}>\r\n      <AlertTriangle color={warning ? theme.warning : theme.red} style={{ strokeWidth: 1.5 }} size={16} />\r\n      {message}\r\n    </ZapErrorWrapper>\r\n  )\r\n}\r\n\r\nexport default ZapError\r\n","import { defaultAbiCoder } from '@ethersproject/abi'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { keccak256 } from '@ethersproject/solidity'\r\nimport { useMemo } from 'react'\r\n\r\nimport { EVMNetworkInfo } from 'constants/networks/type'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { Result, useSingleCallResult, useSingleContractMultipleData } from 'state/multicall/hooks'\r\nimport { PositionDetails } from 'types/position'\r\n\r\nimport { useProAmmNFTPositionManagerContract } from './useContract'\r\n\r\n//           { \"internalType\": \"uint96\", \"name\": \"nonce\", \"type\": \"uint96\" },\r\n//           { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" },\r\n//           { \"internalType\": \"uint80\", \"name\": \"poolId\", \"type\": \"uint80\" },\r\n//           { \"internalType\": \"int24\", \"name\": \"tickLower\", \"type\": \"int24\" },\r\n//           { \"internalType\": \"int24\", \"name\": \"tickUpper\", \"type\": \"int24\" },\r\n//           { \"internalType\": \"uint128\", \"name\": \"liquidity\", \"type\": \"uint128\" },\r\n//           { \"internalType\": \"uint256\", \"name\": \"rTokenOwed\", \"type\": \"uint256\" },\r\n//           { \"internalType\": \"uint256\", \"name\": \"feeGrowthInsideLast\", \"type\": \"uint256\" }\r\ninterface UseProAmmPositionsResults {\r\n  loading: boolean\r\n  positions: PositionDetails[] | undefined\r\n}\r\n\r\nexport function useProAmmPositionsFromTokenIds(tokenIds: BigNumber[] | undefined): UseProAmmPositionsResults {\r\n  const positionManager = useProAmmNFTPositionManagerContract()\r\n  const { isEVM, networkInfo } = useActiveWeb3React()\r\n\r\n  const inputs = useMemo(() => (tokenIds ? tokenIds.map(tokenId => [tokenId]) : []), [tokenIds])\r\n  const results = useSingleContractMultipleData(positionManager, 'positions', inputs)\r\n\r\n  const loading = useMemo(() => results.some(({ loading }) => loading), [results])\r\n  const error = useMemo(() => results.some(({ error }) => error), [results])\r\n\r\n  const positions = useMemo(() => {\r\n    if (!loading && !error && tokenIds && isEVM) {\r\n      return results.map((call, i) => {\r\n        const tokenId = tokenIds[i]\r\n        const result = call.result as Result\r\n\r\n        return {\r\n          tokenId: tokenId,\r\n          poolId: getCreate2Address(\r\n            (networkInfo as EVMNetworkInfo).elastic.coreFactory,\r\n            keccak256(\r\n              ['bytes'],\r\n              [\r\n                defaultAbiCoder.encode(\r\n                  ['address', 'address', 'uint24'],\r\n                  [result.info.token0, result.info.token1, result.info.fee],\r\n                ),\r\n              ],\r\n            ),\r\n            (networkInfo as EVMNetworkInfo).elastic.initCodeHash,\r\n          ),\r\n          feeGrowthInsideLast: result.pos.feeGrowthInsideLast,\r\n          nonce: result.pos.nonce,\r\n          liquidity: result.pos.liquidity,\r\n          operator: result.pos.operator,\r\n          tickLower: result.pos.tickLower,\r\n          tickUpper: result.pos.tickUpper,\r\n          rTokenOwed: result.pos.rTokenOwed,\r\n          fee: result.info.fee,\r\n          token0: result.info.token0,\r\n          token1: result.info.token1,\r\n        }\r\n      })\r\n    }\r\n    return undefined\r\n  }, [loading, error, results, tokenIds, networkInfo, isEVM])\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      loading,\r\n      positions: positions?.map((position, i) => ({ ...position, tokenId: inputs[i][0] })),\r\n    }\r\n  }, [loading, positions, inputs])\r\n}\r\n\r\ninterface UseProAmmPositionResults {\r\n  loading: boolean\r\n  position: PositionDetails | undefined\r\n}\r\n\r\nexport function useProAmmPositionsFromTokenId(tokenId: BigNumber | undefined): UseProAmmPositionResults {\r\n  const position = useProAmmPositionsFromTokenIds(tokenId ? [tokenId] : undefined)\r\n  return {\r\n    loading: position.loading,\r\n    position: position.positions?.[0],\r\n  }\r\n}\r\n\r\nexport const useTokenIdsOwnedByAddress = (address: string): { loading: boolean; tokenIds: BigNumber[] } => {\r\n  const positionManager = useProAmmNFTPositionManagerContract()\r\n  const { loading: balanceLoading, result: balanceResult } = useSingleCallResult(positionManager, 'balanceOf', [\r\n    address ?? undefined,\r\n  ])\r\n\r\n  // we don't expect any account balance to ever exceed the bounds of max safe int\r\n  const accountBalance: number | undefined = balanceResult?.[0]?.toNumber()\r\n\r\n  const tokenIdsArgs = useMemo(() => {\r\n    if (accountBalance && address) {\r\n      const tokenRequests = []\r\n      for (let i = 0; i < accountBalance; i++) {\r\n        tokenRequests.push([address, i])\r\n      }\r\n      return tokenRequests\r\n    }\r\n    return []\r\n  }, [address, accountBalance])\r\n\r\n  const tokenIdResults = useSingleContractMultipleData(positionManager, 'tokenOfOwnerByIndex', tokenIdsArgs)\r\n\r\n  const someTokenIdsLoading = useMemo(() => tokenIdResults.some(({ loading }) => loading), [tokenIdResults])\r\n  const tokenIds = useMemo(() => {\r\n    if (address) {\r\n      return tokenIdResults\r\n        .map(({ result }) => result)\r\n        .filter((result): result is Result => !!result)\r\n        .map(result => BigNumber.from(result[0]))\r\n    }\r\n    return []\r\n  }, [address, tokenIdResults])\r\n\r\n  return {\r\n    loading: balanceLoading || someTokenIdsLoading,\r\n    tokenIds,\r\n  }\r\n}\r\n\r\nexport function useProAmmPositions(account: string | null | undefined): UseProAmmPositionsResults {\r\n  const positionManager = useProAmmNFTPositionManagerContract()\r\n  const { loading: balanceLoading, result: balanceResult } = useSingleCallResult(positionManager, 'balanceOf', [\r\n    account ?? undefined,\r\n  ])\r\n\r\n  // we don't expect any account balance to ever exceed the bounds of max safe int\r\n  const accountBalance: number | undefined = balanceResult?.[0]?.toNumber()\r\n\r\n  const tokenIdsArgs = useMemo(() => {\r\n    if (accountBalance && account) {\r\n      const tokenRequests = []\r\n      for (let i = 0; i < accountBalance; i++) {\r\n        tokenRequests.push([account, i])\r\n      }\r\n      return tokenRequests\r\n    }\r\n    return []\r\n  }, [account, accountBalance])\r\n\r\n  const tokenIdResults = useSingleContractMultipleData(positionManager, 'tokenOfOwnerByIndex', tokenIdsArgs)\r\n\r\n  const someTokenIdsLoading = useMemo(() => tokenIdResults.some(({ loading }) => loading), [tokenIdResults])\r\n  const tokenIds = useMemo(() => {\r\n    if (account) {\r\n      return tokenIdResults\r\n        .map(({ result }) => result)\r\n        .filter((result): result is Result => !!result)\r\n        .map(result => BigNumber.from(result[0]))\r\n    }\r\n    return []\r\n  }, [account, tokenIdResults])\r\n\r\n  const { positions, loading: positionsLoading } = useProAmmPositionsFromTokenIds(tokenIds)\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      loading: someTokenIdsLoading || balanceLoading || positionsLoading,\r\n      positions,\r\n    }\r\n  }, [someTokenIdsLoading, balanceLoading, positionsLoading, positions])\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, CurrencyAmount, Fraction, TokenAmount, WETH } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport { captureException } from '@sentry/react'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useMemo, useState } from 'react'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from 'components/Button'\r\nimport { AutoColumn } from 'components/Column'\r\nimport { ConfirmAddModalBottom } from 'components/ConfirmAddModalBottom'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport CurrentPrice from 'components/CurrentPrice'\r\nimport Loader from 'components/Loader'\r\nimport { PoolPriceBar, PoolPriceRangeBar, ToggleComponent } from 'components/PoolPriceBar'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport Row, { AutoRow, RowBetween, RowFlat } from 'components/Row'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport { AMP_HINT } from 'constants/index'\r\nimport { EVMNetworkInfo } from 'constants/networks/type'\r\nimport { NativeCurrencies } from 'constants/tokens'\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokensMarketPrice from 'hooks/useTokensMarketPrice'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { Dots, Wrapper } from 'pages/Pool/styleds'\r\nimport { useTokensPrice, useWalletModalToggle } from 'state/application/hooks'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useExpertModeManager, usePairAdderByTokens, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { StyledInternalLink, TYPE, UppercaseText } from 'theme'\r\nimport { calculateGasMargin, calculateSlippageAmount, formattedNum } from 'utils'\r\nimport { feeRangeCalc, useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport {\r\n  getDynamicFeeRouterContract,\r\n  getOldStaticFeeRouterContract,\r\n  getStaticFeeRouterContract,\r\n} from 'utils/getContract'\r\nimport isZero from 'utils/isZero'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\n\r\nimport {\r\n  ActiveText,\r\n  CurrentPriceWrapper,\r\n  DynamicFeeRangeWrapper,\r\n  FirstColumn,\r\n  GridColumn,\r\n  PoolRatioWrapper,\r\n  SecondColumn,\r\n  Section,\r\n  USDPrice,\r\n  Warning,\r\n} from './styled'\r\n\r\nconst TokenPair = ({\r\n  currencyIdA,\r\n  currencyIdB,\r\n  pairAddress,\r\n}: {\r\n  currencyIdA: string\r\n  currencyIdB: string\r\n  pairAddress: string\r\n}) => {\r\n  const { account, chainId, isEVM, networkInfo } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n  const theme = useTheme()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const currencyAIsETHER = !!(chainId && currencyA && currencyA.isNative)\r\n  const currencyAIsWETH = !!(chainId && currencyA && currencyA.equals(WETH[chainId]))\r\n  const currencyBIsETHER = !!(chainId && currencyB && currencyB.isNative)\r\n  const currencyBIsWETH = !!(chainId && currencyB && currencyB.equals(WETH[chainId]))\r\n\r\n  const toggleWalletModal = useWalletModalToggle() // toggle wallet when disconnected\r\n\r\n  const [expertMode] = useExpertModeManager()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n    unAmplifiedPairAddress,\r\n    isStaticFeePair,\r\n    isOldStaticFeeContract,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined, pairAddress)\r\n  const nativeA = useCurrencyConvertedToNative(currencies[Field.CURRENCY_A])\r\n  const nativeB = useCurrencyConvertedToNative(currencies[Field.CURRENCY_B])\r\n\r\n  const amp = pair?.amp || JSBI.BigInt(0)\r\n\r\n  const ampConvertedInBps = !!amp.toString()\r\n    ? new Fraction(JSBI.BigInt(parseUnits(amp.toString() || '1', 20)), JSBI.BigInt(parseUnits('1', 16)))\r\n    : undefined\r\n\r\n  const linkToUnamplifiedPool =\r\n    !!ampConvertedInBps &&\r\n    ampConvertedInBps.equalTo(JSBI.BigInt(10000)) &&\r\n    !!unAmplifiedPairAddress &&\r\n    !isZero(unAmplifiedPairAddress)\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const [addLiquidityError, setAddLiquidityError] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  const routerAddress = isEVM\r\n    ? isStaticFeePair\r\n      ? isOldStaticFeeContract\r\n        ? (networkInfo as EVMNetworkInfo).classic.oldStatic?.router\r\n        : (networkInfo as EVMNetworkInfo).classic.static.router\r\n      : (networkInfo as EVMNetworkInfo).classic.dynamic?.router\r\n    : undefined\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], routerAddress || undefined)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], routerAddress || undefined)\r\n\r\n  const addTransactionWithType = useTransactionAdder()\r\n  const addPair = usePairAdderByTokens()\r\n\r\n  async function onAdd() {\r\n    // if (!pair) return\r\n    if (!chainId || !library || !account) return\r\n    const router = isStaticFeePair\r\n      ? isOldStaticFeeContract\r\n        ? getOldStaticFeeRouterContract(chainId, library, account)\r\n        : getStaticFeeRouterContract(chainId, library, account)\r\n      : getDynamicFeeRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n\r\n    let estimate,\r\n      method: (...args: any) => Promise<TransactionResponse>,\r\n      args: Array<string | string[] | number>,\r\n      value: BigNumber | null\r\n\r\n    if (!pair) return\r\n\r\n    if (currencyA.isNative || currencyB.isNative) {\r\n      const tokenBIsETH = currencyB.isNative\r\n\r\n      const virtualReserveToken = pair.virtualReserveOf(tokenBIsETH ? currencyA?.wrapped : currencyB?.wrapped)\r\n      const virtualReserveETH = pair.virtualReserveOf(tokenBIsETH ? currencyB?.wrapped : currencyA?.wrapped)\r\n\r\n      const currentRate = JSBI.divide(\r\n        JSBI.multiply(virtualReserveETH.quotient, JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(112))),\r\n        virtualReserveToken.quotient,\r\n      )\r\n\r\n      const allowedSlippageAmount = JSBI.divide(\r\n        JSBI.multiply(currentRate, JSBI.BigInt(allowedSlippage)),\r\n        JSBI.BigInt(10000),\r\n      )\r\n\r\n      const vReserveRatioBounds = [\r\n        JSBI.subtract(currentRate, allowedSlippageAmount).toString(),\r\n        JSBI.add(currentRate, allowedSlippageAmount).toString(),\r\n      ]\r\n\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n\r\n      args = [\r\n        (tokenBIsETH ? currencyA?.wrapped : currencyB?.wrapped)?.address ?? '', // token\r\n        pair.address,\r\n        // 40000,                                                                              //ampBps\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        vReserveRatioBounds,\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\r\n    } else {\r\n      const virtualReserveA = pair.virtualReserveOf(currencyA?.wrapped)\r\n      const virtualReserveB = pair.virtualReserveOf(currencyB?.wrapped)\r\n\r\n      const currentRate = JSBI.divide(\r\n        JSBI.multiply(virtualReserveB.quotient, JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(112))),\r\n        virtualReserveA.quotient,\r\n      )\r\n\r\n      const allowedSlippageAmount = JSBI.divide(\r\n        JSBI.multiply(currentRate, JSBI.BigInt(allowedSlippage)),\r\n        JSBI.BigInt(10000),\r\n      )\r\n\r\n      const vReserveRatioBounds = [\r\n        JSBI.subtract(currentRate, allowedSlippageAmount).toString(),\r\n        JSBI.add(currentRate, allowedSlippageAmount).toString(),\r\n      ]\r\n\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        currencyA?.wrapped.address ?? '',\r\n        currencyB?.wrapped.address ?? '',\r\n        pair.address,\r\n        // 40000,                                                                              //ampBps\r\n        parsedAmountA.quotient.toString(),\r\n        parsedAmountB.quotient.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        vReserveRatioBounds,\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then(estimatedGasLimit =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then(response => {\r\n          const cA = currencies[Field.CURRENCY_A]\r\n          const cB = currencies[Field.CURRENCY_B]\r\n          if (!!cA && !!cB) {\r\n            setAttemptingTxn(false)\r\n            addTransactionWithType({\r\n              hash: response.hash,\r\n              type: TRANSACTION_TYPE.ADD_LIQUIDITY,\r\n              summary:\r\n                parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) +\r\n                ' ' +\r\n                cA.symbol +\r\n                ' and ' +\r\n                parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) +\r\n                ' ' +\r\n                cB.symbol,\r\n              arbitrary: {\r\n                poolAddress: pairAddress,\r\n                token_1: cA.symbol,\r\n                token_2: cB.symbol,\r\n                add_liquidity_method: 'token pair',\r\n                amp: new Fraction(amp).divide(JSBI.BigInt(10000)).toSignificant(5),\r\n                txHash: response.hash,\r\n              },\r\n            })\r\n            setTxHash(response.hash)\r\n            const tA = cA.wrapped\r\n            const tB = cB.wrapped\r\n            if (!!tA && !!tB) {\r\n              // In case subgraph sync is slow, doing this will show the pool in \"My Pools\" page.\r\n              addPair(tA, tB)\r\n            }\r\n          }\r\n        }),\r\n      )\r\n      .catch(err => {\r\n        setAttemptingTxn(false)\r\n        const e = new Error('Classic: Add liquidity Error', { cause: err })\r\n        e.name = 'AddLiquidityError'\r\n        captureException(e, { extra: { args } })\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (err?.code !== 4001) {\r\n          console.error(err)\r\n        }\r\n\r\n        if (err.message.includes('INSUFFICIENT')) {\r\n          setAddLiquidityError(t`Insufficient liquidity available. Please reload page and try again!`)\r\n        } else {\r\n          setAddLiquidityError(err?.message)\r\n        }\r\n      })\r\n  }\r\n\r\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    nativeA?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${nativeB?.symbol}`\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n    setAddLiquidityError('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  const realPercentToken0 = pair\r\n    ? pair.reserve0.asFraction\r\n        .divide(pair.virtualReserve0)\r\n        .multiply('100')\r\n        .divide(\r\n          pair.reserve0\r\n            .divide(pair.virtualReserve0)\r\n            .asFraction.add(pair.reserve1.divide(pair.virtualReserve1).asFraction),\r\n        )\r\n    : new Fraction(JSBI.BigInt(50))\r\n\r\n  const realPercentToken1 = new Fraction(JSBI.BigInt(100), JSBI.BigInt(1)).subtract(realPercentToken0 as Fraction)\r\n\r\n  const percentToken0 = realPercentToken0.toSignificant(4)\r\n  const percentToken1 = realPercentToken1.toSignificant(4)\r\n\r\n  const tokens = useMemo(\r\n    () => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]].map(currency => currency?.wrapped),\r\n    [currencies],\r\n  )\r\n\r\n  const usdPrices = useTokensPrice(tokens)\r\n  const marketPrices = useTokensMarketPrice(tokens)\r\n\r\n  const estimatedUsdCurrencyA =\r\n    parsedAmounts[Field.CURRENCY_A] && usdPrices[0]\r\n      ? parseFloat((parsedAmounts[Field.CURRENCY_A] as CurrencyAmount<Currency>).toSignificant(6)) * usdPrices[0]\r\n      : 0\r\n\r\n  const estimatedUsdCurrencyB =\r\n    parsedAmounts[Field.CURRENCY_B] && usdPrices[1]\r\n      ? parseFloat((parsedAmounts[Field.CURRENCY_B] as CurrencyAmount<Currency>).toSignificant(6)) * usdPrices[1]\r\n      : 0\r\n\r\n  const poolPrice = Number(price?.toSignificant(6))\r\n  const marketPrice = marketPrices[1] && marketPrices[0] / marketPrices[1]\r\n\r\n  const showSanityPriceWarning = !!(poolPrice && marketPrice && Math.abs(poolPrice - marketPrice) / marketPrice > 0.05)\r\n  const history = useHistory()\r\n\r\n  const modalHeader = () => {\r\n    return (\r\n      <AutoColumn gap=\"5px\">\r\n        <RowFlat style={{ marginTop: '20px' }}>\r\n          <Text fontSize=\"24px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </Text>\r\n        </RowFlat>\r\n        <Row>\r\n          <Text fontSize=\"24px\">{'DMM ' + nativeA?.symbol + '/' + nativeB?.symbol + ' LP Tokens'}</Text>\r\n        </Row>\r\n        <TYPE.italic fontSize={12} textAlign=\"left\" padding={'8px 0 0 0 '}>\r\n          {t`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </TYPE.italic>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        pair={pair}\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={false}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n        amplification={ampConvertedInBps}\r\n        estimatedUsd={[estimatedUsdCurrencyA, estimatedUsdCurrencyB]}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TransactionConfirmationModal\r\n        isOpen={showConfirm}\r\n        onDismiss={handleDismissConfirmation}\r\n        attemptingTxn={attemptingTxn}\r\n        hash={txHash}\r\n        content={() =>\r\n          addLiquidityError ? (\r\n            <TransactionErrorContent onDismiss={handleDismissConfirmation} message={addLiquidityError} />\r\n          ) : !linkToUnamplifiedPool ? (\r\n            <ConfirmationModalContent\r\n              title={t`You will receive`}\r\n              onDismiss={handleDismissConfirmation}\r\n              topContent={modalHeader}\r\n              bottomContent={modalBottom}\r\n            />\r\n          ) : (\r\n            <ConfirmationModalContent\r\n              title={t`Unamplified Pool existed`}\r\n              onDismiss={handleDismissConfirmation}\r\n              topContent={() => {\r\n                return null\r\n              }}\r\n              bottomContent={() => {\r\n                return (\r\n                  <>\r\n                    Please use the link below if you want to add liquidity to Unamplified Pool\r\n                    <StyledInternalLink\r\n                      onClick={handleDismissConfirmation}\r\n                      id=\"unamplified-pool-link\"\r\n                      to={`/add/${currencyIdA}/${currencyIdB}/${unAmplifiedPairAddress}`}\r\n                    >\r\n                      Go to unamplified pool\r\n                    </StyledInternalLink>\r\n                  </>\r\n                )\r\n              }}\r\n            />\r\n          )\r\n        }\r\n        pendingText={pendingText}\r\n      />\r\n\r\n      <AutoColumn gap=\"20px\">\r\n        <GridColumn>\r\n          <FirstColumn>\r\n            <div>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onFieldAInput}\r\n                onMax={() => {\r\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                }}\r\n                onHalf={() => {\r\n                  onFieldAInput(currencyBalances[Field.CURRENCY_A]?.divide(2).toExact() ?? '')\r\n                }}\r\n                currency={currencies[Field.CURRENCY_A]}\r\n                id=\"add-liquidity-input-tokena\"\r\n                showCommonBases\r\n                positionMax=\"top\"\r\n                estimatedUsd={formattedNum(estimatedUsdCurrencyA.toString(), true) || undefined}\r\n                disableCurrencySelect={!currencyAIsWETH && !currencyAIsETHER}\r\n                isSwitchMode={currencyAIsWETH || currencyAIsETHER}\r\n                onSwitchCurrency={() => {\r\n                  chainId &&\r\n                    history.replace(\r\n                      `/add/${\r\n                        currencyAIsETHER ? WETH[chainId].address : NativeCurrencies[chainId].symbol\r\n                      }/${currencyIdB}/${pairAddress}`,\r\n                    )\r\n                }}\r\n              />\r\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0.5rem\">\r\n                <USDPrice>\r\n                  {usdPrices[0] ? `1 ${nativeA?.symbol} = ${formattedNum(usdPrices[0].toString(), true)}` : <Loader />}\r\n                </USDPrice>\r\n              </Flex>\r\n            </div>\r\n            <div>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onFieldBInput}\r\n                onMax={() => {\r\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                }}\r\n                onHalf={() => {\r\n                  onFieldBInput(currencyBalances[Field.CURRENCY_B]?.divide(2)?.toExact() ?? '')\r\n                }}\r\n                currency={currencies[Field.CURRENCY_B]}\r\n                disableCurrencySelect={true}\r\n                id=\"add-liquidity-input-tokenb\"\r\n                showCommonBases\r\n                positionMax=\"top\"\r\n                estimatedUsd={formattedNum(estimatedUsdCurrencyB.toString(), true) || undefined}\r\n              />\r\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0.5rem\">\r\n                <USDPrice>\r\n                  {usdPrices[1] ? `1 ${nativeB?.symbol} = ${formattedNum(usdPrices[1].toString(), true)}` : <Loader />}\r\n                </USDPrice>\r\n\r\n                {pairAddress && chainId && (currencyBIsWETH || currencyBIsETHER) && (\r\n                  <StyledInternalLink\r\n                    replace\r\n                    to={`/add/${currencyIdA}/${\r\n                      currencyBIsETHER ? WETH[chainId].address : NativeCurrencies[chainId].symbol\r\n                    }/${pairAddress}`}\r\n                  >\r\n                    {currencyBIsETHER ? <Trans>Use Wrapped Token</Trans> : <Trans>Use Native Token</Trans>}\r\n                  </StyledInternalLink>\r\n                )}\r\n              </Flex>\r\n            </div>\r\n\r\n            {currencies[independentField] && currencies[dependentField] && pairState !== PairState.INVALID && (\r\n              <Section padding=\"0\" marginTop=\"8px\" style={{ marginTop: '8px' }}>\r\n                <PoolPriceBar\r\n                  currencies={currencies}\r\n                  poolTokenPercentage={poolTokenPercentage}\r\n                  noLiquidity={noLiquidity}\r\n                  price={price}\r\n                  pair={pair}\r\n                />\r\n              </Section>\r\n            )}\r\n          </FirstColumn>\r\n\r\n          <SecondColumn>\r\n            {currencies[independentField] && currencies[dependentField] && pairState !== PairState.INVALID && (\r\n              <Section borderRadius={'20px'} marginBottom=\"24px\">\r\n                <ToggleComponent title={t`Pool Information`}>\r\n                  <AutoRow padding=\"16px 0\" style={{ borderBottom: `1px dashed ${theme.border}`, gap: '1rem' }}>\r\n                    {!noLiquidity && (\r\n                      <CurrentPriceWrapper>\r\n                        <TYPE.subHeader fontWeight={500} fontSize={12} color={theme.subText}>\r\n                          <UppercaseText>\r\n                            <Trans>Current Price</Trans>\r\n                          </UppercaseText>\r\n                        </TYPE.subHeader>\r\n                        <TYPE.black fontWeight={400} fontSize={14} color={theme.text}>\r\n                          <CurrentPrice price={price} />\r\n                        </TYPE.black>\r\n                      </CurrentPriceWrapper>\r\n                    )}\r\n\r\n                    <PoolRatioWrapper>\r\n                      <TYPE.subHeader fontWeight={500} fontSize={12} color={theme.subText}>\r\n                        <UppercaseText>\r\n                          <Trans>Pool Ratio</Trans>\r\n                        </UppercaseText>\r\n                      </TYPE.subHeader>\r\n                      <TYPE.black fontWeight={400} fontSize={14} color={theme.text}>\r\n                        {percentToken0}% {pair?.token0.symbol} - {percentToken1}% {pair?.token1.symbol}\r\n                      </TYPE.black>\r\n                    </PoolRatioWrapper>\r\n                  </AutoRow>\r\n\r\n                  <AutoRow padding=\"16px 0\" style={{ borderBottom: `1px dashed ${theme.border}`, gap: '1rem' }}>\r\n                    <AutoColumn style={{ flex: '1' }}>\r\n                      <AutoRow>\r\n                        <Text fontWeight={500} fontSize={12} color={theme.subText}>\r\n                          AMP\r\n                        </Text>\r\n                        <QuestionHelper text={AMP_HINT} />\r\n                      </AutoRow>\r\n                      <Text fontWeight={400} fontSize={14} color={theme.text}>\r\n                        {!!pair ? (\r\n                          <>{new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)}</>\r\n                        ) : (\r\n                          ''\r\n                        )}\r\n                      </Text>\r\n                    </AutoColumn>\r\n\r\n                    {(!!pairAddress || +amp >= 1) && (\r\n                      <DynamicFeeRangeWrapper>\r\n                        <AutoRow>\r\n                          <Text fontWeight={500} fontSize={12} color={theme.subText}>\r\n                            <UppercaseText>\r\n                              {isStaticFeePair || !pair ? <Trans>Fee</Trans> : <Trans>Dynamic Fee Range</Trans>}\r\n                            </UppercaseText>\r\n                          </Text>\r\n                          <QuestionHelper\r\n                            text={\r\n                              isStaticFeePair || !pair\r\n                                ? t`Liquidity providers will earn this trading fee for each trade that uses this pool`\r\n                                : t`Fees are adjusted dynamically according to market conditions to maximise returns for liquidity providers`\r\n                            }\r\n                          />\r\n                        </AutoRow>\r\n                        <Text fontWeight={400} fontSize={14} color={theme.text}>\r\n                          {!!pair\r\n                            ? isStaticFeePair && pair?.fee\r\n                              ? +new Fraction(JSBI.BigInt(pair.fee))\r\n                                  .divide(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)))\r\n                                  .toSignificant(6) *\r\n                                  100 +\r\n                                '%'\r\n                              : feeRangeCalc(\r\n                                  !!pair?.amp\r\n                                    ? +new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)\r\n                                    : +amp,\r\n                                )\r\n                            : ''}\r\n                        </Text>\r\n                      </DynamicFeeRangeWrapper>\r\n                    )}\r\n                  </AutoRow>\r\n\r\n                  {currencies[independentField] && currencies[dependentField] && (!!pairAddress || +amp >= 1) && (\r\n                    <div style={{ padding: '16px 0 0' }}>\r\n                      <AutoRow marginBottom=\"8px\">\r\n                        <UppercaseText>\r\n                          <ActiveText>Active Price Range</ActiveText>\r\n                        </UppercaseText>\r\n                        <QuestionHelper\r\n                          text={t`Tradable token pair price range for this pool based on AMP. If the price goes below or above this range, the pool may become inactive`}\r\n                        />\r\n                      </AutoRow>\r\n\r\n                      <PoolPriceRangeBar\r\n                        currencies={currencies}\r\n                        price={price}\r\n                        pair={pair}\r\n                        amplification={ampConvertedInBps}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </ToggleComponent>\r\n              </Section>\r\n            )}\r\n\r\n            {showSanityPriceWarning && (\r\n              <Warning>\r\n                <AlertTriangle color={theme.yellow2} />\r\n                <Text fontSize=\"0.75rem\" marginLeft=\"0.75rem\">\r\n                  <Trans>The price is deviating quite a lot from that market price, please be careful!</Trans>\r\n                </Text>\r\n              </Warning>\r\n            )}\r\n\r\n            {!account ? (\r\n              <ButtonLight onClick={toggleWalletModal}>\r\n                <Trans>Connect Wallet</Trans>\r\n              </ButtonLight>\r\n            ) : (\r\n              <AutoColumn gap={'md'}>\r\n                {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                  approvalA === ApprovalState.PENDING ||\r\n                  approvalB === ApprovalState.NOT_APPROVED ||\r\n                  approvalB === ApprovalState.PENDING) &&\r\n                  isValid && (\r\n                    <RowBetween>\r\n                      {approvalA !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveACallback}\r\n                          disabled={approvalA === ApprovalState.PENDING}\r\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalA === ApprovalState.PENDING ? (\r\n                            <Dots>Approving {nativeA?.symbol}</Dots>\r\n                          ) : (\r\n                            'Approve ' + nativeA?.symbol\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                      {approvalB !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveBCallback}\r\n                          disabled={approvalB === ApprovalState.PENDING}\r\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalB === ApprovalState.PENDING ? (\r\n                            <Dots>Approving {nativeB?.symbol}</Dots>\r\n                          ) : (\r\n                            'Approve ' + nativeB?.symbol\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                    </RowBetween>\r\n                  )}\r\n\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    expertMode ? onAdd() : setShowConfirm(true)\r\n                  }}\r\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                  error={\r\n                    !isValid &&\r\n                    !!parsedAmounts[Field.CURRENCY_A] &&\r\n                    !!parsedAmounts[Field.CURRENCY_B] &&\r\n                    !!(pairAddress && +amp < 1)\r\n                  }\r\n                >\r\n                  <Text fontSize={20} fontWeight={500}>\r\n                    {error ?? (!pairAddress && +amp < 1 ? t`Enter amp (>=1)` : t`Supply`)}\r\n                  </Text>\r\n                </ButtonError>\r\n              </AutoColumn>\r\n            )}\r\n          </SecondColumn>\r\n        </GridColumn>\r\n      </AutoColumn>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TokenPair\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, CurrencyAmount, Fraction, TokenAmount, WETH, computePriceImpact } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport { captureException } from '@sentry/react'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useMemo, useState } from 'react'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from 'components/Button'\r\nimport { AutoColumn } from 'components/Column'\r\nimport { ConfirmAddModalBottom } from 'components/ConfirmAddModalBottom'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport CurrencyLogo from 'components/CurrencyLogo'\r\nimport CurrentPrice from 'components/CurrentPrice'\r\nimport Loader from 'components/Loader'\r\nimport { PoolPriceBar, PoolPriceRangeBar, ToggleComponent } from 'components/PoolPriceBar'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport Row, { AutoRow, RowBetween, RowFlat } from 'components/Row'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport ZapError from 'components/ZapError'\r\nimport FormattedPriceImpact from 'components/swap/FormattedPriceImpact'\r\nimport { AMP_HINT } from 'constants/index'\r\nimport { EVMNetworkInfo } from 'constants/networks/type'\r\nimport { NativeCurrencies } from 'constants/tokens'\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokensMarketPrice from 'hooks/useTokensMarketPrice'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { Dots, Wrapper } from 'pages/Pool/styleds'\r\nimport { useTokensPrice, useWalletModalToggle } from 'state/application/hooks'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedZapInInfo, useMintState, useZapInActionHandlers } from 'state/mint/hooks'\r\nimport { tryParseAmount } from 'state/swap/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useExpertModeManager, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { StyledInternalLink, TYPE, UppercaseText } from 'theme'\r\nimport { calculateGasMargin, formattedNum } from 'utils'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport { feeRangeCalc, useCurrencyConvertedToNative } from 'utils/dmm'\r\nimport { getZapContract } from 'utils/getContract'\r\nimport isZero from 'utils/isZero'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { computePriceImpactWithoutFee, warningSeverity } from 'utils/prices'\r\n\r\nimport {\r\n  ActiveText,\r\n  CurrentPriceWrapper,\r\n  DetailBox,\r\n  DynamicFeeRangeWrapper,\r\n  FirstColumn,\r\n  GridColumn,\r\n  PoolRatioWrapper,\r\n  SecondColumn,\r\n  Section,\r\n  TokenWrapper,\r\n  USDPrice,\r\n  Warning,\r\n} from './styled'\r\n\r\nconst ZapIn = ({\r\n  currencyIdA,\r\n  currencyIdB,\r\n  pairAddress,\r\n}: {\r\n  currencyIdA: string\r\n  currencyIdB: string\r\n  pairAddress: string\r\n}) => {\r\n  const { account, chainId, isEVM, networkInfo } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n  const theme = useTheme()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const toggleWalletModal = useWalletModalToggle() // toggle wallet when disconnected\r\n  const [zapInError, setZapInError] = useState<string>('')\r\n\r\n  const [expertMode] = useExpertModeManager()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    insufficientLiquidity,\r\n    error,\r\n    unAmplifiedPairAddress,\r\n    isStaticFeePair,\r\n    isOldStaticFeeContract,\r\n  } = useDerivedZapInInfo(currencyA ?? undefined, currencyB ?? undefined, pairAddress)\r\n\r\n  const nativeA = useCurrencyConvertedToNative(currencies[Field.CURRENCY_A])\r\n  const nativeB = useCurrencyConvertedToNative(currencies[Field.CURRENCY_B])\r\n\r\n  const independentToken = nativeA && nativeB ? (independentField === Field.CURRENCY_A ? nativeA : nativeB) : undefined\r\n  const dependentToken = nativeA && nativeB ? (independentField === Field.CURRENCY_A ? nativeB : nativeA) : undefined\r\n\r\n  const selectedCurrencyIsETHER = !!(chainId && currencies[independentField] && currencies[independentField]?.isNative)\r\n\r\n  const selectedCurrencyIsWETH = !!(\r\n    chainId &&\r\n    currencies[independentField] &&\r\n    currencies[independentField]?.equals(WETH[chainId])\r\n  )\r\n\r\n  const amp = pair?.amp || JSBI.BigInt(0)\r\n\r\n  const ampConvertedInBps = !!amp.toString()\r\n    ? new Fraction(JSBI.BigInt(parseUnits(amp.toString() || '1', 20)), JSBI.BigInt(parseUnits('1', 16)))\r\n    : undefined\r\n\r\n  const linkToUnamplifiedPool =\r\n    !!ampConvertedInBps &&\r\n    ampConvertedInBps.equalTo(JSBI.BigInt(10000)) &&\r\n    !!unAmplifiedPairAddress &&\r\n    !isZero(unAmplifiedPairAddress)\r\n  const { onFieldInput, onSwitchField } = useZapInActionHandlers()\r\n\r\n  const isValid = !error && !insufficientLiquidity\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const amountToApprove = tryParseAmount(typedValue, currencies[independentField])\r\n\r\n  const [approval, approveCallback] = useApproveCallback(\r\n    amountToApprove,\r\n    isEVM\r\n      ? isStaticFeePair\r\n        ? isOldStaticFeeContract\r\n          ? (networkInfo as EVMNetworkInfo).classic.oldStatic?.zap\r\n          : (networkInfo as EVMNetworkInfo).classic.static.zap\r\n        : (networkInfo as EVMNetworkInfo).classic.dynamic?.zap\r\n      : undefined,\r\n  )\r\n\r\n  const userInCurrencyAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\r\n    return tryParseAmount(typedValue, currencies[independentField]?.wrapped, true)\r\n  }, [currencies, independentField, typedValue])\r\n\r\n  const userIn = useMemo(() => {\r\n    return userInCurrencyAmount ? BigNumber.from(userInCurrencyAmount.quotient.toString()) : undefined\r\n  }, [userInCurrencyAmount])\r\n\r\n  const minLPQty = !liquidityMinted\r\n    ? JSBI.BigInt(0)\r\n    : JSBI.divide(JSBI.multiply(liquidityMinted?.quotient, JSBI.BigInt(10000 - allowedSlippage)), JSBI.BigInt(10000))\r\n\r\n  const addTransactionWithType = useTransactionAdder()\r\n  async function onZapIn() {\r\n    if (!isEVM || !library || !account) return\r\n    const zapContract = getZapContract(chainId, library, account, isStaticFeePair, isOldStaticFeeContract)\r\n\r\n    if (!chainId || !account) {\r\n      return\r\n    }\r\n\r\n    const tokenIn = currencies[independentField]?.wrapped\r\n    const tokenOut = currencies[dependentField]?.wrapped\r\n\r\n    if (!pair || !pair.address || !deadline || !tokenIn || !tokenOut || !userIn) {\r\n      return\r\n    }\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    let estimate,\r\n      method: (...args: any) => Promise<TransactionResponse>,\r\n      args: Array<string | string[] | number>,\r\n      value: BigNumber | null\r\n\r\n    if (!pair) return\r\n\r\n    if (currencies[independentField]?.isNative) {\r\n      estimate = zapContract.estimateGas.zapInEth\r\n      method = zapContract.zapInEth\r\n      args = [tokenOut.address, pair.address, account, minLPQty.toString(), deadline.toHexString()]\r\n      value = userIn\r\n    } else {\r\n      estimate = zapContract.estimateGas.zapIn\r\n      method = zapContract.zapIn\r\n      args = [\r\n        tokenIn.address,\r\n        tokenOut.address,\r\n        userIn.toString(),\r\n        pair.address,\r\n        account,\r\n        minLPQty.toString(),\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n    // All methods of new zap static fee contract include factory address as first arg\r\n    if (isStaticFeePair && !isOldStaticFeeContract) {\r\n      args.unshift((networkInfo as EVMNetworkInfo).classic.static.factory)\r\n    }\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then(estimatedGasLimit =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then(tx => {\r\n          const cA = currencies[Field.CURRENCY_A]\r\n          const cB = currencies[Field.CURRENCY_B]\r\n          if (!!cA && !!cB) {\r\n            setAttemptingTxn(false)\r\n            addTransactionWithType({\r\n              hash: tx.hash,\r\n              type: TRANSACTION_TYPE.ADD_LIQUIDITY,\r\n              summary: userInCurrencyAmount?.toSignificant(6) + ' ' + independentToken?.symbol,\r\n              arbitrary: {\r\n                poolAddress: pairAddress,\r\n                token_1: cA.symbol,\r\n                token_2: cB.symbol,\r\n                add_liquidity_method: 'single token',\r\n                amp: new Fraction(amp).divide(JSBI.BigInt(10000)).toSignificant(5),\r\n                txHash: tx.hash,\r\n              },\r\n            })\r\n            setTxHash(tx.hash)\r\n          }\r\n        }),\r\n      )\r\n      .catch(err => {\r\n        setAttemptingTxn(false)\r\n        const e = new Error('Classic: ZapIn liquidity Error', { cause: err })\r\n        e.name = 'ZapError'\r\n        captureException(e, { extra: { args } })\r\n\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (err?.code !== 4001) {\r\n          console.error(err)\r\n        }\r\n\r\n        if (err.message.includes('INSUFFICIENT_MINT_QTY')) {\r\n          setZapInError(t`Insufficient liquidity available. Please reload page and try again!`)\r\n        } else {\r\n          setZapInError(err?.message)\r\n        }\r\n      })\r\n  }\r\n\r\n  const pendingText = `Supplying ${userInCurrencyAmount?.toSignificant(6)} ${independentToken?.symbol}`\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldInput('')\r\n    }\r\n    setZapInError('')\r\n    setTxHash('')\r\n  }, [onFieldInput, txHash])\r\n\r\n  const realPercentToken0 = pair\r\n    ? pair.reserve0.asFraction\r\n        .divide(pair.virtualReserve0)\r\n        .multiply('100')\r\n        .divide(\r\n          pair.reserve0\r\n            .divide(pair.virtualReserve0)\r\n            .asFraction.add(pair.reserve1.divide(pair.virtualReserve1).asFraction),\r\n        )\r\n    : new Fraction(JSBI.BigInt(50))\r\n\r\n  const realPercentToken1 = new Fraction(JSBI.BigInt(100), JSBI.BigInt(1)).subtract(realPercentToken0 as Fraction)\r\n\r\n  const percentToken0 = realPercentToken0.toSignificant(4)\r\n  const percentToken1 = realPercentToken1.toSignificant(4)\r\n\r\n  const tokens = useMemo(\r\n    () => [currencies[independentField], currencies[dependentField]].map(currency => currency?.wrapped),\r\n    [currencies, dependentField, independentField],\r\n  )\r\n\r\n  const usdPrices = useTokensPrice(tokens)\r\n  const marketPrices = useTokensMarketPrice(tokens)\r\n\r\n  const poolPrice =\r\n    independentField === Field.CURRENCY_A ? Number(price?.toSignificant(6)) : Number(price?.invert().toSignificant(6))\r\n  const marketPrice = marketPrices[1] && marketPrices[0] / marketPrices[1]\r\n\r\n  const showSanityPriceWarning = !!(poolPrice && marketPrice && Math.abs(poolPrice - marketPrice) / marketPrice > 0.05)\r\n\r\n  const handleSwitchCurrency = useCallback(() => {\r\n    onSwitchField()\r\n  }, [onSwitchField])\r\n\r\n  const estimatedUsd =\r\n    userInCurrencyAmount && usdPrices[0] ? parseFloat(userInCurrencyAmount.toSignificant(6)) * usdPrices[0] : 0\r\n\r\n  const tokenAPoolAllocUsd =\r\n    usdPrices[0] &&\r\n    parsedAmounts &&\r\n    parsedAmounts[independentField] &&\r\n    usdPrices[0] * parseFloat((parsedAmounts[independentField] as CurrencyAmount<Currency>).toSignificant(6))\r\n\r\n  const tokenBPoolAllocUsd =\r\n    usdPrices[1] &&\r\n    parsedAmounts &&\r\n    parsedAmounts[dependentField] &&\r\n    usdPrices[1] * parseFloat((parsedAmounts[dependentField] as CurrencyAmount<Currency>).toSignificant(6))\r\n\r\n  const estimatedUsdForPair: [number, number] =\r\n    independentField === Field.CURRENCY_A\r\n      ? [tokenAPoolAllocUsd || 0, tokenBPoolAllocUsd || 0]\r\n      : [tokenBPoolAllocUsd || 0, tokenAPoolAllocUsd || 0]\r\n\r\n  const priceImpact =\r\n    price &&\r\n    userInCurrencyAmount &&\r\n    !!parsedAmounts[independentField] &&\r\n    !!parsedAmounts[dependentField] &&\r\n    !userInCurrencyAmount.lessThan(parsedAmounts[independentField] as CurrencyAmount<Currency>)\r\n      ? computePriceImpact(\r\n          independentField === Field.CURRENCY_A ? price : price.invert(),\r\n          userInCurrencyAmount?.subtract(parsedAmounts[independentField] as CurrencyAmount<Currency>),\r\n          parsedAmounts[dependentField] as CurrencyAmount<Currency>,\r\n        )\r\n      : undefined\r\n\r\n  const priceImpactWithoutFee = pair && priceImpact ? computePriceImpactWithoutFee([pair], priceImpact) : undefined\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  const modalHeader = () => {\r\n    return (\r\n      <AutoColumn gap=\"5px\">\r\n        <RowFlat style={{ marginTop: '20px' }}>\r\n          <Text fontSize=\"24px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </Text>\r\n        </RowFlat>\r\n        <Row>\r\n          <Text fontSize=\"24px\">{'DMM ' + nativeA?.symbol + '/' + nativeB?.symbol + ' LP Tokens'}</Text>\r\n        </Row>\r\n        <TYPE.italic fontSize={12} textAlign=\"left\" padding={'8px 0 0 0 '}>\r\n          {t`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </TYPE.italic>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        pair={pair}\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={false}\r\n        onAdd={onZapIn}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n        amplification={ampConvertedInBps}\r\n        priceImpact={priceImpactWithoutFee}\r\n        estimatedUsd={estimatedUsdForPair}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TransactionConfirmationModal\r\n        isOpen={showConfirm}\r\n        onDismiss={handleDismissConfirmation}\r\n        attemptingTxn={attemptingTxn}\r\n        hash={txHash}\r\n        content={() =>\r\n          zapInError ? (\r\n            <TransactionErrorContent onDismiss={handleDismissConfirmation} message={zapInError} />\r\n          ) : !linkToUnamplifiedPool ? (\r\n            <ConfirmationModalContent\r\n              title={t`You will receive`}\r\n              onDismiss={handleDismissConfirmation}\r\n              topContent={modalHeader}\r\n              bottomContent={modalBottom}\r\n            />\r\n          ) : (\r\n            <ConfirmationModalContent\r\n              title={t`Unamplified Pool existed`}\r\n              onDismiss={handleDismissConfirmation}\r\n              topContent={() => {\r\n                return null\r\n              }}\r\n              bottomContent={() => {\r\n                return (\r\n                  <>\r\n                    Please use the link below if you want to add liquidity to Unamplified Pool\r\n                    <StyledInternalLink\r\n                      onClick={handleDismissConfirmation}\r\n                      id=\"unamplified-pool-link\"\r\n                      to={`/add/${currencyIdA}/${currencyIdB}/${unAmplifiedPairAddress}`}\r\n                    >\r\n                      Go to unamplified pool\r\n                    </StyledInternalLink>\r\n                  </>\r\n                )\r\n              }}\r\n            />\r\n          )\r\n        }\r\n        pendingText={pendingText}\r\n      />\r\n\r\n      <AutoColumn gap=\"20px\">\r\n        <GridColumn>\r\n          <FirstColumn>\r\n            <div>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[independentField]}\r\n                onUserInput={onFieldInput}\r\n                onMax={() => {\r\n                  onFieldInput(maxAmounts[independentField]?.toExact() ?? '')\r\n                }}\r\n                onHalf={() => {\r\n                  onFieldInput(currencyBalances[independentField]?.divide(2)?.toExact() ?? '')\r\n                }}\r\n                onSwitchCurrency={handleSwitchCurrency}\r\n                currency={currencies[independentField]}\r\n                id=\"zap-in-input\"\r\n                disableCurrencySelect={false}\r\n                showCommonBases\r\n                positionMax=\"top\"\r\n                isSwitchMode\r\n                estimatedUsd={formattedNum(estimatedUsd.toString(), true) || undefined}\r\n              />\r\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0.5rem\">\r\n                <USDPrice>\r\n                  {usdPrices[0] ? (\r\n                    `1 ${independentToken?.symbol} = ${formattedNum(usdPrices[0].toString(), true)}`\r\n                  ) : (\r\n                    <Loader />\r\n                  )}\r\n                </USDPrice>\r\n\r\n                {pairAddress &&\r\n                  chainId &&\r\n                  (selectedCurrencyIsETHER || selectedCurrencyIsWETH) &&\r\n                  currencies[dependentField] && (\r\n                    <StyledInternalLink\r\n                      replace\r\n                      to={\r\n                        independentField === Field.CURRENCY_A\r\n                          ? `/add/${\r\n                              selectedCurrencyIsETHER\r\n                                ? currencyId(WETH[chainId], chainId)\r\n                                : currencyId(NativeCurrencies[chainId], chainId)\r\n                            }/${currencyId(currencies[dependentField] as Currency, chainId)}/${pairAddress}`\r\n                          : `/add/${currencyId(currencies[dependentField] as Currency, chainId)}/${\r\n                              selectedCurrencyIsETHER\r\n                                ? currencyId(WETH[chainId], chainId)\r\n                                : NativeCurrencies[chainId].symbol\r\n                            }/${pairAddress}`\r\n                      }\r\n                    >\r\n                      {selectedCurrencyIsETHER ? <Trans>Use Wrapped Token</Trans> : <Trans>Use Native Token</Trans>}\r\n                    </StyledInternalLink>\r\n                  )}\r\n              </Flex>\r\n            </div>\r\n\r\n            <Section padding=\"0\" marginTop=\"8px\" borderRadius={'20px'}>\r\n              <Row padding=\"0 0 1rem 0\">\r\n                <TYPE.subHeader fontWeight={500} fontSize={16} color={theme.text}>\r\n                  <Trans>Your Pool Allocation</Trans>\r\n                </TYPE.subHeader>\r\n              </Row>\r\n\r\n              <DetailBox\r\n                style={{\r\n                  padding: '16px 0',\r\n                  borderTop: `1px dashed ${theme.border}`,\r\n                  borderBottom: `1px dashed ${theme.border}`,\r\n                }}\r\n              >\r\n                <AutoColumn justify=\"space-between\" gap=\"4px\">\r\n                  <TokenWrapper>\r\n                    <CurrencyLogo currency={currencies[independentField] || undefined} size={'16px'} />\r\n                    <TYPE.subHeader fontWeight={400} fontSize={14} color={theme.subText}>\r\n                      {independentToken?.symbol}\r\n                    </TYPE.subHeader>\r\n                  </TokenWrapper>\r\n                  <TYPE.black fontWeight={400} fontSize={14}>\r\n                    {parsedAmounts[independentField]?.toSignificant(6)} (~\r\n                    {formattedNum((tokenAPoolAllocUsd || 0).toString(), true)})\r\n                  </TYPE.black>\r\n                </AutoColumn>\r\n\r\n                <AutoColumn justify=\"space-between\" gap=\"4px\">\r\n                  <TokenWrapper>\r\n                    <CurrencyLogo currency={currencies[dependentField] || undefined} size={'16px'} />\r\n                    <TYPE.subHeader fontWeight={400} fontSize={14} color={theme.subText}>\r\n                      {dependentToken?.symbol}\r\n                    </TYPE.subHeader>\r\n                  </TokenWrapper>\r\n                  <TYPE.black fontWeight={400} fontSize={14}>\r\n                    {parsedAmounts[dependentField]?.toSignificant(6)} (~\r\n                    {formattedNum((tokenBPoolAllocUsd || 0).toString(), true)})\r\n                  </TYPE.black>\r\n                </AutoColumn>\r\n              </DetailBox>\r\n\r\n              <DetailBox style={{ paddingTop: '16px' }}>\r\n                <TYPE.subHeader fontWeight={400} fontSize={14} color={theme.subText}>\r\n                  <Trans>Price Impact</Trans>\r\n                </TYPE.subHeader>\r\n                <TYPE.black fontWeight={400} fontSize={14}>\r\n                  <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n                </TYPE.black>\r\n              </DetailBox>\r\n\r\n              {/* <AutoRow justify=\"space-between\" gap=\"4px\" style={{ paddingBottom: '12px' }}>\r\n                <TYPE.subHeader fontWeight={400} fontSize={14} color={theme.subText}>\r\n                  <Trans>Est. received</Trans>:\r\n                </TYPE.subHeader>\r\n                <TYPE.black fontWeight={400} fontSize={14}>\r\n                  {liquidityMinted?.toSignificant(6)} LP (~\r\n                  {tokenAPoolAllocUsd &&\r\n                    tokenBPoolAllocUsd &&\r\n                    formattedNum((tokenAPoolAllocUsd + tokenBPoolAllocUsd).toString(), true)}\r\n                  )\r\n                </TYPE.black>\r\n              </AutoRow> */}\r\n            </Section>\r\n\r\n            {currencies[independentField] && currencies[dependentField] && pairState !== PairState.INVALID && (\r\n              <Section padding=\"0\" borderRadius={'20px'} style={{ marginTop: '8px' }}>\r\n                <PoolPriceBar\r\n                  currencies={currencies}\r\n                  poolTokenPercentage={poolTokenPercentage}\r\n                  noLiquidity={noLiquidity}\r\n                  price={price}\r\n                  pair={pair}\r\n                />\r\n              </Section>\r\n            )}\r\n          </FirstColumn>\r\n\r\n          <SecondColumn>\r\n            {currencies[independentField] && currencies[dependentField] && pairState !== PairState.INVALID && (\r\n              <Section borderRadius={'20px'} marginBottom=\"28px\">\r\n                <ToggleComponent title={t`Pool Information`}>\r\n                  <AutoRow padding=\"16px 0\" style={{ borderBottom: `1px dashed ${theme.border}`, gap: '1rem' }}>\r\n                    {!noLiquidity && (\r\n                      <CurrentPriceWrapper>\r\n                        <TYPE.subHeader fontWeight={500} fontSize={12} color={theme.subText}>\r\n                          <UppercaseText>\r\n                            <Trans>Current Price</Trans>\r\n                          </UppercaseText>\r\n                        </TYPE.subHeader>\r\n                        <TYPE.black fontWeight={400} fontSize={14} color={theme.text}>\r\n                          <CurrentPrice price={price} />\r\n                        </TYPE.black>\r\n                      </CurrentPriceWrapper>\r\n                    )}\r\n\r\n                    <PoolRatioWrapper>\r\n                      <TYPE.subHeader fontWeight={500} fontSize={12} color={theme.subText}>\r\n                        <UppercaseText>\r\n                          <Trans>Pool Ratio</Trans>\r\n                        </UppercaseText>\r\n                      </TYPE.subHeader>\r\n                      <TYPE.black fontWeight={400} fontSize={14} color={theme.text}>\r\n                        {percentToken0}% {pair?.token0.symbol} - {percentToken1}% {pair?.token1.symbol}\r\n                      </TYPE.black>\r\n                    </PoolRatioWrapper>\r\n                  </AutoRow>\r\n\r\n                  <AutoRow padding=\"16px 0\" style={{ borderBottom: `1px dashed ${theme.border}`, gap: '1rem' }}>\r\n                    <AutoColumn style={{ flex: '1' }}>\r\n                      <AutoRow>\r\n                        <Text fontWeight={500} fontSize={12} color={theme.subText}>\r\n                          AMP\r\n                        </Text>\r\n                        <QuestionHelper text={AMP_HINT} />\r\n                      </AutoRow>\r\n                      <Text fontWeight={400} fontSize={14} color={theme.text}>\r\n                        {!!pair ? (\r\n                          <>{new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)}</>\r\n                        ) : (\r\n                          ''\r\n                        )}\r\n                      </Text>\r\n                    </AutoColumn>\r\n\r\n                    {(!!pairAddress || +amp >= 1) && (\r\n                      <DynamicFeeRangeWrapper>\r\n                        <AutoRow>\r\n                          <Text fontWeight={500} fontSize={12} color={theme.subText}>\r\n                            <UppercaseText>\r\n                              {isStaticFeePair || !pair ? <Trans>Fee</Trans> : <Trans>Dynamic Fee Range</Trans>}\r\n                            </UppercaseText>\r\n                          </Text>\r\n                          <QuestionHelper\r\n                            text={\r\n                              isStaticFeePair || !pair\r\n                                ? t`Liquidity providers will earn this trading fee for each trade that uses this pool`\r\n                                : t`Fees are adjusted dynamically according to market conditions to maximise returns for liquidity providers`\r\n                            }\r\n                          />\r\n                        </AutoRow>\r\n                        <Text fontWeight={400} fontSize={14} color={theme.text}>\r\n                          {!!pair\r\n                            ? isStaticFeePair && pair?.fee\r\n                              ? +new Fraction(JSBI.BigInt(pair.fee))\r\n                                  .divide(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)))\r\n                                  .toSignificant(6) *\r\n                                  100 +\r\n                                '%'\r\n                              : feeRangeCalc(\r\n                                  !!pair?.amp\r\n                                    ? +new Fraction(JSBI.BigInt(pair.amp)).divide(JSBI.BigInt(10000)).toSignificant(5)\r\n                                    : +amp,\r\n                                )\r\n                            : ''}\r\n                        </Text>\r\n                      </DynamicFeeRangeWrapper>\r\n                    )}\r\n                  </AutoRow>\r\n\r\n                  {currencies[independentField] && currencies[dependentField] && (!!pairAddress || +amp >= 1) && (\r\n                    <div style={{ padding: '16px 0 0' }}>\r\n                      <AutoRow marginBottom=\"8px\">\r\n                        <UppercaseText>\r\n                          <ActiveText>Active Price Range</ActiveText>\r\n                        </UppercaseText>\r\n                        <QuestionHelper\r\n                          text={t`Tradable token pair price range for this pool based on AMP. If the price goes below or above this range, the pool may become inactive`}\r\n                        />\r\n                      </AutoRow>\r\n\r\n                      <PoolPriceRangeBar\r\n                        currencies={currencies}\r\n                        price={price}\r\n                        pair={pair}\r\n                        amplification={ampConvertedInBps}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </ToggleComponent>\r\n              </Section>\r\n            )}\r\n\r\n            {showSanityPriceWarning && (\r\n              <Warning>\r\n                <AlertTriangle color={theme.yellow2} />\r\n                <Text fontSize=\"0.75rem\" marginLeft=\"0.75rem\">\r\n                  <Trans>The price is deviating quite a lot from that market price, please be careful!</Trans>\r\n                </Text>\r\n              </Warning>\r\n            )}\r\n\r\n            {insufficientLiquidity ? (\r\n              <ZapError message={t`Insufficient Liquidity in the Liquidity Pool to Swap`} warning={false} />\r\n            ) : priceImpactSeverity > 3 ? (\r\n              <ZapError message={t`Price impact is too high`} warning={false} />\r\n            ) : priceImpactSeverity > 2 ? (\r\n              <ZapError message={t`Price impact is high`} warning={true} />\r\n            ) : null}\r\n\r\n            {!account ? (\r\n              <ButtonLight onClick={toggleWalletModal}>\r\n                <Trans>Connect Wallet</Trans>\r\n              </ButtonLight>\r\n            ) : (\r\n              <AutoColumn gap={'md'}>\r\n                {(approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING) &&\r\n                  isValid &&\r\n                  (expertMode || priceImpactSeverity <= 3) && (\r\n                    <RowBetween>\r\n                      <ButtonPrimary\r\n                        onClick={approveCallback}\r\n                        disabled={\r\n                          !isValid || approval === ApprovalState.PENDING || (priceImpactSeverity > 3 && !expertMode)\r\n                        }\r\n                        width={'100%'}\r\n                      >\r\n                        {approval === ApprovalState.PENDING ? (\r\n                          <Dots>Approving {independentToken?.symbol}</Dots>\r\n                        ) : (\r\n                          'Approve ' + independentToken?.symbol\r\n                        )}\r\n                      </ButtonPrimary>\r\n                    </RowBetween>\r\n                  )}\r\n\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    expertMode ? onZapIn() : setShowConfirm(true)\r\n                  }}\r\n                  disabled={!isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !expertMode)}\r\n                  error={\r\n                    !!parsedAmounts[independentField] &&\r\n                    !!parsedAmounts[dependentField] &&\r\n                    !!pairAddress &&\r\n                    (!isValid || priceImpactSeverity > 2)\r\n                  }\r\n                >\r\n                  <Text fontSize={20} fontWeight={500}>\r\n                    {error ??\r\n                      (!pairAddress && +amp < 1\r\n                        ? t`Enter amp (>=1)`\r\n                        : priceImpactSeverity > 3 && !expertMode\r\n                        ? t`Supply`\r\n                        : priceImpactSeverity > 2\r\n                        ? t`Supply Anyway`\r\n                        : t`Supply`)}\r\n                  </Text>\r\n                </ButtonError>\r\n              </AutoColumn>\r\n            )}\r\n          </SecondColumn>\r\n        </GridColumn>\r\n      </AutoColumn>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default ZapIn\r\n","import { Fraction, WETH } from '@kyberswap/ks-sdk-core'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport JSBI from 'jsbi'\r\nimport { useEffect, useState } from 'react'\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\r\n\r\nimport LiquidityProviderMode from 'components/LiquidityProviderMode'\r\nimport { AddRemoveTabs, LiquidityAction } from 'components/NavigationTabs'\r\nimport { MinimalPositionCard } from 'components/PositionCard'\r\nimport { TutorialType } from 'components/Tutorial'\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport useMixpanel, { MIXPANEL_TYPE } from 'hooks/useMixpanel'\r\nimport { useDerivedMintInfo } from 'state/mint/hooks'\r\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\r\n\r\nimport TokenPair from './TokenPair'\r\nimport ZapIn from './ZapIn'\r\nimport { Container, LiquidityProviderModeWrapper, PageWrapper, PoolName, TopBar } from './styled'\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB, pairAddress },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string; pairAddress: string }>) {\r\n  const { chainId, isEVM } = useActiveWeb3React()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const nativeA = useCurrencyConvertedToNative(currencyA || undefined)\r\n  const nativeB = useCurrencyConvertedToNative(currencyB || undefined)\r\n\r\n  const currencyAIsWETH = !!(chainId && currencyA && currencyA.equals(WETH[chainId]))\r\n  const currencyBIsWETH = !!(chainId && currencyB && currencyB.equals(WETH[chainId]))\r\n\r\n  const oneCurrencyIsWETH = currencyBIsWETH || currencyAIsWETH\r\n\r\n  const { pair, pairState, noLiquidity } = useDerivedMintInfo(\r\n    currencyA ?? undefined,\r\n    currencyB ?? undefined,\r\n    pairAddress,\r\n  )\r\n  const amp = pair?.amp || JSBI.BigInt(0)\r\n  const [activeTab, setActiveTab] = useState(0)\r\n\r\n  const { mixpanelHandler } = useMixpanel()\r\n  useEffect(() => {\r\n    mixpanelHandler(MIXPANEL_TYPE.ADD_LIQUIDITY_INITIATED, {\r\n      token_1: nativeA?.symbol,\r\n      token_2: nativeB?.symbol,\r\n      amp: new Fraction(amp).divide(JSBI.BigInt(10000)).toSignificant(5),\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  if (!isEVM) return <Redirect to=\"/\" />\r\n  return (\r\n    <>\r\n      <PageWrapper>\r\n        <Container>\r\n          <AddRemoveTabs action={LiquidityAction.ADD} tutorialType={TutorialType.CLASSIC_ADD_LIQUIDITY} />\r\n\r\n          <TopBar>\r\n            <LiquidityProviderModeWrapper>\r\n              <LiquidityProviderMode\r\n                activeTab={activeTab}\r\n                setActiveTab={setActiveTab}\r\n                singleTokenInfo={t`Add liquidity to the pool by supplying a single token (either token from the token pair). We will automatically create LP tokens for you and add them to the liquidity pool - all in a single transaction`}\r\n              />\r\n            </LiquidityProviderModeWrapper>\r\n            <PoolName>\r\n              {nativeA?.symbol} - {nativeB?.symbol} <Trans>pool</Trans>\r\n            </PoolName>\r\n          </TopBar>\r\n\r\n          {activeTab === 0 ? (\r\n            <TokenPair currencyIdA={currencyIdA} currencyIdB={currencyIdB} pairAddress={pairAddress} />\r\n          ) : (\r\n            <ZapIn currencyIdA={currencyIdA} currencyIdB={currencyIdB} pairAddress={pairAddress} />\r\n          )}\r\n        </Container>\r\n\r\n        {pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n          <Container style={{ marginTop: '24px', padding: '0' }}>\r\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n          </Container>\r\n        ) : null}\r\n      </PageWrapper>\r\n    </>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { AutoColumn } from 'components/Column'\r\n\r\nexport const Container = styled.div`\r\n  text-align: center;\r\n  width: calc(100% - 24px);\r\n  margin: 24px auto 12px;\r\n  max-width: 936px;\r\n  border-radius: 20px;\r\n  background: ${({ theme }) => theme.background};\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n\r\n  padding: 0 20px 28px;\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToSmall`\r\n    padding: 0 16px 24px;\r\n  `};\r\n`\r\n\r\nexport const GridColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n`\r\n\r\nexport const FirstColumn = styled(AutoColumn)`\r\n  grid-auto-rows: min-content;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.border};\r\n  gap: 20px;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding-right: 24px;\r\n    padding-bottom: 0;\r\n    border-right: 1px solid ${({ theme }) => theme.border};\r\n    border-bottom: none;\r\n  }\r\n`\r\n\r\nexport const SecondColumn = styled(AutoColumn)`\r\n  grid-auto-rows: min-content;\r\n  padding-top: 24px;\r\n  gap: 20px;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding-left: 24px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n","import { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, CurrencyAmount, Percent, WETH } from '@kyberswap/ks-sdk-core'\r\nimport { FeeAmount, NonfungiblePositionManager } from '@kyberswap/ks-sdk-elastic'\r\nimport { Trans, t } from '@lingui/macro'\r\nimport { BigNumber } from 'ethers'\r\nimport JSBI from 'jsbi'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\r\nimport { Flex, Text } from 'rebass'\r\n\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from 'components/Button'\r\nimport { AutoColumn } from 'components/Column'\r\nimport Copy from 'components/Copy'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport Divider from 'components/Divider'\r\nimport Loader from 'components/Loader'\r\nimport { AddRemoveTabs, LiquidityAction } from 'components/NavigationTabs'\r\nimport ProAmmPoolInfo from 'components/ProAmm/ProAmmPoolInfo'\r\nimport ProAmmPooledTokens from 'components/ProAmm/ProAmmPooledTokens'\r\nimport ProAmmPriceRange from 'components/ProAmm/ProAmmPriceRange'\r\nimport { RowBetween } from 'components/Row'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\r\nimport { TutorialType } from 'components/Tutorial'\r\nimport { Dots } from 'components/swap/styleds'\r\nimport { EVMNetworkInfo } from 'constants/networks/type'\r\nimport { NativeCurrencies } from 'constants/tokens'\r\nimport { VERSION } from 'constants/v2'\r\nimport { useActiveWeb3React, useWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport { useProAmmNFTPositionManagerContract } from 'hooks/useContract'\r\nimport usePrevious from 'hooks/usePrevious'\r\nimport { useProAmmDerivedPositionInfo } from 'hooks/useProAmmDerivedPositionInfo'\r\nimport { useProAmmPositionsFromTokenId } from 'hooks/useProAmmPositions'\r\nimport useProAmmPreviousTicks from 'hooks/useProAmmPreviousTicks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { useTokensPrice, useWalletModalToggle } from 'state/application/hooks'\r\nimport { Field } from 'state/mint/proamm/actions'\r\nimport { useProAmmDerivedMintInfo, useProAmmMintActionHandlers, useProAmmMintState } from 'state/mint/proamm/hooks'\r\nimport { useSingleCallResult } from 'state/multicall/hooks'\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { TRANSACTION_TYPE } from 'state/transactions/type'\r\nimport { useExpertModeManager, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { calculateGasMargin, formattedNum, isAddressString, shortenAddress } from 'utils'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { unwrappedToken } from 'utils/wrappedCurrency'\r\n\r\nimport { Container, FirstColumn, GridColumn, SecondColumn } from './styled'\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB, feeAmount: feeAmountFromUrl, tokenId },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string; feeAmount?: string; tokenId?: string }>) {\r\n  const { account, chainId, isEVM, networkInfo } = useActiveWeb3React()\r\n  const { library } = useWeb3React()\r\n  const theme = useTheme()\r\n  const toggleWalletModal = useWalletModalToggle() // toggle wallet when disconnected\r\n  const [expertMode] = useExpertModeManager()\r\n  const addTransactionWithType = useTransactionAdder()\r\n\r\n  const prevChainId = usePrevious(chainId)\r\n\r\n  useEffect(() => {\r\n    if (!!chainId && !!prevChainId && chainId !== prevChainId) {\r\n      history.push('/myPools')\r\n    }\r\n  }, [chainId, prevChainId, history])\r\n\r\n  const positionManager = useProAmmNFTPositionManagerContract()\r\n\r\n  // check for existing position if tokenId in url\r\n  const { position: existingPositionDetails } = useProAmmPositionsFromTokenId(\r\n    tokenId ? BigNumber.from(tokenId) : undefined,\r\n  )\r\n\r\n  const owner = useSingleCallResult(!!tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\r\n  const ownsNFT = owner === account || existingPositionDetails?.operator === account\r\n  const ownByFarm = isEVM\r\n    ? (networkInfo as EVMNetworkInfo).elastic.farms.flat().includes(isAddressString(chainId, owner))\r\n    : false\r\n\r\n  const { position: existingPosition } = useProAmmDerivedPositionInfo(existingPositionDetails)\r\n\r\n  // fee selection from url\r\n  const feeAmount: FeeAmount | undefined =\r\n    feeAmountFromUrl && Object.values(FeeAmount).includes(parseFloat(feeAmountFromUrl))\r\n      ? parseFloat(feeAmountFromUrl)\r\n      : undefined\r\n  const baseCurrency = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n  // prevent an error if they input ETH/WETH\r\n  const quoteCurrency =\r\n    baseCurrency && currencyB && baseCurrency.wrapped.equals(currencyB.wrapped) ? undefined : currencyB\r\n  // mint state\r\n  const { independentField, typedValue } = useProAmmMintState()\r\n  const {\r\n    pool,\r\n    // ticks,\r\n    dependentField,\r\n    parsedAmounts,\r\n    currencyBalances,\r\n    position,\r\n    noLiquidity,\r\n    currencies,\r\n    errorMessage,\r\n    // invalidPool,\r\n    invalidRange,\r\n    // outOfRange,\r\n    depositADisabled,\r\n    depositBDisabled,\r\n    ticksAtLimit,\r\n  } = useProAmmDerivedMintInfo(\r\n    baseCurrency ?? undefined,\r\n    quoteCurrency ?? undefined,\r\n    feeAmount,\r\n    baseCurrency ?? undefined,\r\n    existingPosition,\r\n  )\r\n  const baseCurrencyIsETHER = !!(chainId && baseCurrency && baseCurrency.isNative)\r\n  const baseCurrencyIsWETH = !!(chainId && baseCurrency && baseCurrency.equals(WETH[chainId]))\r\n  const quoteCurrencyIsETHER = !!(chainId && quoteCurrency && quoteCurrency.isNative)\r\n  const quoteCurrencyIsWETH = !!(chainId && quoteCurrency && quoteCurrency.equals(WETH[chainId]))\r\n\r\n  const usdPrices = useTokensPrice([baseCurrency?.wrapped, quoteCurrency?.wrapped], VERSION.ELASTIC)\r\n\r\n  const estimatedUsdCurrencyA =\r\n    parsedAmounts[Field.CURRENCY_A] && usdPrices[0]\r\n      ? parseFloat((parsedAmounts[Field.CURRENCY_A] as CurrencyAmount<Currency>).toSignificant(6)) * usdPrices[0]\r\n      : 0\r\n\r\n  const estimatedUsdCurrencyB =\r\n    parsedAmounts[Field.CURRENCY_B] && usdPrices[1]\r\n      ? parseFloat((parsedAmounts[Field.CURRENCY_B] as CurrencyAmount<Currency>).toSignificant(6)) * usdPrices[1]\r\n      : 0\r\n\r\n  const previousTicks =\r\n    // : number[] = []\r\n    useProAmmPreviousTicks(pool, position)\r\n  const { onFieldAInput, onFieldBInput } = useProAmmMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !errorMessage && !invalidRange\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(\r\n    parsedAmounts[Field.CURRENCY_A],\r\n    (networkInfo as EVMNetworkInfo).elastic.nonfungiblePositionManager,\r\n  )\r\n  const [approvalB, approveBCallback] = useApproveCallback(\r\n    parsedAmounts[Field.CURRENCY_B],\r\n    (networkInfo as EVMNetworkInfo).elastic.nonfungiblePositionManager,\r\n  )\r\n\r\n  const allowedSlippage = useUserSlippageTolerance()\r\n\r\n  //TODO: on add\r\n  async function onAdd() {\r\n    if (!isEVM || !library || !account || !tokenId) {\r\n      return\r\n    }\r\n\r\n    if (!positionManager || !baseCurrency || !quoteCurrency) {\r\n      return\r\n    }\r\n\r\n    if (!previousTicks || previousTicks.length !== 2) {\r\n      return\r\n    }\r\n\r\n    if (position && account && deadline) {\r\n      const useNative = baseCurrency.isNative ? baseCurrency : quoteCurrency.isNative ? quoteCurrency : undefined\r\n\r\n      const { calldata, value } = NonfungiblePositionManager.addCallParameters(position, previousTicks, {\r\n        slippageTolerance: new Percent(allowedSlippage[0], 10000),\r\n        deadline: deadline.toString(),\r\n        useNative,\r\n        tokenId: JSBI.BigInt(tokenId),\r\n      })\r\n\r\n      //0.00283161\r\n      const txn: { to: string; data: string; value: string } = {\r\n        to: (networkInfo as EVMNetworkInfo).elastic.nonfungiblePositionManager,\r\n        data: calldata,\r\n        value,\r\n      }\r\n\r\n      setAttemptingTxn(true)\r\n      library\r\n        .getSigner()\r\n        .estimateGas(txn)\r\n        .then((estimate: BigNumber) => {\r\n          const newTxn = {\r\n            ...txn,\r\n            gasLimit: calculateGasMargin(estimate),\r\n          }\r\n\r\n          return library\r\n            .getSigner()\r\n            .sendTransaction(newTxn)\r\n            .then((response: TransactionResponse) => {\r\n              setAttemptingTxn(false)\r\n              addTransactionWithType({\r\n                hash: response.hash,\r\n                type: TRANSACTION_TYPE.INCREASE_LIQUIDITY,\r\n                summary:\r\n                  (parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) || 0) +\r\n                  ' ' +\r\n                  baseCurrency?.symbol +\r\n                  ' and ' +\r\n                  (parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) || 0) +\r\n                  ' ' +\r\n                  quoteCurrency?.symbol,\r\n                //  ' with fee ' +  position.pool.fee / 100 + '%' +\r\n                // (tokenId ? ' Token ID: (' + tokenId + ')' : ''),\r\n                arbitrary: {\r\n                  token_1: baseCurrency?.symbol,\r\n                  token_2: quoteCurrency?.symbol,\r\n                },\r\n              })\r\n              setTxHash(response.hash)\r\n            })\r\n        })\r\n        .catch((error: any) => {\r\n          console.error('Failed to send transaction', error)\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          if (error?.code !== 4001) {\r\n            console.error(error)\r\n          }\r\n        })\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n      // dont jump to pool page if creating\r\n      history.push('/myPools')\r\n    }\r\n    setTxHash('')\r\n  }, [history, onFieldAInput, txHash])\r\n\r\n  const addIsUnsupported = false\r\n\r\n  // get value and prices at ticks\r\n  // const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\r\n  // we need an existence check on parsed amounts for single-asset deposits\r\n  const showApprovalA = approvalA !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_A]\r\n  const showApprovalB = approvalB !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_B]\r\n\r\n  const pendingText = `Supplying ${!depositADisabled ? parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) : ''} ${\r\n    !depositADisabled ? currencies[Field.CURRENCY_A]?.symbol : ''\r\n  } ${!depositADisabled && !depositBDisabled ? 'and' : ''} ${\r\n    !depositBDisabled ? parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) : ''\r\n  } ${!depositBDisabled ? currencies[Field.CURRENCY_B]?.symbol : ''}`\r\n\r\n  const Buttons = () =>\r\n    addIsUnsupported ? (\r\n      <ButtonPrimary disabled={true}>\r\n        <Trans>Unsupported Asset</Trans>\r\n      </ButtonPrimary>\r\n    ) : !account ? (\r\n      <ButtonLight onClick={toggleWalletModal}>\r\n        <Trans>Connect Wallet</Trans>\r\n      </ButtonLight>\r\n    ) : (\r\n      <Flex sx={{ gap: '16px' }} flexDirection={isValid && showApprovalA && showApprovalB ? 'column' : 'row'}>\r\n        {(approvalA === ApprovalState.NOT_APPROVED ||\r\n          approvalA === ApprovalState.PENDING ||\r\n          approvalB === ApprovalState.NOT_APPROVED ||\r\n          approvalB === ApprovalState.PENDING) &&\r\n          isValid && (\r\n            <RowBetween>\r\n              {showApprovalA && (\r\n                <ButtonPrimary\r\n                  onClick={approveACallback}\r\n                  disabled={approvalA === ApprovalState.PENDING}\r\n                  width={showApprovalB ? '48%' : '100%'}\r\n                >\r\n                  {approvalA === ApprovalState.PENDING ? (\r\n                    <Dots>\r\n                      <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\r\n                    </Dots>\r\n                  ) : (\r\n                    <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\r\n                  )}\r\n                </ButtonPrimary>\r\n              )}\r\n              {showApprovalB && (\r\n                <ButtonPrimary\r\n                  onClick={approveBCallback}\r\n                  disabled={approvalB === ApprovalState.PENDING}\r\n                  width={showApprovalA ? '48%' : '100%'}\r\n                >\r\n                  {approvalB === ApprovalState.PENDING ? (\r\n                    <Dots>\r\n                      <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\r\n                    </Dots>\r\n                  ) : (\r\n                    <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\r\n                  )}\r\n                </ButtonPrimary>\r\n              )}\r\n            </RowBetween>\r\n          )}\r\n        <ButtonError\r\n          onClick={() => {\r\n            expertMode ? onAdd() : setShowConfirm(true)\r\n          }}\r\n          disabled={\r\n            !isValid ||\r\n            (approvalA !== ApprovalState.APPROVED && !depositADisabled) ||\r\n            (approvalB !== ApprovalState.APPROVED && !depositBDisabled)\r\n          }\r\n          error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B] && false}\r\n        >\r\n          <Text fontWeight={500}>{errorMessage ? errorMessage : <Trans>Preview</Trans>}</Text>\r\n        </ButtonError>\r\n      </Flex>\r\n    )\r\n\r\n  if (!isEVM) return <Redirect to=\"/\" />\r\n  return (\r\n    <>\r\n      <TransactionConfirmationModal\r\n        isOpen={showConfirm}\r\n        onDismiss={handleDismissConfirmation}\r\n        attemptingTxn={attemptingTxn}\r\n        hash={txHash}\r\n        content={() => (\r\n          <ConfirmationModalContent\r\n            title={t`Increase Liquidity`}\r\n            onDismiss={handleDismissConfirmation}\r\n            topContent={() =>\r\n              existingPosition && (\r\n                <div style={{ marginTop: '1rem' }}>\r\n                  {/* <PositionPreview\r\n                    position={position}\r\n                    title={<Trans>Selected Range</Trans>}\r\n                    inRange={!outOfRange}\r\n                    ticksAtLimit={ticksAtLimit}\r\n                  /> */}\r\n                  <ProAmmPoolInfo position={existingPosition} />\r\n                  <ProAmmPooledTokens\r\n                    liquidityValue0={parsedAmounts[Field.CURRENCY_A]}\r\n                    liquidityValue1={parsedAmounts[Field.CURRENCY_B]}\r\n                    title={t`Increase Amount`}\r\n                  />\r\n                  <ProAmmPriceRange position={existingPosition} ticksAtLimit={ticksAtLimit} hideChart />\r\n                </div>\r\n              )\r\n            }\r\n            bottomContent={() => (\r\n              <ButtonPrimary onClick={onAdd}>\r\n                <Text fontWeight={500}>\r\n                  <Trans>Supply</Trans>\r\n                </Text>\r\n              </ButtonPrimary>\r\n            )}\r\n          />\r\n        )}\r\n        pendingText={pendingText}\r\n      />\r\n      <Container>\r\n        <AddRemoveTabs\r\n          action={LiquidityAction.INCREASE}\r\n          showTooltip={false}\r\n          hideShare\r\n          tutorialType={TutorialType.ELASTIC_INCREASE_LIQUIDITY}\r\n        />\r\n        {owner && account && !ownsNFT && !ownByFarm ? (\r\n          <Text\r\n            fontSize=\"12px\"\r\n            fontWeight=\"500\"\r\n            paddingTop={'10px'}\r\n            paddingBottom={'10px'}\r\n            backgroundColor={theme.bg3Opacity4}\r\n            color={theme.subText}\r\n            style={{ borderRadius: '4px', marginBottom: '1.25rem' }}\r\n          >\r\n            The owner of this liquidity position is {shortenAddress(chainId, owner)}\r\n            <span style={{ display: 'inline-block' }}>\r\n              <Copy toCopy={owner}></Copy>\r\n            </span>\r\n          </Text>\r\n        ) : (\r\n          <Divider style={{ marginBottom: '1.25rem' }} />\r\n        )}\r\n\r\n        {existingPosition ? (\r\n          <AutoColumn gap=\"md\" style={{ textAlign: 'left' }}>\r\n            <ProAmmPoolInfo position={existingPosition} tokenId={tokenId} />\r\n            <GridColumn>\r\n              <FirstColumn>\r\n                <ProAmmPooledTokens\r\n                  pooled\r\n                  liquidityValue0={CurrencyAmount.fromRawAmount(\r\n                    unwrappedToken(existingPosition.pool.token0),\r\n                    existingPosition.amount0.quotient,\r\n                  )}\r\n                  liquidityValue1={CurrencyAmount.fromRawAmount(\r\n                    unwrappedToken(existingPosition.pool.token1),\r\n                    existingPosition.amount1.quotient,\r\n                  )}\r\n                />\r\n\r\n                <AutoColumn gap=\"md\">\r\n                  <CurrencyInputPanel\r\n                    value={formattedAmounts[Field.CURRENCY_A]}\r\n                    onUserInput={onFieldAInput}\r\n                    onMax={() => {\r\n                      onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                    }}\r\n                    onHalf={() => {\r\n                      onFieldAInput(currencyBalances[Field.CURRENCY_A]?.divide(2)?.toExact() ?? '')\r\n                    }}\r\n                    currency={currencies[Field.CURRENCY_A] ?? null}\r\n                    id=\"add-liquidity-input-tokena\"\r\n                    showCommonBases\r\n                    positionMax=\"top\"\r\n                    locked={depositADisabled}\r\n                    estimatedUsd={formattedNum(estimatedUsdCurrencyA.toString(), true) || undefined}\r\n                    disableCurrencySelect={!baseCurrencyIsETHER && !baseCurrencyIsWETH}\r\n                    isSwitchMode={baseCurrencyIsETHER || baseCurrencyIsWETH}\r\n                    onSwitchCurrency={() => {\r\n                      chainId &&\r\n                        history.replace(\r\n                          `/elastic/increase/${\r\n                            baseCurrencyIsETHER ? WETH[chainId].address : NativeCurrencies[chainId].symbol\r\n                          }/${currencyIdB}/${feeAmount}/${tokenId}`,\r\n                        )\r\n                    }}\r\n                  />\r\n                  <CurrencyInputPanel\r\n                    value={formattedAmounts[Field.CURRENCY_B]}\r\n                    onUserInput={onFieldBInput}\r\n                    onMax={() => {\r\n                      onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                    }}\r\n                    onHalf={() => {\r\n                      onFieldBInput(currencyBalances[Field.CURRENCY_B]?.divide(2).toExact() ?? '')\r\n                    }}\r\n                    currency={currencies[Field.CURRENCY_B] ?? null}\r\n                    id=\"add-liquidity-input-tokenb\"\r\n                    showCommonBases\r\n                    positionMax=\"top\"\r\n                    locked={depositBDisabled}\r\n                    estimatedUsd={formattedNum(estimatedUsdCurrencyB.toString(), true) || undefined}\r\n                    disableCurrencySelect={!quoteCurrencyIsETHER && !quoteCurrencyIsWETH}\r\n                    isSwitchMode={quoteCurrencyIsETHER || quoteCurrencyIsWETH}\r\n                    onSwitchCurrency={() => {\r\n                      chainId &&\r\n                        history.replace(\r\n                          `/elastic/increase/${currencyIdA}/${\r\n                            quoteCurrencyIsETHER ? WETH[chainId].address : NativeCurrencies[chainId].symbol\r\n                          }/${feeAmount}/${tokenId}`,\r\n                        )\r\n                    }}\r\n                  />\r\n                </AutoColumn>\r\n                {/* <PositionPreview\r\n                  position={existingPosition}\r\n                  title={<Trans>Selected Range</Trans>}\r\n                  inRange={!outOfRange}\r\n                  ticksAtLimit={ticksAtLimit}\r\n                /> */}\r\n              </FirstColumn>\r\n              <SecondColumn>\r\n                <ProAmmPriceRange position={existingPosition} ticksAtLimit={ticksAtLimit} />\r\n                <Buttons />\r\n              </SecondColumn>\r\n            </GridColumn>\r\n          </AutoColumn>\r\n        ) : (\r\n          // <PositionPreview\r\n          //   position={existingPosition}\r\n          //   title={<Trans>Selected Range</Trans>}\r\n          //   inRange={!outOfRange}\r\n          //   ticksAtLimit={ticksAtLimit}\r\n          // />\r\n          <Loader />\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n","import { Pool, Position } from '@kyberswap/ks-sdk-elastic'\r\n\r\nimport { PositionDetails } from 'types/position'\r\n\r\nimport { useCurrency } from './Tokens'\r\nimport { usePool } from './usePools'\r\n\r\nexport function useProAmmDerivedPositionInfo(positionDetails: PositionDetails | undefined): {\r\n  position: Position | undefined\r\n  pool: Pool | undefined\r\n} {\r\n  const currency0 = useCurrency(positionDetails?.token0)\r\n  const currency1 = useCurrency(positionDetails?.token1)\r\n\r\n  // construct pool data\r\n  const [, pool] = usePool(currency0 ?? undefined, currency1 ?? undefined, positionDetails?.fee)\r\n\r\n  let position = undefined\r\n  if (pool && positionDetails) {\r\n    position = new Position({\r\n      pool,\r\n      liquidity: positionDetails.liquidity.toString(),\r\n      tickLower: positionDetails.tickLower,\r\n      tickUpper: positionDetails.tickUpper,\r\n    })\r\n  }\r\n\r\n  return {\r\n    position,\r\n    pool: pool ?? undefined,\r\n  }\r\n}\r\n"],"sourceRoot":""}